// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: up.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "up.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace up {

namespace {

const ::google::protobuf::Descriptor* up_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  up_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* request_upgrade_arousal_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_upgrade_arousal_level_reflection_ = NULL;
const ::google::protobuf::Descriptor* continue_pay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  continue_pay_reflection_ = NULL;
const ::google::protobuf::Descriptor* recharge_rebate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recharge_rebate_reflection_ = NULL;
const ::google::protobuf::Descriptor* every_day_happy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  every_day_happy_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_setting_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_change_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* system_setting_change_setting_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* system_setting_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_setting_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* push_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  push_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdk_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdk_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* request_userinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_userinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_cmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_lotto_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_lotto_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_reward_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_reward_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_bigpackage_reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_bigpackage_reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_lotto_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_lotto_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_all_guild_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_all_guild_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_money_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_money_price_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hero_upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_synthesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_synthesis_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_vitality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_vitality_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_vitality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_vitality_reflection_ = NULL;
const ::google::protobuf::Descriptor* consume_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  consume_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_refresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_refresh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* shop_refresh_rtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* shop_consume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_consume_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_levelup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_levelup_reflection_ = NULL;
const ::google::protobuf::Descriptor* sell_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sell_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* fragment_compose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fragment_compose_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_upgrade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hero_equip_upgrade_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_arousal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_arousal_reflection_ = NULL;
const ::google::protobuf::Descriptor* tutorial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tutorial_reflection_ = NULL;
const ::google::protobuf::Descriptor* trigger_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* require_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  require_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_task_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_task_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* trigger_job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_job_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* suspend_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  suspend_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* reset_elite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reset_elite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* reset_elite_rtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* sweep_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sweep_stage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sweep_stage_rtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* buy_skill_stren_point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_skill_stren_point_reflection_ = NULL;
const ::google::protobuf::Descriptor* ask_magicsoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_magicsoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* tavern_draw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tavern_draw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tavern_draw_draw_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tavern_draw_box_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hero_evolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_evolve_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_act_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_act_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ladder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ladder_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* apply_opponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  apply_opponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* end_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  end_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_lineup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_lineup_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_records_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_records_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_replay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_replay_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_skill_stren_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_skill_stren_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_rankboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_rankboard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* query_rankboard_rankboard_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* query_oppo_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_oppo_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* clear_battle_cd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clear_battle_cd_reflection_ = NULL;
const ::google::protobuf::Descriptor* draw_rank_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_rank_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_battle_chance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_battle_chance_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_name_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* set_name_set_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* set_avatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_avatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* query_data_query_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* midas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  midas_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* charge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  charge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ask_daily_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_daily_login_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ask_daily_login_status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tbc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_open_panel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_open_panel_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_query_oppo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_query_oppo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_start_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_start_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_end_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_end_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbc_draw_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbc_draw_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_maillist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_maillist_reflection_ = NULL;
const ::google::protobuf::Descriptor* read_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  read_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_svr_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_svr_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_vip_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_vip_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broad_say_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broad_say_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_fetch_bl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_fetch_bl_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_say_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_say_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_acc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_acc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* chat_acc_chat_acc_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* chat_fresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_fresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_add_bl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_add_bl_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_del_bl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_del_bl_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_jump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_jump_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_set_jump_is_can_jump_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_stage_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_stage_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_query_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_query_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_prepare_instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_prepare_instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_app_queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_app_queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_jump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_jump_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_items_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_items_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_give_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_give_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_drop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_drop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_apply_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_start_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_open_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_instance_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_instance_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_dismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_dismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_search_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_join_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_join_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_join_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_join_confirm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_join_confirm_confirm_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_leave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_leave_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_set_guild_join_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* guild_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_open_pannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_open_pannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_set_job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_set_job_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_add_hire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_add_hire_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_del_hire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_del_hire_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_query_hires_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_query_hires_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_hire_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_hire_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_worship_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_worship_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_worship_withdraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_worship_withdraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_qurey_hh_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_qurey_hh_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ask_activity_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ask_activity_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* cdkey_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cdkey_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_reflection_ = NULL;
const ::google::protobuf::Descriptor* search_excavate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  search_excavate_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_excavate_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_excavate_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_start_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_start_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_end_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_end_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_excavate_def_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_excavate_def_reflection_ = NULL;
const ::google::protobuf::Descriptor* clear_excavate_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clear_excavate_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* withdraw_excavate_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  withdraw_excavate_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* draw_excavate_def_rwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_excavate_def_rwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* drop_excavate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  drop_excavate_reflection_ = NULL;
const ::google::protobuf::Descriptor* excavate_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  excavate_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_split_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_split_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_split_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_split_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* split_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  split_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldcup_submit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldcup_submit_reflection_ = NULL;
const ::google::protobuf::Descriptor* report_battle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  report_battle_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_ranklist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_ranklist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* query_ranklist_rank_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dot_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dot_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* require_arousal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  require_arousal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* require_arousal_arousal_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* change_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_server_reflection_ = NULL;
const ::google::protobuf::Descriptor* request_guild_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_guild_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* query_act_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  query_act_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* fb_attention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fb_attention_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hero_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* guild_job_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* hire_from_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* chat_channel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* server_opt_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* platform_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* battle_result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_up_2eproto() {
  protobuf_AddDesc_up_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "up.proto");
  GOOGLE_CHECK(file != NULL);
  up_msg_descriptor_ = file->message_type(0);
  static const int up_msg_offsets_[79] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _request_userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _enter_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _exit_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _gm_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _hero_upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _equip_synthesis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _wear_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _consume_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _shop_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _shop_consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _skill_levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _sell_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _fragment_compose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _hero_equip_upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _trigger_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _require_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _trigger_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _job_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _reset_elite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _sweep_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _buy_vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _buy_skill_stren_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _tavern_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _hero_evolve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _enter_act_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _sync_vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _suspend_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _tutorial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _ladder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _set_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _midas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _open_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _sdk_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _set_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _ask_daily_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _tbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _get_maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _read_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _get_svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _get_vip_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _important_data_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _cdkey_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _ask_magicsoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _ask_activity_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _excavate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _push_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _system_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_split_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_split_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _split_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _worldcup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _report_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _sync_skill_stren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _change_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _require_arousal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _change_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _request_guild_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _query_act_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _request_upgrade_arousal_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _fb_attention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _dot_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_lotto_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_lotto_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_bigpackage_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_bigpackage_reward_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _activity_bigpackage_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _continue_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _recharge_rebate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _every_day_happy_),
  };
  up_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      up_msg_descriptor_,
      up_msg::default_instance_,
      up_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(up_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(up_msg));
  request_upgrade_arousal_level_descriptor_ = file->message_type(1);
  static const int request_upgrade_arousal_level_offsets_[1] = {
  };
  request_upgrade_arousal_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_upgrade_arousal_level_descriptor_,
      request_upgrade_arousal_level::default_instance_,
      request_upgrade_arousal_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_upgrade_arousal_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_upgrade_arousal_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request_upgrade_arousal_level));
  continue_pay_descriptor_ = file->message_type(2);
  static const int continue_pay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay, _continue_pay_),
  };
  continue_pay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      continue_pay_descriptor_,
      continue_pay::default_instance_,
      continue_pay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(continue_pay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(continue_pay));
  recharge_rebate_descriptor_ = file->message_type(3);
  static const int recharge_rebate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate, _recharge_rebate_),
  };
  recharge_rebate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recharge_rebate_descriptor_,
      recharge_rebate::default_instance_,
      recharge_rebate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_rebate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recharge_rebate));
  every_day_happy_descriptor_ = file->message_type(4);
  static const int every_day_happy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy, _every_day_happy_),
  };
  every_day_happy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      every_day_happy_descriptor_,
      every_day_happy::default_instance_,
      every_day_happy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(every_day_happy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(every_day_happy));
  system_setting_descriptor_ = file->message_type(5);
  static const int system_setting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting, _request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting, _change_),
  };
  system_setting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_descriptor_,
      system_setting::default_instance_,
      system_setting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting));
  system_setting_change_descriptor_ = file->message_type(6);
  static const int system_setting_change_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, value_),
  };
  system_setting_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_change_descriptor_,
      system_setting_change::default_instance_,
      system_setting_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_change));
  system_setting_change_setting_status_descriptor_ = system_setting_change_descriptor_->enum_type(0);
  system_setting_request_descriptor_ = file->message_type(7);
  static const int system_setting_request_offsets_[1] = {
  };
  system_setting_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_setting_request_descriptor_,
      system_setting_request::default_instance_,
      system_setting_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_setting_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_setting_request));
  push_notify_descriptor_ = file->message_type(8);
  static const int push_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_notify, _client_id_),
  };
  push_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      push_notify_descriptor_,
      push_notify::default_instance_,
      push_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(push_notify));
  login_descriptor_ = file->message_type(9);
  static const int login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _active_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _old_deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _languageid_),
  };
  login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_descriptor_,
      login::default_instance_,
      login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login));
  sdk_login_descriptor_ = file->message_type(10);
  static const int sdk_login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login, _session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login, _plat_id_),
  };
  sdk_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sdk_login_descriptor_,
      sdk_login::default_instance_,
      sdk_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdk_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sdk_login));
  request_userinfo_descriptor_ = file->message_type(11);
  static const int request_userinfo_offsets_[1] = {
  };
  request_userinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_userinfo_descriptor_,
      request_userinfo::default_instance_,
      request_userinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_userinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_userinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request_userinfo));
  enter_stage_descriptor_ = file->message_type(12);
  static const int enter_stage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage, _stage_id_),
  };
  enter_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_stage_descriptor_,
      enter_stage::default_instance_,
      enter_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_stage));
  exit_stage_descriptor_ = file->message_type(13);
  static const int exit_stage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _oprations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _self_data_),
  };
  exit_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_stage_descriptor_,
      exit_stage::default_instance_,
      exit_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_stage));
  gm_cmd_descriptor_ = file->message_type(14);
  static const int gm_cmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _unlock_all_stages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _get_all_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_hero_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_recharge_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_player_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _reset_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _open_mystery_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _archive_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _restore_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _reset_sweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _set_dailylogin_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _open_guild_stage_),
  };
  gm_cmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_cmd_descriptor_,
      gm_cmd::default_instance_,
      gm_cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_cmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_cmd));
  activity_info_descriptor_ = file->message_type(15);
  static const int activity_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _version_),
  };
  activity_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_descriptor_,
      activity_info::default_instance_,
      activity_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info));
  activity_lotto_info_descriptor_ = file->message_type(16);
  static const int activity_lotto_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info, _activity_id_),
  };
  activity_lotto_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_lotto_info_descriptor_,
      activity_lotto_info::default_instance_,
      activity_lotto_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_lotto_info));
  activity_bigpackage_info_descriptor_ = file->message_type(17);
  static const int activity_bigpackage_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info, _activity_id_),
  };
  activity_bigpackage_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_info_descriptor_,
      activity_bigpackage_info::default_instance_,
      activity_bigpackage_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_info));
  activity_bigpackage_reward_info_descriptor_ = file->message_type(18);
  static const int activity_bigpackage_reward_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_info, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_info, _activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_info, _box_id_),
  };
  activity_bigpackage_reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_reward_info_descriptor_,
      activity_bigpackage_reward_info::default_instance_,
      activity_bigpackage_reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_reward_info));
  activity_bigpackage_reset_descriptor_ = file->message_type(19);
  static const int activity_bigpackage_reset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset, _activity_id_),
  };
  activity_bigpackage_reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_bigpackage_reset_descriptor_,
      activity_bigpackage_reset::default_instance_,
      activity_bigpackage_reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_bigpackage_reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_bigpackage_reset));
  activity_lotto_reward_descriptor_ = file->message_type(20);
  static const int activity_lotto_reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward, _group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward, _activity_id_),
  };
  activity_lotto_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_lotto_reward_descriptor_,
      activity_lotto_reward::default_instance_,
      activity_lotto_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_lotto_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_lotto_reward));
  open_all_guild_stage_descriptor_ = file->message_type(21);
  static const int open_all_guild_stage_offsets_[1] = {
  };
  open_all_guild_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_all_guild_stage_descriptor_,
      open_all_guild_stage::default_instance_,
      open_all_guild_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_all_guild_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_all_guild_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_all_guild_stage));
  set_money_descriptor_ = file->message_type(22);
  static const int set_money_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_money, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_money, _amount_),
  };
  set_money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_money_descriptor_,
      set_money::default_instance_,
      set_money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_money));
  set_money_price_type_descriptor_ = set_money_descriptor_->enum_type(0);
  hero_upgrade_descriptor_ = file->message_type(23);
  static const int hero_upgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade, _hero_id_),
  };
  hero_upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upgrade_descriptor_,
      hero_upgrade::default_instance_,
      hero_upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upgrade));
  equip_synthesis_descriptor_ = file->message_type(24);
  static const int equip_synthesis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis, _equip_id_),
  };
  equip_synthesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_synthesis_descriptor_,
      equip_synthesis::default_instance_,
      equip_synthesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_synthesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_synthesis));
  wear_equip_descriptor_ = file->message_type(25);
  static const int wear_equip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip, _hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip, _item_pos_),
  };
  wear_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_equip_descriptor_,
      wear_equip::default_instance_,
      wear_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_equip));
  sync_vitality_descriptor_ = file->message_type(26);
  static const int sync_vitality_offsets_[1] = {
  };
  sync_vitality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_vitality_descriptor_,
      sync_vitality::default_instance_,
      sync_vitality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_vitality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_vitality));
  buy_vitality_descriptor_ = file->message_type(27);
  static const int buy_vitality_offsets_[1] = {
  };
  buy_vitality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_vitality_descriptor_,
      buy_vitality::default_instance_,
      buy_vitality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vitality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_vitality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_vitality));
  consume_item_descriptor_ = file->message_type(28);
  static const int consume_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item, _hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item, _item_id_),
  };
  consume_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      consume_item_descriptor_,
      consume_item::default_instance_,
      consume_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(consume_item));
  shop_refresh_descriptor_ = file->message_type(29);
  static const int shop_refresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh, _shop_id_),
  };
  shop_refresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_refresh_descriptor_,
      shop_refresh::default_instance_,
      shop_refresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_refresh));
  shop_refresh_rtype_descriptor_ = shop_refresh_descriptor_->enum_type(0);
  shop_consume_descriptor_ = file->message_type(30);
  static const int shop_consume_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume, _sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume, _slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume, _amount_),
  };
  shop_consume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_consume_descriptor_,
      shop_consume::default_instance_,
      shop_consume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_consume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_consume));
  skill_levelup_descriptor_ = file->message_type(31);
  static const int skill_levelup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup, _heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup, _order_),
  };
  skill_levelup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_levelup_descriptor_,
      skill_levelup::default_instance_,
      skill_levelup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_levelup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_levelup));
  sell_item_descriptor_ = file->message_type(32);
  static const int sell_item_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item, _item_),
  };
  sell_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sell_item_descriptor_,
      sell_item::default_instance_,
      sell_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sell_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sell_item));
  fragment_compose_descriptor_ = file->message_type(33);
  static const int fragment_compose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose, _fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose, _frag_amount_),
  };
  fragment_compose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fragment_compose_descriptor_,
      fragment_compose::default_instance_,
      fragment_compose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fragment_compose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fragment_compose));
  hero_equip_upgrade_descriptor_ = file->message_type(34);
  static const int hero_equip_upgrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _materials_),
  };
  hero_equip_upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_upgrade_descriptor_,
      hero_equip_upgrade::default_instance_,
      hero_equip_upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_upgrade));
  hero_equip_upgrade_OP_TYPE_descriptor_ = hero_equip_upgrade_descriptor_->enum_type(0);
  hero_equip_descriptor_ = file->message_type(35);
  static const int hero_equip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _exp_),
  };
  hero_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_descriptor_,
      hero_equip::default_instance_,
      hero_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip));
  hero_descriptor_ = file->message_type(36);
  static const int hero_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _skill_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _arousal_),
  };
  hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_descriptor_,
      hero::default_instance_,
      hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero));
  hero_arousal_descriptor_ = file->message_type(37);
  static const int hero_arousal_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _agi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _str_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _agi_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _int_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _aro_exp_),
  };
  hero_arousal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_arousal_descriptor_,
      hero_arousal::default_instance_,
      hero_arousal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_arousal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_arousal));
  tutorial_descriptor_ = file->message_type(38);
  static const int tutorial_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial, _record_),
  };
  tutorial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tutorial_descriptor_,
      tutorial::default_instance_,
      tutorial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tutorial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tutorial));
  trigger_task_descriptor_ = file->message_type(39);
  static const int trigger_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task, _task_),
  };
  trigger_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_task_descriptor_,
      trigger_task::default_instance_,
      trigger_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_task));
  require_rewards_descriptor_ = file->message_type(40);
  static const int require_rewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards, _line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards, _id_),
  };
  require_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      require_rewards_descriptor_,
      require_rewards::default_instance_,
      require_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(require_rewards));
  change_task_status_descriptor_ = file->message_type(41);
  static const int change_task_status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_task_status, _line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_task_status, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_task_status, _operation_),
  };
  change_task_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_task_status_descriptor_,
      change_task_status::default_instance_,
      change_task_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_task_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_task_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_task_status));
  trigger_job_descriptor_ = file->message_type(42);
  static const int trigger_job_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job, _jobs_),
  };
  trigger_job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_job_descriptor_,
      trigger_job::default_instance_,
      trigger_job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_job));
  job_rewards_descriptor_ = file->message_type(43);
  static const int job_rewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards, _job_),
  };
  job_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_rewards_descriptor_,
      job_rewards::default_instance_,
      job_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_rewards));
  suspend_report_descriptor_ = file->message_type(44);
  static const int suspend_report_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_report, _gametime_),
  };
  suspend_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      suspend_report_descriptor_,
      suspend_report::default_instance_,
      suspend_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suspend_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(suspend_report));
  reset_elite_descriptor_ = file->message_type(45);
  static const int reset_elite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite, _stageid_),
  };
  reset_elite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reset_elite_descriptor_,
      reset_elite::default_instance_,
      reset_elite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reset_elite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reset_elite));
  reset_elite_rtype_descriptor_ = reset_elite_descriptor_->enum_type(0);
  sweep_stage_descriptor_ = file->message_type(46);
  static const int sweep_stage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage, _stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage, _times_),
  };
  sweep_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sweep_stage_descriptor_,
      sweep_stage::default_instance_,
      sweep_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sweep_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sweep_stage));
  sweep_stage_rtype_descriptor_ = sweep_stage_descriptor_->enum_type(0);
  buy_skill_stren_point_descriptor_ = file->message_type(47);
  static const int buy_skill_stren_point_offsets_[1] = {
  };
  buy_skill_stren_point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_skill_stren_point_descriptor_,
      buy_skill_stren_point::default_instance_,
      buy_skill_stren_point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_skill_stren_point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_skill_stren_point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_skill_stren_point));
  ask_magicsoul_descriptor_ = file->message_type(48);
  static const int ask_magicsoul_offsets_[1] = {
  };
  ask_magicsoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_magicsoul_descriptor_,
      ask_magicsoul::default_instance_,
      ask_magicsoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_magicsoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_magicsoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_magicsoul));
  tavern_draw_descriptor_ = file->message_type(49);
  static const int tavern_draw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw, _draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw, _box_type_),
  };
  tavern_draw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tavern_draw_descriptor_,
      tavern_draw::default_instance_,
      tavern_draw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tavern_draw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tavern_draw));
  tavern_draw_draw_type_descriptor_ = tavern_draw_descriptor_->enum_type(0);
  tavern_draw_box_type_descriptor_ = tavern_draw_descriptor_->enum_type(1);
  hero_evolve_descriptor_ = file->message_type(50);
  static const int hero_evolve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve, _heroid_),
  };
  hero_evolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_evolve_descriptor_,
      hero_evolve::default_instance_,
      hero_evolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_evolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_evolve));
  enter_act_stage_descriptor_ = file->message_type(51);
  static const int enter_act_stage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_act_stage, _stage_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_act_stage, _stage_),
  };
  enter_act_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_act_stage_descriptor_,
      enter_act_stage::default_instance_,
      enter_act_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_act_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_act_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_act_stage));
  ladder_descriptor_ = file->message_type(52);
  static const int ladder_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _open_panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _apply_opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _start_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _end_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _set_lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _query_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _query_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _query_rankboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _query_oppo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _clear_battle_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _draw_rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _buy_battle_chance_),
  };
  ladder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ladder_descriptor_,
      ladder::default_instance_,
      ladder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ladder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ladder));
  open_panel_descriptor_ = file->message_type(53);
  static const int open_panel_offsets_[1] = {
  };
  open_panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_panel_descriptor_,
      open_panel::default_instance_,
      open_panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_panel));
  apply_opponent_descriptor_ = file->message_type(54);
  static const int apply_opponent_offsets_[1] = {
  };
  apply_opponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      apply_opponent_descriptor_,
      apply_opponent::default_instance_,
      apply_opponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_opponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(apply_opponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(apply_opponent));
  start_battle_descriptor_ = file->message_type(55);
  static const int start_battle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _oppo_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _attack_lineup_),
  };
  start_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_battle_descriptor_,
      start_battle::default_instance_,
      start_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_battle));
  end_battle_descriptor_ = file->message_type(56);
  static const int end_battle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _result_),
  };
  end_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      end_battle_descriptor_,
      end_battle::default_instance_,
      end_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(end_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(end_battle));
  set_lineup_descriptor_ = file->message_type(57);
  static const int set_lineup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _lineup_),
  };
  set_lineup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_lineup_descriptor_,
      set_lineup::default_instance_,
      set_lineup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_lineup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_lineup));
  query_records_descriptor_ = file->message_type(58);
  static const int query_records_offsets_[1] = {
  };
  query_records_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_records_descriptor_,
      query_records::default_instance_,
      query_records_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_records, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_records, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_records));
  query_replay_descriptor_ = file->message_type(59);
  static const int query_replay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _record_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _record_svrid_),
  };
  query_replay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_replay_descriptor_,
      query_replay::default_instance_,
      query_replay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_replay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_replay));
  sync_skill_stren_descriptor_ = file->message_type(60);
  static const int sync_skill_stren_offsets_[1] = {
  };
  sync_skill_stren_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_skill_stren_descriptor_,
      sync_skill_stren::default_instance_,
      sync_skill_stren_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_skill_stren, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_skill_stren, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_skill_stren));
  query_rankboard_descriptor_ = file->message_type(61);
  static const int query_rankboard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _type_),
  };
  query_rankboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_rankboard_descriptor_,
      query_rankboard::default_instance_,
      query_rankboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_rankboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_rankboard));
  query_rankboard_rankboard_type_descriptor_ = query_rankboard_descriptor_->enum_type(0);
  query_oppo_info_descriptor_ = file->message_type(62);
  static const int query_oppo_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _oppo_user_id_),
  };
  query_oppo_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_oppo_info_descriptor_,
      query_oppo_info::default_instance_,
      query_oppo_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_oppo_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_oppo_info));
  clear_battle_cd_descriptor_ = file->message_type(63);
  static const int clear_battle_cd_offsets_[1] = {
  };
  clear_battle_cd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clear_battle_cd_descriptor_,
      clear_battle_cd::default_instance_,
      clear_battle_cd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_battle_cd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_battle_cd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clear_battle_cd));
  draw_rank_reward_descriptor_ = file->message_type(64);
  static const int draw_rank_reward_offsets_[1] = {
  };
  draw_rank_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_rank_reward_descriptor_,
      draw_rank_reward::default_instance_,
      draw_rank_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_rank_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_rank_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_rank_reward));
  buy_battle_chance_descriptor_ = file->message_type(65);
  static const int buy_battle_chance_offsets_[1] = {
  };
  buy_battle_chance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_battle_chance_descriptor_,
      buy_battle_chance::default_instance_,
      buy_battle_chance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_battle_chance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_battle_chance));
  set_name_descriptor_ = file->message_type(66);
  static const int set_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name, _name_),
  };
  set_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_name_descriptor_,
      set_name::default_instance_,
      set_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_name));
  set_name_set_type_descriptor_ = set_name_descriptor_->enum_type(0);
  set_avatar_descriptor_ = file->message_type(67);
  static const int set_avatar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar, _avatar_),
  };
  set_avatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_avatar_descriptor_,
      set_avatar::default_instance_,
      set_avatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_avatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_avatar));
  query_data_descriptor_ = file->message_type(68);
  static const int query_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data, _query_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data, _month_card_id_),
  };
  query_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_data_descriptor_,
      query_data::default_instance_,
      query_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_data));
  query_data_query_type_descriptor_ = query_data_descriptor_->enum_type(0);
  midas_descriptor_ = file->message_type(69);
  static const int midas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas, _times_),
  };
  midas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      midas_descriptor_,
      midas::default_instance_,
      midas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(midas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(midas));
  open_shop_descriptor_ = file->message_type(70);
  static const int open_shop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop, _shopid_),
  };
  open_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_shop_descriptor_,
      open_shop::default_instance_,
      open_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_shop));
  charge_descriptor_ = file->message_type(71);
  static const int charge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge, _platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge, _chargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge, _extradata_),
  };
  charge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      charge_descriptor_,
      charge::default_instance_,
      charge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(charge));
  ask_daily_login_descriptor_ = file->message_type(72);
  static const int ask_daily_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login, _status_),
  };
  ask_daily_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_daily_login_descriptor_,
      ask_daily_login::default_instance_,
      ask_daily_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_daily_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_daily_login));
  ask_daily_login_status_descriptor_ = ask_daily_login_descriptor_->enum_type(0);
  tbc_descriptor_ = file->message_type(73);
  static const int tbc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _open_panel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _query_oppo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _start_bat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _end_bat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _draw_reward_),
  };
  tbc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_descriptor_,
      tbc::default_instance_,
      tbc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc));
  tbc_open_panel_descriptor_ = file->message_type(74);
  static const int tbc_open_panel_offsets_[1] = {
  };
  tbc_open_panel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_open_panel_descriptor_,
      tbc_open_panel::default_instance_,
      tbc_open_panel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_open_panel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_open_panel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_open_panel));
  tbc_query_oppo_descriptor_ = file->message_type(75);
  static const int tbc_query_oppo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _stage_id_),
  };
  tbc_query_oppo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_query_oppo_descriptor_,
      tbc_query_oppo::default_instance_,
      tbc_query_oppo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_query_oppo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_query_oppo));
  tbc_start_battle_descriptor_ = file->message_type(76);
  static const int tbc_start_battle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _heroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _use_hire_),
  };
  tbc_start_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_start_battle_descriptor_,
      tbc_start_battle::default_instance_,
      tbc_start_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_start_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_start_battle));
  tbc_hero_descriptor_ = file->message_type(77);
  static const int tbc_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _hp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _mp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _custom_data_),
  };
  tbc_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_hero_descriptor_,
      tbc_hero::default_instance_,
      tbc_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_hero));
  tbc_end_battle_descriptor_ = file->message_type(78);
  static const int tbc_end_battle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _self_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _oppo_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _oprations_),
  };
  tbc_end_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_end_battle_descriptor_,
      tbc_end_battle::default_instance_,
      tbc_end_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_end_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_end_battle));
  tbc_reset_descriptor_ = file->message_type(79);
  static const int tbc_reset_offsets_[1] = {
  };
  tbc_reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_reset_descriptor_,
      tbc_reset::default_instance_,
      tbc_reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_reset));
  tbc_draw_reward_descriptor_ = file->message_type(80);
  static const int tbc_draw_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _stage_id_),
  };
  tbc_draw_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbc_draw_reward_descriptor_,
      tbc_draw_reward::default_instance_,
      tbc_draw_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbc_draw_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbc_draw_reward));
  get_maillist_descriptor_ = file->message_type(81);
  static const int get_maillist_offsets_[1] = {
  };
  get_maillist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_maillist_descriptor_,
      get_maillist::default_instance_,
      get_maillist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_maillist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_maillist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_maillist));
  read_mail_descriptor_ = file->message_type(82);
  static const int read_mail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail, _id_),
  };
  read_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      read_mail_descriptor_,
      read_mail::default_instance_,
      read_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(read_mail));
  get_svr_time_descriptor_ = file->message_type(83);
  static const int get_svr_time_offsets_[1] = {
  };
  get_svr_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_svr_time_descriptor_,
      get_svr_time::default_instance_,
      get_svr_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_svr_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_svr_time));
  get_vip_gift_descriptor_ = file->message_type(84);
  static const int get_vip_gift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift, _vip_),
  };
  get_vip_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_vip_gift_descriptor_,
      get_vip_gift::default_instance_,
      get_vip_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_vip_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_vip_gift));
  chat_descriptor_ = file->message_type(85);
  static const int chat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _say_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _chat_add_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _chat_del_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _chat_fetch_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _chat_broad_say_),
  };
  chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_descriptor_,
      chat::default_instance_,
      chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat));
  chat_broad_say_descriptor_ = file->message_type(86);
  static const int chat_broad_say_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _target_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _accessory_),
  };
  chat_broad_say_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broad_say_descriptor_,
      chat_broad_say::default_instance_,
      chat_broad_say_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broad_say, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broad_say));
  chat_fetch_bl_descriptor_ = file->message_type(87);
  static const int chat_fetch_bl_offsets_[1] = {
  };
  chat_fetch_bl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_fetch_bl_descriptor_,
      chat_fetch_bl::default_instance_,
      chat_fetch_bl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch_bl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch_bl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_fetch_bl));
  chat_say_descriptor_ = file->message_type(88);
  static const int chat_say_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _accessory_),
  };
  chat_say_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_say_descriptor_,
      chat_say::default_instance_,
      chat_say_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_say, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_say));
  chat_acc_descriptor_ = file->message_type(89);
  static const int chat_acc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _record_id_),
  };
  chat_acc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_acc_descriptor_,
      chat_acc::default_instance_,
      chat_acc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_acc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_acc));
  chat_acc_chat_acc_t_descriptor_ = chat_acc_descriptor_->enum_type(0);
  chat_fresh_descriptor_ = file->message_type(90);
  static const int chat_fresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _channel_),
  };
  chat_fresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_fresh_descriptor_,
      chat_fresh::default_instance_,
      chat_fresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_fresh));
  chat_fetch_descriptor_ = file->message_type(91);
  static const int chat_fetch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _chat_id_),
  };
  chat_fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_fetch_descriptor_,
      chat_fetch::default_instance_,
      chat_fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_fetch));
  chat_add_bl_descriptor_ = file->message_type(92);
  static const int chat_add_bl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _uid_),
  };
  chat_add_bl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_add_bl_descriptor_,
      chat_add_bl::default_instance_,
      chat_add_bl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_add_bl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_add_bl));
  chat_del_bl_descriptor_ = file->message_type(93);
  static const int chat_del_bl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _uid_),
  };
  chat_del_bl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_del_bl_descriptor_,
      chat_del_bl::default_instance_,
      chat_del_bl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_del_bl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_del_bl));
  guild_descriptor_ = file->message_type(94);
  static const int guild_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _dismiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _join_confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _guild_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _open_pannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _set_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _add_hire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _del_hire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _query_hires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _hire_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _worship_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _worship_withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _query_hh_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _drop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _drop_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _items_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _guild_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _guild_app_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _instance_prepare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _guild_query_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _guild_stage_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _set_jump_),
  };
  guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_descriptor_,
      guild::default_instance_,
      guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild));
  guild_set_jump_descriptor_ = file->message_type(95);
  static const int guild_set_jump_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _is_can_jump_),
  };
  guild_set_jump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_jump_descriptor_,
      guild_set_jump::default_instance_,
      guild_set_jump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_jump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set_jump));
  guild_set_jump_is_can_jump_descriptor_ = guild_set_jump_descriptor_->enum_type(0);
  guild_stage_rank_descriptor_ = file->message_type(96);
  static const int guild_stage_rank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _stage_id_),
  };
  guild_stage_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_stage_rank_descriptor_,
      guild_stage_rank::default_instance_,
      guild_stage_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_stage_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_stage_rank));
  guild_query_member_descriptor_ = file->message_type(97);
  static const int guild_query_member_offsets_[1] = {
  };
  guild_query_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_query_member_descriptor_,
      guild_query_member::default_instance_,
      guild_query_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_query_member));
  guild_prepare_instance_descriptor_ = file->message_type(98);
  static const int guild_prepare_instance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_prepare_instance, _stage_id_),
  };
  guild_prepare_instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_prepare_instance_descriptor_,
      guild_prepare_instance::default_instance_,
      guild_prepare_instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_prepare_instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_prepare_instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_prepare_instance));
  guild_app_queue_descriptor_ = file->message_type(99);
  static const int guild_app_queue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _item_id_),
  };
  guild_app_queue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_app_queue_descriptor_,
      guild_app_queue::default_instance_,
      guild_app_queue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_app_queue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_app_queue));
  guild_jump_descriptor_ = file->message_type(100);
  static const int guild_jump_offsets_[1] = {
  };
  guild_jump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_jump_descriptor_,
      guild_jump::default_instance_,
      guild_jump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_jump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_jump));
  guild_items_history_descriptor_ = file->message_type(101);
  static const int guild_items_history_offsets_[1] = {
  };
  guild_items_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_items_history_descriptor_,
      guild_items_history::default_instance_,
      guild_items_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_items_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_items_history));
  guild_drop_give_descriptor_ = file->message_type(102);
  static const int guild_drop_give_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _time_out_end_),
  };
  guild_drop_give_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_give_descriptor_,
      guild_drop_give::default_instance_,
      guild_drop_give_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_give, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_give));
  guild_instance_damage_descriptor_ = file->message_type(103);
  static const int guild_instance_damage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _raid_id_),
  };
  guild_instance_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_damage_descriptor_,
      guild_instance_damage::default_instance_,
      guild_instance_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_damage));
  guild_drop_info_descriptor_ = file->message_type(104);
  static const int guild_drop_info_offsets_[1] = {
  };
  guild_drop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_drop_info_descriptor_,
      guild_drop_info::default_instance_,
      guild_drop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_drop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_drop_info));
  guild_instance_apply_descriptor_ = file->message_type(105);
  static const int guild_instance_apply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _item_id_),
  };
  guild_instance_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_apply_descriptor_,
      guild_instance_apply::default_instance_,
      guild_instance_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_apply));
  guild_instance_start_descriptor_ = file->message_type(106);
  static const int guild_instance_start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _stage_id_),
  };
  guild_instance_start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_start_descriptor_,
      guild_instance_start::default_instance_,
      guild_instance_start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_start));
  guild_instance_end_descriptor_ = file->message_type(107);
  static const int guild_instance_end_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _hp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _stage_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _oprations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _heroes_),
  };
  guild_instance_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_end_descriptor_,
      guild_instance_end::default_instance_,
      guild_instance_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_end));
  guild_instance_drop_descriptor_ = file->message_type(108);
  static const int guild_instance_drop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _raid_id_),
  };
  guild_instance_drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_drop_descriptor_,
      guild_instance_drop::default_instance_,
      guild_instance_drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_drop));
  guild_instance_open_descriptor_ = file->message_type(109);
  static const int guild_instance_open_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _raid_id_),
  };
  guild_instance_open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_open_descriptor_,
      guild_instance_open::default_instance_,
      guild_instance_open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_open));
  guild_instance_query_descriptor_ = file->message_type(110);
  static const int guild_instance_query_offsets_[1] = {
  };
  guild_instance_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_query_descriptor_,
      guild_instance_query::default_instance_,
      guild_instance_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_query));
  guild_instance_detail_descriptor_ = file->message_type(111);
  static const int guild_instance_detail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _stage_id_),
  };
  guild_instance_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_instance_detail_descriptor_,
      guild_instance_detail::default_instance_,
      guild_instance_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_instance_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_instance_detail));
  guild_create_descriptor_ = file->message_type(112);
  static const int guild_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _avatar_),
  };
  guild_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_create_descriptor_,
      guild_create::default_instance_,
      guild_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_create));
  guild_dismiss_descriptor_ = file->message_type(113);
  static const int guild_dismiss_offsets_[1] = {
  };
  guild_dismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_dismiss_descriptor_,
      guild_dismiss::default_instance_,
      guild_dismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_dismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_dismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_dismiss));
  guild_list_descriptor_ = file->message_type(114);
  static const int guild_list_offsets_[1] = {
  };
  guild_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_list_descriptor_,
      guild_list::default_instance_,
      guild_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_list));
  guild_search_descriptor_ = file->message_type(115);
  static const int guild_search_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _guild_id_),
  };
  guild_search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_search_descriptor_,
      guild_search::default_instance_,
      guild_search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_search));
  guild_join_descriptor_ = file->message_type(116);
  static const int guild_join_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _guild_id_),
  };
  guild_join_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_join_descriptor_,
      guild_join::default_instance_,
      guild_join_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_join));
  guild_join_confirm_descriptor_ = file->message_type(117);
  static const int guild_join_confirm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _type_),
  };
  guild_join_confirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_join_confirm_descriptor_,
      guild_join_confirm::default_instance_,
      guild_join_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_join_confirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_join_confirm));
  guild_join_confirm_confirm_type_descriptor_ = guild_join_confirm_descriptor_->enum_type(0);
  guild_leave_descriptor_ = file->message_type(118);
  static const int guild_leave_offsets_[1] = {
  };
  guild_leave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_leave_descriptor_,
      guild_leave::default_instance_,
      guild_leave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_leave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_leave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_leave));
  guild_kick_descriptor_ = file->message_type(119);
  static const int guild_kick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _uid_),
  };
  guild_kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_kick_descriptor_,
      guild_kick::default_instance_,
      guild_kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_kick));
  guild_set_descriptor_ = file->message_type(120);
  static const int guild_set_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _join_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _join_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _slogan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _can_jump_),
  };
  guild_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_descriptor_,
      guild_set::default_instance_,
      guild_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set));
  guild_set_guild_join_t_descriptor_ = guild_set_descriptor_->enum_type(0);
  guild_query_descriptor_ = file->message_type(121);
  static const int guild_query_offsets_[1] = {
  };
  guild_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_query_descriptor_,
      guild_query::default_instance_,
      guild_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_query));
  guild_open_pannel_descriptor_ = file->message_type(122);
  static const int guild_open_pannel_offsets_[1] = {
  };
  guild_open_pannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_open_pannel_descriptor_,
      guild_open_pannel::default_instance_,
      guild_open_pannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_open_pannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_open_pannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_open_pannel));
  guild_set_job_descriptor_ = file->message_type(123);
  static const int guild_set_job_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _job_),
  };
  guild_set_job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_set_job_descriptor_,
      guild_set_job::default_instance_,
      guild_set_job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_set_job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_set_job));
  guild_add_hire_descriptor_ = file->message_type(124);
  static const int guild_add_hire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _heroid_),
  };
  guild_add_hire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_add_hire_descriptor_,
      guild_add_hire::default_instance_,
      guild_add_hire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_add_hire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_add_hire));
  guild_del_hire_descriptor_ = file->message_type(125);
  static const int guild_del_hire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _heroid_),
  };
  guild_del_hire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_del_hire_descriptor_,
      guild_del_hire::default_instance_,
      guild_del_hire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_del_hire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_del_hire));
  guild_query_hires_descriptor_ = file->message_type(126);
  static const int guild_query_hires_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _from_),
  };
  guild_query_hires_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_query_hires_descriptor_,
      guild_query_hires::default_instance_,
      guild_query_hires_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_query_hires, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_query_hires));
  guild_hire_hero_descriptor_ = file->message_type(127);
  static const int guild_hire_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _stage_id_),
  };
  guild_hire_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_hire_hero_descriptor_,
      guild_hire_hero::default_instance_,
      guild_hire_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_hire_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_hire_hero));
  guild_worship_req_descriptor_ = file->message_type(128);
  static const int guild_worship_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _uid_),
  };
  guild_worship_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_worship_req_descriptor_,
      guild_worship_req::default_instance_,
      guild_worship_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_worship_req));
  guild_worship_withdraw_descriptor_ = file->message_type(129);
  static const int guild_worship_withdraw_offsets_[1] = {
  };
  guild_worship_withdraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_worship_withdraw_descriptor_,
      guild_worship_withdraw::default_instance_,
      guild_worship_withdraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_worship_withdraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_worship_withdraw));
  guild_qurey_hh_detail_descriptor_ = file->message_type(130);
  static const int guild_qurey_hh_detail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _heroid_),
  };
  guild_qurey_hh_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_qurey_hh_detail_descriptor_,
      guild_qurey_hh_detail::default_instance_,
      guild_qurey_hh_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_qurey_hh_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_qurey_hh_detail));
  ask_activity_info_descriptor_ = file->message_type(131);
  static const int ask_activity_info_offsets_[1] = {
  };
  ask_activity_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ask_activity_info_descriptor_,
      ask_activity_info::default_instance_,
      ask_activity_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_activity_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ask_activity_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ask_activity_info));
  cdkey_gift_descriptor_ = file->message_type(132);
  static const int cdkey_gift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift, _cdkey_),
  };
  cdkey_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cdkey_gift_descriptor_,
      cdkey_gift::default_instance_,
      cdkey_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cdkey_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cdkey_gift));
  excavate_descriptor_ = file->message_type(133);
  static const int excavate_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _search_excavate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _query_excavate_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _query_excavate_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _query_excavate_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _set_excavate_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _excavate_start_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _excavate_end_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _query_excavate_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _clear_excavate_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _withdraw_excavate_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _draw_excavate_def_rwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _drop_excavate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _query_replay_),
  };
  excavate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_descriptor_,
      excavate::default_instance_,
      excavate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate));
  search_excavate_descriptor_ = file->message_type(134);
  static const int search_excavate_offsets_[1] = {
  };
  search_excavate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      search_excavate_descriptor_,
      search_excavate::default_instance_,
      search_excavate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search_excavate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(search_excavate));
  query_excavate_data_descriptor_ = file->message_type(135);
  static const int query_excavate_data_offsets_[1] = {
  };
  query_excavate_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_data_descriptor_,
      query_excavate_data::default_instance_,
      query_excavate_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_data));
  query_excavate_history_descriptor_ = file->message_type(136);
  static const int query_excavate_history_offsets_[1] = {
  };
  query_excavate_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_history_descriptor_,
      query_excavate_history::default_instance_,
      query_excavate_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_history));
  query_excavate_battle_descriptor_ = file->message_type(137);
  static const int query_excavate_battle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle, _id_),
  };
  query_excavate_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_battle_descriptor_,
      query_excavate_battle::default_instance_,
      query_excavate_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_battle));
  set_excavate_team_descriptor_ = file->message_type(138);
  static const int set_excavate_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team, _excavate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team, _tid_),
  };
  set_excavate_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_excavate_team_descriptor_,
      set_excavate_team::default_instance_,
      set_excavate_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_excavate_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_excavate_team));
  excavate_start_battle_descriptor_ = file->message_type(139);
  static const int excavate_start_battle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _heroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _excavate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _team_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _use_hire_),
  };
  excavate_start_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_start_battle_descriptor_,
      excavate_start_battle::default_instance_,
      excavate_start_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_start_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_start_battle));
  excavate_end_battle_descriptor_ = file->message_type(140);
  static const int excavate_end_battle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _self_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _oppo_heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _oprations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _type_id_),
  };
  excavate_end_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_end_battle_descriptor_,
      excavate_end_battle::default_instance_,
      excavate_end_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_end_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_end_battle));
  query_excavate_def_descriptor_ = file->message_type(141);
  static const int query_excavate_def_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def, _mine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def, _applier_uid_),
  };
  query_excavate_def_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_excavate_def_descriptor_,
      query_excavate_def::default_instance_,
      query_excavate_def_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_excavate_def, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_excavate_def));
  clear_excavate_battle_descriptor_ = file->message_type(142);
  static const int clear_excavate_battle_offsets_[1] = {
  };
  clear_excavate_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clear_excavate_battle_descriptor_,
      clear_excavate_battle::default_instance_,
      clear_excavate_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_excavate_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clear_excavate_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clear_excavate_battle));
  withdraw_excavate_hero_descriptor_ = file->message_type(143);
  static const int withdraw_excavate_hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero, _hero_id_),
  };
  withdraw_excavate_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      withdraw_excavate_hero_descriptor_,
      withdraw_excavate_hero::default_instance_,
      withdraw_excavate_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(withdraw_excavate_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(withdraw_excavate_hero));
  draw_excavate_def_rwd_descriptor_ = file->message_type(144);
  static const int draw_excavate_def_rwd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd, _id_),
  };
  draw_excavate_def_rwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_excavate_def_rwd_descriptor_,
      draw_excavate_def_rwd::default_instance_,
      draw_excavate_def_rwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_excavate_def_rwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_excavate_def_rwd));
  drop_excavate_descriptor_ = file->message_type(145);
  static const int drop_excavate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate, _mine_id_),
  };
  drop_excavate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      drop_excavate_descriptor_,
      drop_excavate::default_instance_,
      drop_excavate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_excavate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(drop_excavate));
  excavate_hero_descriptor_ = file->message_type(146);
  static const int excavate_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _hp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _mp_perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _custom_data_),
  };
  excavate_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      excavate_hero_descriptor_,
      excavate_hero::default_instance_,
      excavate_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(excavate_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(excavate_hero));
  query_split_data_descriptor_ = file->message_type(147);
  static const int query_split_data_offsets_[1] = {
  };
  query_split_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_split_data_descriptor_,
      query_split_data::default_instance_,
      query_split_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_split_data));
  query_split_return_descriptor_ = file->message_type(148);
  static const int query_split_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return, _tid_),
  };
  query_split_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_split_return_descriptor_,
      query_split_return::default_instance_,
      query_split_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_split_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_split_return));
  split_hero_descriptor_ = file->message_type(149);
  static const int split_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero, _tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero, _stone_id_),
  };
  split_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      split_hero_descriptor_,
      split_hero::default_instance_,
      split_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(split_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(split_hero));
  worldcup_descriptor_ = file->message_type(150);
  static const int worldcup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup, _worldcup_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup, _worldcup_submit_),
  };
  worldcup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_descriptor_,
      worldcup::default_instance_,
      worldcup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup));
  worldcup_query_descriptor_ = file->message_type(151);
  static const int worldcup_query_offsets_[1] = {
  };
  worldcup_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_query_descriptor_,
      worldcup_query::default_instance_,
      worldcup_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_query));
  worldcup_submit_descriptor_ = file->message_type(152);
  static const int worldcup_submit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit, _guess1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit, _guess2_),
  };
  worldcup_submit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldcup_submit_descriptor_,
      worldcup_submit::default_instance_,
      worldcup_submit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldcup_submit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldcup_submit));
  report_battle_descriptor_ = file->message_type(153);
  static const int report_battle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_battle, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_battle, _data_),
  };
  report_battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      report_battle_descriptor_,
      report_battle::default_instance_,
      report_battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(report_battle));
  query_ranklist_descriptor_ = file->message_type(154);
  static const int query_ranklist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist, _rank_type_),
  };
  query_ranklist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_ranklist_descriptor_,
      query_ranklist::default_instance_,
      query_ranklist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_ranklist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_ranklist));
  query_ranklist_rank_type_descriptor_ = query_ranklist_descriptor_->enum_type(0);
  dot_info_descriptor_ = file->message_type(155);
  static const int dot_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dot_info, _dot_id_),
  };
  dot_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dot_info_descriptor_,
      dot_info::default_instance_,
      dot_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dot_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dot_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dot_info));
  require_arousal_descriptor_ = file->message_type(156);
  static const int require_arousal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_arousal, _hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_arousal, _arousal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_arousal, _aid_),
  };
  require_arousal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      require_arousal_descriptor_,
      require_arousal::default_instance_,
      require_arousal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_arousal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(require_arousal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(require_arousal));
  require_arousal_arousal_type_descriptor_ = require_arousal_descriptor_->enum_type(0);
  change_server_descriptor_ = file->message_type(157);
  static const int change_server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server, _op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server, _server_id_),
  };
  change_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_server_descriptor_,
      change_server::default_instance_,
      change_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_server));
  request_guild_log_descriptor_ = file->message_type(158);
  static const int request_guild_log_offsets_[1] = {
  };
  request_guild_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_guild_log_descriptor_,
      request_guild_log::default_instance_,
      request_guild_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_guild_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_guild_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request_guild_log));
  query_act_stage_descriptor_ = file->message_type(159);
  static const int query_act_stage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage, _act_stage_groups_),
  };
  query_act_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      query_act_stage_descriptor_,
      query_act_stage::default_instance_,
      query_act_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_act_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(query_act_stage));
  fb_attention_descriptor_ = file->message_type(160);
  static const int fb_attention_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention, _fb_attention_),
  };
  fb_attention_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fb_attention_descriptor_,
      fb_attention::default_instance_,
      fb_attention_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fb_attention, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fb_attention));
  hero_status_descriptor_ = file->enum_type(0);
  guild_job_t_descriptor_ = file->enum_type(1);
  hire_from_descriptor_ = file->enum_type(2);
  chat_channel_descriptor_ = file->enum_type(3);
  server_opt_type_descriptor_ = file->enum_type(4);
  platform_type_descriptor_ = file->enum_type(5);
  battle_result_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_up_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    up_msg_descriptor_, &up_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_upgrade_arousal_level_descriptor_, &request_upgrade_arousal_level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    continue_pay_descriptor_, &continue_pay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recharge_rebate_descriptor_, &recharge_rebate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    every_day_happy_descriptor_, &every_day_happy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_descriptor_, &system_setting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_change_descriptor_, &system_setting_change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_setting_request_descriptor_, &system_setting_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    push_notify_descriptor_, &push_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_descriptor_, &login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sdk_login_descriptor_, &sdk_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_userinfo_descriptor_, &request_userinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_stage_descriptor_, &enter_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_stage_descriptor_, &exit_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_cmd_descriptor_, &gm_cmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_descriptor_, &activity_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_lotto_info_descriptor_, &activity_lotto_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_info_descriptor_, &activity_bigpackage_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_reward_info_descriptor_, &activity_bigpackage_reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_bigpackage_reset_descriptor_, &activity_bigpackage_reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_lotto_reward_descriptor_, &activity_lotto_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_all_guild_stage_descriptor_, &open_all_guild_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_money_descriptor_, &set_money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upgrade_descriptor_, &hero_upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_synthesis_descriptor_, &equip_synthesis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_equip_descriptor_, &wear_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_vitality_descriptor_, &sync_vitality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_vitality_descriptor_, &buy_vitality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    consume_item_descriptor_, &consume_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_refresh_descriptor_, &shop_refresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_consume_descriptor_, &shop_consume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_levelup_descriptor_, &skill_levelup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sell_item_descriptor_, &sell_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fragment_compose_descriptor_, &fragment_compose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_upgrade_descriptor_, &hero_equip_upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_descriptor_, &hero_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_descriptor_, &hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_arousal_descriptor_, &hero_arousal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tutorial_descriptor_, &tutorial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_task_descriptor_, &trigger_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    require_rewards_descriptor_, &require_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_task_status_descriptor_, &change_task_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_job_descriptor_, &trigger_job::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_rewards_descriptor_, &job_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    suspend_report_descriptor_, &suspend_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reset_elite_descriptor_, &reset_elite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sweep_stage_descriptor_, &sweep_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_skill_stren_point_descriptor_, &buy_skill_stren_point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_magicsoul_descriptor_, &ask_magicsoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tavern_draw_descriptor_, &tavern_draw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_evolve_descriptor_, &hero_evolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_act_stage_descriptor_, &enter_act_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ladder_descriptor_, &ladder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_panel_descriptor_, &open_panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    apply_opponent_descriptor_, &apply_opponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_battle_descriptor_, &start_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    end_battle_descriptor_, &end_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_lineup_descriptor_, &set_lineup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_records_descriptor_, &query_records::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_replay_descriptor_, &query_replay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_skill_stren_descriptor_, &sync_skill_stren::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_rankboard_descriptor_, &query_rankboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_oppo_info_descriptor_, &query_oppo_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clear_battle_cd_descriptor_, &clear_battle_cd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_rank_reward_descriptor_, &draw_rank_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_battle_chance_descriptor_, &buy_battle_chance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_name_descriptor_, &set_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_avatar_descriptor_, &set_avatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_data_descriptor_, &query_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    midas_descriptor_, &midas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_shop_descriptor_, &open_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    charge_descriptor_, &charge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_daily_login_descriptor_, &ask_daily_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_descriptor_, &tbc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_open_panel_descriptor_, &tbc_open_panel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_query_oppo_descriptor_, &tbc_query_oppo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_start_battle_descriptor_, &tbc_start_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_hero_descriptor_, &tbc_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_end_battle_descriptor_, &tbc_end_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_reset_descriptor_, &tbc_reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbc_draw_reward_descriptor_, &tbc_draw_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_maillist_descriptor_, &get_maillist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    read_mail_descriptor_, &read_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_svr_time_descriptor_, &get_svr_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_vip_gift_descriptor_, &get_vip_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_descriptor_, &chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broad_say_descriptor_, &chat_broad_say::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_fetch_bl_descriptor_, &chat_fetch_bl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_say_descriptor_, &chat_say::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_acc_descriptor_, &chat_acc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_fresh_descriptor_, &chat_fresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_fetch_descriptor_, &chat_fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_add_bl_descriptor_, &chat_add_bl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_del_bl_descriptor_, &chat_del_bl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_descriptor_, &guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_jump_descriptor_, &guild_set_jump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_stage_rank_descriptor_, &guild_stage_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_query_member_descriptor_, &guild_query_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_prepare_instance_descriptor_, &guild_prepare_instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_app_queue_descriptor_, &guild_app_queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_jump_descriptor_, &guild_jump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_items_history_descriptor_, &guild_items_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_give_descriptor_, &guild_drop_give::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_damage_descriptor_, &guild_instance_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_drop_info_descriptor_, &guild_drop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_apply_descriptor_, &guild_instance_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_start_descriptor_, &guild_instance_start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_end_descriptor_, &guild_instance_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_drop_descriptor_, &guild_instance_drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_open_descriptor_, &guild_instance_open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_query_descriptor_, &guild_instance_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_instance_detail_descriptor_, &guild_instance_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_create_descriptor_, &guild_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_dismiss_descriptor_, &guild_dismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_list_descriptor_, &guild_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_search_descriptor_, &guild_search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_join_descriptor_, &guild_join::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_join_confirm_descriptor_, &guild_join_confirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_leave_descriptor_, &guild_leave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_kick_descriptor_, &guild_kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_descriptor_, &guild_set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_query_descriptor_, &guild_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_open_pannel_descriptor_, &guild_open_pannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_set_job_descriptor_, &guild_set_job::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_add_hire_descriptor_, &guild_add_hire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_del_hire_descriptor_, &guild_del_hire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_query_hires_descriptor_, &guild_query_hires::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_hire_hero_descriptor_, &guild_hire_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_worship_req_descriptor_, &guild_worship_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_worship_withdraw_descriptor_, &guild_worship_withdraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_qurey_hh_detail_descriptor_, &guild_qurey_hh_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ask_activity_info_descriptor_, &ask_activity_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cdkey_gift_descriptor_, &cdkey_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_descriptor_, &excavate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    search_excavate_descriptor_, &search_excavate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_data_descriptor_, &query_excavate_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_history_descriptor_, &query_excavate_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_battle_descriptor_, &query_excavate_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_excavate_team_descriptor_, &set_excavate_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_start_battle_descriptor_, &excavate_start_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_end_battle_descriptor_, &excavate_end_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_excavate_def_descriptor_, &query_excavate_def::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clear_excavate_battle_descriptor_, &clear_excavate_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    withdraw_excavate_hero_descriptor_, &withdraw_excavate_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_excavate_def_rwd_descriptor_, &draw_excavate_def_rwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    drop_excavate_descriptor_, &drop_excavate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    excavate_hero_descriptor_, &excavate_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_split_data_descriptor_, &query_split_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_split_return_descriptor_, &query_split_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    split_hero_descriptor_, &split_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_descriptor_, &worldcup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_query_descriptor_, &worldcup_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldcup_submit_descriptor_, &worldcup_submit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    report_battle_descriptor_, &report_battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_ranklist_descriptor_, &query_ranklist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dot_info_descriptor_, &dot_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    require_arousal_descriptor_, &require_arousal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_server_descriptor_, &change_server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_guild_log_descriptor_, &request_guild_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    query_act_stage_descriptor_, &query_act_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fb_attention_descriptor_, &fb_attention::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_up_2eproto() {
  delete up_msg::default_instance_;
  delete up_msg_reflection_;
  delete request_upgrade_arousal_level::default_instance_;
  delete request_upgrade_arousal_level_reflection_;
  delete continue_pay::default_instance_;
  delete continue_pay_reflection_;
  delete recharge_rebate::default_instance_;
  delete recharge_rebate_reflection_;
  delete every_day_happy::default_instance_;
  delete every_day_happy_reflection_;
  delete system_setting::default_instance_;
  delete system_setting_reflection_;
  delete system_setting_change::default_instance_;
  delete system_setting_change_reflection_;
  delete system_setting_request::default_instance_;
  delete system_setting_request_reflection_;
  delete push_notify::default_instance_;
  delete push_notify_reflection_;
  delete login::default_instance_;
  delete login_reflection_;
  delete sdk_login::default_instance_;
  delete sdk_login_reflection_;
  delete request_userinfo::default_instance_;
  delete request_userinfo_reflection_;
  delete enter_stage::default_instance_;
  delete enter_stage_reflection_;
  delete exit_stage::default_instance_;
  delete exit_stage_reflection_;
  delete gm_cmd::default_instance_;
  delete gm_cmd_reflection_;
  delete activity_info::default_instance_;
  delete activity_info_reflection_;
  delete activity_lotto_info::default_instance_;
  delete activity_lotto_info_reflection_;
  delete activity_bigpackage_info::default_instance_;
  delete activity_bigpackage_info_reflection_;
  delete activity_bigpackage_reward_info::default_instance_;
  delete activity_bigpackage_reward_info_reflection_;
  delete activity_bigpackage_reset::default_instance_;
  delete activity_bigpackage_reset_reflection_;
  delete activity_lotto_reward::default_instance_;
  delete activity_lotto_reward_reflection_;
  delete open_all_guild_stage::default_instance_;
  delete open_all_guild_stage_reflection_;
  delete set_money::default_instance_;
  delete set_money_reflection_;
  delete hero_upgrade::default_instance_;
  delete hero_upgrade_reflection_;
  delete equip_synthesis::default_instance_;
  delete equip_synthesis_reflection_;
  delete wear_equip::default_instance_;
  delete wear_equip_reflection_;
  delete sync_vitality::default_instance_;
  delete sync_vitality_reflection_;
  delete buy_vitality::default_instance_;
  delete buy_vitality_reflection_;
  delete consume_item::default_instance_;
  delete consume_item_reflection_;
  delete shop_refresh::default_instance_;
  delete shop_refresh_reflection_;
  delete shop_consume::default_instance_;
  delete shop_consume_reflection_;
  delete skill_levelup::default_instance_;
  delete skill_levelup_reflection_;
  delete sell_item::default_instance_;
  delete sell_item_reflection_;
  delete fragment_compose::default_instance_;
  delete fragment_compose_reflection_;
  delete hero_equip_upgrade::default_instance_;
  delete hero_equip_upgrade_reflection_;
  delete hero_equip::default_instance_;
  delete hero_equip_reflection_;
  delete hero::default_instance_;
  delete hero_reflection_;
  delete hero_arousal::default_instance_;
  delete hero_arousal_reflection_;
  delete tutorial::default_instance_;
  delete tutorial_reflection_;
  delete trigger_task::default_instance_;
  delete trigger_task_reflection_;
  delete require_rewards::default_instance_;
  delete require_rewards_reflection_;
  delete change_task_status::default_instance_;
  delete change_task_status_reflection_;
  delete trigger_job::default_instance_;
  delete trigger_job_reflection_;
  delete job_rewards::default_instance_;
  delete job_rewards_reflection_;
  delete suspend_report::default_instance_;
  delete suspend_report_reflection_;
  delete reset_elite::default_instance_;
  delete reset_elite_reflection_;
  delete sweep_stage::default_instance_;
  delete sweep_stage_reflection_;
  delete buy_skill_stren_point::default_instance_;
  delete buy_skill_stren_point_reflection_;
  delete ask_magicsoul::default_instance_;
  delete ask_magicsoul_reflection_;
  delete tavern_draw::default_instance_;
  delete tavern_draw_reflection_;
  delete hero_evolve::default_instance_;
  delete hero_evolve_reflection_;
  delete enter_act_stage::default_instance_;
  delete enter_act_stage_reflection_;
  delete ladder::default_instance_;
  delete ladder_reflection_;
  delete open_panel::default_instance_;
  delete open_panel_reflection_;
  delete apply_opponent::default_instance_;
  delete apply_opponent_reflection_;
  delete start_battle::default_instance_;
  delete start_battle_reflection_;
  delete end_battle::default_instance_;
  delete end_battle_reflection_;
  delete set_lineup::default_instance_;
  delete set_lineup_reflection_;
  delete query_records::default_instance_;
  delete query_records_reflection_;
  delete query_replay::default_instance_;
  delete query_replay_reflection_;
  delete sync_skill_stren::default_instance_;
  delete sync_skill_stren_reflection_;
  delete query_rankboard::default_instance_;
  delete query_rankboard_reflection_;
  delete query_oppo_info::default_instance_;
  delete query_oppo_info_reflection_;
  delete clear_battle_cd::default_instance_;
  delete clear_battle_cd_reflection_;
  delete draw_rank_reward::default_instance_;
  delete draw_rank_reward_reflection_;
  delete buy_battle_chance::default_instance_;
  delete buy_battle_chance_reflection_;
  delete set_name::default_instance_;
  delete set_name_reflection_;
  delete set_avatar::default_instance_;
  delete set_avatar_reflection_;
  delete query_data::default_instance_;
  delete query_data_reflection_;
  delete midas::default_instance_;
  delete midas_reflection_;
  delete open_shop::default_instance_;
  delete open_shop_reflection_;
  delete charge::default_instance_;
  delete charge_reflection_;
  delete ask_daily_login::default_instance_;
  delete ask_daily_login_reflection_;
  delete tbc::default_instance_;
  delete tbc_reflection_;
  delete tbc_open_panel::default_instance_;
  delete tbc_open_panel_reflection_;
  delete tbc_query_oppo::default_instance_;
  delete tbc_query_oppo_reflection_;
  delete tbc_start_battle::default_instance_;
  delete tbc_start_battle_reflection_;
  delete tbc_hero::default_instance_;
  delete tbc_hero_reflection_;
  delete tbc_end_battle::default_instance_;
  delete tbc_end_battle_reflection_;
  delete tbc_reset::default_instance_;
  delete tbc_reset_reflection_;
  delete tbc_draw_reward::default_instance_;
  delete tbc_draw_reward_reflection_;
  delete get_maillist::default_instance_;
  delete get_maillist_reflection_;
  delete read_mail::default_instance_;
  delete read_mail_reflection_;
  delete get_svr_time::default_instance_;
  delete get_svr_time_reflection_;
  delete get_vip_gift::default_instance_;
  delete get_vip_gift_reflection_;
  delete chat::default_instance_;
  delete chat_reflection_;
  delete chat_broad_say::default_instance_;
  delete chat_broad_say_reflection_;
  delete chat_fetch_bl::default_instance_;
  delete chat_fetch_bl_reflection_;
  delete chat_say::default_instance_;
  delete chat_say_reflection_;
  delete chat_acc::default_instance_;
  delete chat_acc_reflection_;
  delete chat_fresh::default_instance_;
  delete chat_fresh_reflection_;
  delete chat_fetch::default_instance_;
  delete chat_fetch_reflection_;
  delete chat_add_bl::default_instance_;
  delete chat_add_bl_reflection_;
  delete chat_del_bl::default_instance_;
  delete chat_del_bl_reflection_;
  delete guild::default_instance_;
  delete guild_reflection_;
  delete guild_set_jump::default_instance_;
  delete guild_set_jump_reflection_;
  delete guild_stage_rank::default_instance_;
  delete guild_stage_rank_reflection_;
  delete guild_query_member::default_instance_;
  delete guild_query_member_reflection_;
  delete guild_prepare_instance::default_instance_;
  delete guild_prepare_instance_reflection_;
  delete guild_app_queue::default_instance_;
  delete guild_app_queue_reflection_;
  delete guild_jump::default_instance_;
  delete guild_jump_reflection_;
  delete guild_items_history::default_instance_;
  delete guild_items_history_reflection_;
  delete guild_drop_give::default_instance_;
  delete guild_drop_give_reflection_;
  delete guild_instance_damage::default_instance_;
  delete guild_instance_damage_reflection_;
  delete guild_drop_info::default_instance_;
  delete guild_drop_info_reflection_;
  delete guild_instance_apply::default_instance_;
  delete guild_instance_apply_reflection_;
  delete guild_instance_start::default_instance_;
  delete guild_instance_start_reflection_;
  delete guild_instance_end::default_instance_;
  delete guild_instance_end_reflection_;
  delete guild_instance_drop::default_instance_;
  delete guild_instance_drop_reflection_;
  delete guild_instance_open::default_instance_;
  delete guild_instance_open_reflection_;
  delete guild_instance_query::default_instance_;
  delete guild_instance_query_reflection_;
  delete guild_instance_detail::default_instance_;
  delete guild_instance_detail_reflection_;
  delete guild_create::default_instance_;
  delete guild_create_reflection_;
  delete guild_dismiss::default_instance_;
  delete guild_dismiss_reflection_;
  delete guild_list::default_instance_;
  delete guild_list_reflection_;
  delete guild_search::default_instance_;
  delete guild_search_reflection_;
  delete guild_join::default_instance_;
  delete guild_join_reflection_;
  delete guild_join_confirm::default_instance_;
  delete guild_join_confirm_reflection_;
  delete guild_leave::default_instance_;
  delete guild_leave_reflection_;
  delete guild_kick::default_instance_;
  delete guild_kick_reflection_;
  delete guild_set::default_instance_;
  delete guild_set_reflection_;
  delete guild_query::default_instance_;
  delete guild_query_reflection_;
  delete guild_open_pannel::default_instance_;
  delete guild_open_pannel_reflection_;
  delete guild_set_job::default_instance_;
  delete guild_set_job_reflection_;
  delete guild_add_hire::default_instance_;
  delete guild_add_hire_reflection_;
  delete guild_del_hire::default_instance_;
  delete guild_del_hire_reflection_;
  delete guild_query_hires::default_instance_;
  delete guild_query_hires_reflection_;
  delete guild_hire_hero::default_instance_;
  delete guild_hire_hero_reflection_;
  delete guild_worship_req::default_instance_;
  delete guild_worship_req_reflection_;
  delete guild_worship_withdraw::default_instance_;
  delete guild_worship_withdraw_reflection_;
  delete guild_qurey_hh_detail::default_instance_;
  delete guild_qurey_hh_detail_reflection_;
  delete ask_activity_info::default_instance_;
  delete ask_activity_info_reflection_;
  delete cdkey_gift::default_instance_;
  delete cdkey_gift_reflection_;
  delete excavate::default_instance_;
  delete excavate_reflection_;
  delete search_excavate::default_instance_;
  delete search_excavate_reflection_;
  delete query_excavate_data::default_instance_;
  delete query_excavate_data_reflection_;
  delete query_excavate_history::default_instance_;
  delete query_excavate_history_reflection_;
  delete query_excavate_battle::default_instance_;
  delete query_excavate_battle_reflection_;
  delete set_excavate_team::default_instance_;
  delete set_excavate_team_reflection_;
  delete excavate_start_battle::default_instance_;
  delete excavate_start_battle_reflection_;
  delete excavate_end_battle::default_instance_;
  delete excavate_end_battle_reflection_;
  delete query_excavate_def::default_instance_;
  delete query_excavate_def_reflection_;
  delete clear_excavate_battle::default_instance_;
  delete clear_excavate_battle_reflection_;
  delete withdraw_excavate_hero::default_instance_;
  delete withdraw_excavate_hero_reflection_;
  delete draw_excavate_def_rwd::default_instance_;
  delete draw_excavate_def_rwd_reflection_;
  delete drop_excavate::default_instance_;
  delete drop_excavate_reflection_;
  delete excavate_hero::default_instance_;
  delete excavate_hero_reflection_;
  delete query_split_data::default_instance_;
  delete query_split_data_reflection_;
  delete query_split_return::default_instance_;
  delete query_split_return_reflection_;
  delete split_hero::default_instance_;
  delete split_hero_reflection_;
  delete worldcup::default_instance_;
  delete worldcup_reflection_;
  delete worldcup_query::default_instance_;
  delete worldcup_query_reflection_;
  delete worldcup_submit::default_instance_;
  delete worldcup_submit_reflection_;
  delete report_battle::default_instance_;
  delete report_battle_reflection_;
  delete query_ranklist::default_instance_;
  delete query_ranklist_reflection_;
  delete dot_info::default_instance_;
  delete dot_info_reflection_;
  delete require_arousal::default_instance_;
  delete require_arousal_reflection_;
  delete change_server::default_instance_;
  delete change_server_reflection_;
  delete request_guild_log::default_instance_;
  delete request_guild_log_reflection_;
  delete query_act_stage::default_instance_;
  delete query_act_stage_reflection_;
  delete fb_attention::default_instance_;
  delete fb_attention_reflection_;
}

void protobuf_AddDesc_up_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010up.proto\022\002up\"\355\031\n\006up_msg\022\017\n\007_repeat\030\001 \002"
    "(\r\022\020\n\010_user_id\030\002 \001(\r\022\031\n\006_login\030\003 \001(\0132\t.u"
    "p.login\022/\n\021_request_userinfo\030\004 \001(\0132\024.up."
    "request_userinfo\022%\n\014_enter_stage\030\005 \001(\0132\017"
    ".up.enter_stage\022#\n\013_exit_stage\030\006 \001(\0132\016.u"
    "p.exit_stage\022\033\n\007_gm_cmd\030\007 \001(\0132\n.up.gm_cm"
    "d\022\'\n\r_hero_upgrade\030\010 \001(\0132\020.up.hero_upgra"
    "de\022-\n\020_equip_synthesis\030\t \001(\0132\023.up.equip_"
    "synthesis\022#\n\013_wear_equip\030\n \001(\0132\016.up.wear"
    "_equip\022\'\n\r_consume_item\030\013 \001(\0132\020.up.consu"
    "me_item\022\'\n\r_shop_refresh\030\014 \001(\0132\020.up.shop"
    "_refresh\022\'\n\r_shop_consume\030\r \001(\0132\020.up.sho"
    "p_consume\022)\n\016_skill_levelup\030\016 \001(\0132\021.up.s"
    "kill_levelup\022!\n\n_sell_item\030\017 \001(\0132\r.up.se"
    "ll_item\022/\n\021_fragment_compose\030\020 \001(\0132\024.up."
    "fragment_compose\0223\n\023_hero_equip_upgrade\030"
    "\021 \001(\0132\026.up.hero_equip_upgrade\022\'\n\r_trigge"
    "r_task\030\022 \001(\0132\020.up.trigger_task\022-\n\020_requi"
    "re_rewards\030\023 \001(\0132\023.up.require_rewards\022%\n"
    "\014_trigger_job\030\024 \001(\0132\017.up.trigger_job\022%\n\014"
    "_job_rewards\030\025 \001(\0132\017.up.job_rewards\022%\n\014_"
    "reset_elite\030\026 \001(\0132\017.up.reset_elite\022%\n\014_s"
    "weep_stage\030\027 \001(\0132\017.up.sweep_stage\022\'\n\r_bu"
    "y_vitality\030\030 \001(\0132\020.up.buy_vitality\0229\n\026_b"
    "uy_skill_stren_point\030\031 \001(\0132\031.up.buy_skil"
    "l_stren_point\022%\n\014_tavern_draw\030\032 \001(\0132\017.up"
    ".tavern_draw\022#\n\013_query_data\030\033 \001(\0132\016.up.q"
    "uery_data\022%\n\014_hero_evolve\030\034 \001(\0132\017.up.her"
    "o_evolve\022-\n\020_enter_act_stage\030\035 \001(\0132\023.up."
    "enter_act_stage\022)\n\016_sync_vitality\030\036 \001(\0132"
    "\021.up.sync_vitality\022+\n\017_suspend_report\030\037 "
    "\001(\0132\022.up.suspend_report\022\037\n\t_tutorial\030  \001"
    "(\0132\014.up.tutorial\022\033\n\007_ladder\030! \001(\0132\n.up.l"
    "adder\022\037\n\t_set_name\030\" \001(\0132\014.up.set_name\022\031"
    "\n\006_midas\030# \001(\0132\t.up.midas\022!\n\n_open_shop\030"
    "$ \001(\0132\r.up.open_shop\022\033\n\007_charge\030% \001(\0132\n."
    "up.charge\022!\n\n_sdk_login\030& \001(\0132\r.up.sdk_l"
    "ogin\022#\n\013_set_avatar\030\' \001(\0132\016.up.set_avata"
    "r\022-\n\020_ask_daily_login\030( \001(\0132\023.up.ask_dai"
    "ly_login\022\025\n\004_tbc\030) \001(\0132\007.up.tbc\022\'\n\r_get_"
    "maillist\030* \001(\0132\020.up.get_maillist\022!\n\n_rea"
    "d_mail\030+ \001(\0132\r.up.read_mail\022\'\n\r_get_svr_"
    "time\030, \001(\0132\020.up.get_svr_time\022\'\n\r_get_vip"
    "_gift\030- \001(\0132\020.up.get_vip_gift\022\033\n\023_import"
    "ant_data_md5\030. \001(\t\022\027\n\005_chat\030/ \001(\0132\010.up.c"
    "hat\022#\n\013_cdkey_gift\0300 \001(\0132\016.up.cdkey_gift"
    "\022\031\n\006_guild\0301 \001(\0132\t.up.guild\022)\n\016_ask_magi"
    "csoul\0302 \001(\0132\021.up.ask_magicsoul\0221\n\022_ask_a"
    "ctivity_info\0303 \001(\0132\025.up.ask_activity_inf"
    "o\022\037\n\t_excavate\0304 \001(\0132\014.up.excavate\022%\n\014_p"
    "ush_notify\0305 \001(\0132\017.up.push_notify\022+\n\017_sy"
    "stem_setting\0306 \001(\0132\022.up.system_setting\022/"
    "\n\021_query_split_data\0307 \001(\0132\024.up.query_spl"
    "it_data\0223\n\023_query_split_return\0308 \001(\0132\026.u"
    "p.query_split_return\022#\n\013_split_hero\0309 \001("
    "\0132\016.up.split_hero\022\037\n\t_worldcup\030: \001(\0132\014.u"
    "p.worldcup\022)\n\016_report_battle\030; \001(\0132\021.up."
    "report_battle\022\'\n\r_query_replay\030< \001(\0132\020.u"
    "p.query_replay\022/\n\021_sync_skill_stren\030= \001("
    "\0132\024.up.sync_skill_stren\022+\n\017_query_rankli"
    "st\030> \001(\0132\022.up.query_ranklist\022)\n\016_change_"
    "server\030\? \001(\0132\021.up.change_server\022-\n\020_requ"
    "ire_arousal\030@ \001(\0132\023.up.require_arousal\0223"
    "\n\023_change_task_status\030A \001(\0132\026.up.change_"
    "task_status\0221\n\022_request_guild_log\030B \001(\0132"
    "\025.up.request_guild_log\022-\n\020_query_act_sta"
    "ge\030C \001(\0132\023.up.query_act_stage\022I\n\036_reques"
    "t_upgrade_arousal_level\030D \001(\0132!.up.reque"
    "st_upgrade_arousal_level\022(\n\r_fb_attentio"
    "n\030\254\002 \001(\0132\020.up.fb_attention\022 \n\t_dot_info\030"
    "\255\002 \001(\0132\014.up.dot_info\022)\n\016_activity_info\030E"
    " \001(\0132\021.up.activity_info\0225\n\024_activity_lot"
    "to_info\030F \001(\0132\027.up.activity_lotto_info\0229"
    "\n\026_activity_lotto_reward\030G \001(\0132\031.up.acti"
    "vity_lotto_reward\022\?\n\031_activity_bigpackag"
    "e_info\030H \001(\0132\034.up.activity_bigpackage_in"
    "fo\022M\n _activity_bigpackage_reward_info\030I"
    " \001(\0132#.up.activity_bigpackage_reward_inf"
    "o\022A\n\032_activity_bigpackage_reset\030J \001(\0132\035."
    "up.activity_bigpackage_reset\022(\n\r_continu"
    "e_pay\030\256\002 \001(\0132\020.up.continue_pay\022.\n\020_recha"
    "rge_rebate\030\257\002 \001(\0132\023.up.recharge_rebate\022."
    "\n\020_every_day_happy\030\260\002 \001(\0132\023.up.every_day"
    "_happy\"\037\n\035request_upgrade_arousal_level\""
    "%\n\014continue_pay\022\025\n\r_continue_pay\030\001 \002(\r\"+"
    "\n\017recharge_rebate\022\030\n\020_recharge_rebate\030\001 "
    "\002(\r\"+\n\017every_day_happy\022\030\n\020_every_day_hap"
    "py\030\001 \002(\r\"j\n\016system_setting\022,\n\010_request\030\001"
    " \001(\0132\032.up.system_setting_request\022*\n\007_cha"
    "nge\030\002 \001(\0132\031.up.system_setting_change\"V\n\025"
    "system_setting_change\022\013\n\003key\030\001 \002(\t\022\r\n\005va"
    "lue\030\002 \002(\t\"!\n\016setting_status\022\006\n\002on\020\001\022\007\n\003o"
    "ff\020\002\"\030\n\026system_setting_request\"!\n\013push_n"
    "otify\022\022\n\n_client_id\030\001 \002(\t\"[\n\005login\022\024\n\014_a"
    "ctive_code\030\001 \001(\004\022\025\n\r_old_deviceid\030\002 \001(\t\022"
    "\020\n\010_version\030\003 \001(\t\022\023\n\013_languageid\030\004 \001(\r\"F"
    "\n\tsdk_login\022\024\n\014_session_key\030\001 \002(\t\022#\n\010_pl"
    "at_id\030\002 \002(\0162\021.up.platform_type\"\022\n\020reques"
    "t_userinfo\" \n\013enter_stage\022\021\n\t_stage_id\030\001"
    " \002(\r\"\220\001\n\nexit_stage\022+\n\007_result\030\001 \002(\0162\021.u"
    "p.battle_result:\007victory\022\016\n\006_stars\030\002 \001(\r"
    "\022\017\n\007_heroes\030\003 \003(\r\022\022\n\n_oprations\030\004 \003(\r\022\014\n"
    "\004_md5\030\005 \001(\t\022\022\n\n_self_data\030\006 \003(\r\"\302\003\n\006gm_c"
    "md\022\032\n\022_unlock_all_stages\030\001 \001(\005\022\027\n\017_get_a"
    "ll_heroes\030\002 \001(\005\022 \n\016_set_hero_info\030\003 \003(\0132"
    "\010.up.hero\022\025\n\r_set_vitality\030\004 \001(\005\022!\n\n_set"
    "_money\030\005 \001(\0132\r.up.set_money\022\031\n\021_set_rech"
    "arge_sum\030\006 \001(\005\022\031\n\021_set_player_level\030\007 \001("
    "\005\022\027\n\017_set_player_exp\030\010 \001(\005\022\022\n\n_set_items"
    "\030\t \003(\r\022\025\n\r_reset_device\030\n \001(\r\022\032\n\022_open_m"
    "ystery_shop\030\013 \001(\r\022\023\n\013_archive_id\030\014 \001(\r\022\023"
    "\n\013_restore_id\030\r \001(\r\022\024\n\014_reset_sweep\030\016 \001("
    "\005\022\034\n\024_set_dailylogin_days\030\017 \001(\r\0223\n\021_open"
    "_guild_stage\030\020 \001(\0132\030.up.open_all_guild_s"
    "tage\"7\n\ractivity_info\022\024\n\014_player_name\030\001 "
    "\002(\t\022\020\n\010_version\030\002 \002(\r\">\n\023activity_lotto_"
    "info\022\021\n\t_group_id\030\001 \002(\t\022\024\n\014_activity_id\030"
    "\002 \002(\r\"C\n\030activity_bigpackage_info\022\021\n\t_gr"
    "oup_id\030\001 \002(\t\022\024\n\014_activity_id\030\002 \002(\r\"[\n\037ac"
    "tivity_bigpackage_reward_info\022\021\n\t_group_"
    "id\030\001 \002(\t\022\024\n\014_activity_id\030\002 \002(\r\022\017\n\007_box_i"
    "d\030\003 \002(\r\"D\n\031activity_bigpackage_reset\022\021\n\t"
    "_group_id\030\001 \002(\t\022\024\n\014_activity_id\030\002 \002(\r\"@\n"
    "\025activity_lotto_reward\022\021\n\t_group_id\030\001 \002("
    "\t\022\024\n\014_activity_id\030\002 \002(\r\"\026\n\024open_all_guil"
    "d_stage\"\234\001\n\tset_money\022\'\n\005_type\030\001 \002(\0162\030.u"
    "p.set_money.price_type\022\017\n\007_amount\030\002 \002(\r\""
    "U\n\nprice_type\022\010\n\004gold\020\000\022\013\n\007diamond\020\001\022\020\n\014"
    "crusadepoint\020\002\022\016\n\narenapoint\020\003\022\016\n\nguildp"
    "oint\020\004\" \n\014hero_upgrade\022\020\n\010_hero_id\030\001 \002(\r"
    "\"$\n\017equip_synthesis\022\021\n\t_equip_id\030\001 \002(\r\"1"
    "\n\nwear_equip\022\020\n\010_hero_id\030\001 \002(\r\022\021\n\t_item_"
    "pos\030\002 \002(\r\"\017\n\rsync_vitality\"\016\n\014buy_vitali"
    "ty\"2\n\014consume_item\022\020\n\010_hero_id\030\001 \002(\r\022\020\n\010"
    "_item_id\030\002 \002(\r\"\206\001\n\014shop_refresh\022+\n\005_type"
    "\030\001 \002(\0162\026.up.shop_refresh.rtype:\004sync\022\020\n\010"
    "_shop_id\030\002 \002(\r\"7\n\005rtype\022\010\n\004sync\020\000\022\020\n\014aut"
    "o_refresh\020\001\022\022\n\016manual_refresh\020\002\">\n\014shop_"
    "consume\022\014\n\004_sid\030\001 \002(\r\022\017\n\007_slotid\030\002 \002(\r\022\017"
    "\n\007_amount\030\003 \002(\r\"0\n\rskill_levelup\022\017\n\007_her"
    "oid\030\001 \002(\r\022\016\n\006_order\030\002 \003(\r\"\032\n\tsell_item\022\r"
    "\n\005_item\030\001 \003(\r\";\n\020fragment_compose\022\021\n\t_fr"
    "agment\030\001 \002(\r\022\024\n\014_frag_amount\030\002 \002(\r\"\243\001\n\022h"
    "ero_equip_upgrade\0228\n\010_op_type\030\001 \002(\0162\036.up"
    ".hero_equip_upgrade.OP_TYPE:\006normal\022\017\n\007_"
    "heroid\030\002 \002(\r\022\r\n\005_slot\030\003 \002(\r\022\022\n\n_material"
    "s\030\004 \003(\r\"\037\n\007OP_TYPE\022\n\n\006normal\020\001\022\010\n\004boss\020\002"
    "\"<\n\nhero_equip\022\016\n\006_index\030\001 \002(\r\022\020\n\010_item_"
    "id\030\002 \002(\r\022\014\n\004_exp\030\003 \002(\r\"\332\001\n\004hero\022\014\n\004_tid\030"
    "\001 \002(\r\022\r\n\005_rank\030\002 \001(\r\022\016\n\006_level\030\003 \002(\r\022\016\n\006"
    "_stars\030\004 \002(\r\022\014\n\004_exp\030\005 \002(\r\022\013\n\003_gs\030\006 \002(\r\022"
    "\037\n\006_state\030\007 \002(\0162\017.up.hero_status\022\025\n\r_ski"
    "ll_levels\030\010 \003(\r\022\036\n\006_items\030\t \003(\0132\016.up.her"
    "o_equip\022\"\n\010_arousal\030\n \001(\0132\020.up.hero_arou"
    "sal\"\274\001\n\014hero_arousal\022\017\n\007_status\030\001 \002(\r\022\014\n"
    "\004_str\030\002 \002(\r\022\014\n\004_agi\030\003 \002(\r\022\014\n\004_int\030\004 \002(\r\022"
    "\020\n\010_str_var\030\005 \002(\005\022\020\n\010_agi_var\030\006 \002(\005\022\020\n\010_"
    "int_var\030\007 \002(\005\022\022\n\n_cost_gold\030\010 \002(\r\022\025\n\r_co"
    "st_diamond\030\t \002(\r\022\020\n\010_aro_exp\030\n \002(\r\"\033\n\010tu"
    "torial\022\017\n\007_record\030\001 \003(\r\"\035\n\014trigger_task\022"
    "\r\n\005_task\030\001 \003(\r\"-\n\017require_rewards\022\r\n\005_li"
    "ne\030\001 \002(\r\022\013\n\003_id\030\002 \002(\r\"D\n\022change_task_sta"
    "tus\022\r\n\005_line\030\001 \002(\r\022\013\n\003_id\030\002 \002(\r\022\022\n\n_oper"
    "ation\030\003 \002(\r\"\034\n\013trigger_job\022\r\n\005_jobs\030\001 \003("
    "\r\"\033\n\013job_rewards\022\014\n\004_job\030\001 \002(\r\"#\n\016suspen"
    "d_report\022\021\n\t_gametime\030\001 \002(\r\"y\n\013reset_eli"
    "te\0220\n\005_type\030\001 \002(\0162\025.up.reset_elite.rtype"
    ":\ndaily_free\022\020\n\010_stageid\030\002 \001(\r\"&\n\005rtype\022"
    "\016\n\ndaily_free\020\000\022\r\n\tvip_reset\020\001\"\211\001\n\013sweep"
    "_stage\022$\n\005_type\030\001 \002(\0162\025.up.sweep_stage.r"
    "type\022\020\n\010_stageid\030\002 \002(\r\022\016\n\006_times\030\003 \001(\r\"2"
    "\n\005rtype\022\025\n\021sweep_with_ticket\020\000\022\022\n\016sweep_"
    "with_rmb\020\001\"\027\n\025buy_skill_stren_point\"\017\n\ra"
    "sk_magicsoul\"\240\002\n\013tavern_draw\0225\n\n_draw_ty"
    "pe\030\001 \002(\0162\031.up.tavern_draw.draw_type:\006sin"
    "gle\0222\n\t_box_type\030\002 \002(\0162\030.up.tavern_draw."
    "box_type:\005green\"7\n\tdraw_type\022\n\n\006single\020\000"
    "\022\t\n\005combo\020\001\022\t\n\005stone\020\003\022\010\n\004free\020\004\"m\n\010box_"
    "type\022\t\n\005green\020\001\022\010\n\004blue\020\002\022\n\n\006purple\020\003\022\r\n"
    "\tmagicsoul\020\004\022\017\n\013stone_green\020\005\022\016\n\nstone_b"
    "lue\020\006\022\020\n\014stone_purple\020\007\"\036\n\013hero_evolve\022\017"
    "\n\007_heroid\030\001 \002(\r\"7\n\017enter_act_stage\022\024\n\014_s"
    "tage_group\030\001 \002(\r\022\016\n\006_stage\030\002 \002(\r\"\215\004\n\006lad"
    "der\022#\n\013_open_panel\030\001 \001(\0132\016.up.open_panel"
    "\022+\n\017_apply_opponent\030\002 \001(\0132\022.up.apply_opp"
    "onent\022\'\n\r_start_battle\030\003 \001(\0132\020.up.start_"
    "battle\022#\n\013_end_battle\030\004 \001(\0132\016.up.end_bat"
    "tle\022#\n\013_set_lineup\030\005 \001(\0132\016.up.set_lineup"
    "\022)\n\016_query_records\030\006 \001(\0132\021.up.query_reco"
    "rds\022\'\n\r_query_replay\030\007 \001(\0132\020.up.query_re"
    "play\022-\n\020_query_rankboard\030\010 \001(\0132\023.up.quer"
    "y_rankboard\022(\n\013_query_oppo\030\t \001(\0132\023.up.qu"
    "ery_oppo_info\022-\n\020_clear_battle_cd\030\n \001(\0132"
    "\023.up.clear_battle_cd\022/\n\021_draw_rank_rewar"
    "d\030\013 \001(\0132\024.up.draw_rank_reward\0221\n\022_buy_ba"
    "ttle_chance\030\014 \001(\0132\025.up.buy_battle_chance"
    "\"\014\n\nopen_panel\"\020\n\016apply_opponent\"=\n\014star"
    "t_battle\022\025\n\r_oppo_user_id\030\001 \002(\r\022\026\n\016_atta"
    "ck_lineup\030\002 \003(\r\"0\n\nend_battle\022\"\n\007_result"
    "\030\001 \002(\0162\021.up.battle_result\"\035\n\nset_lineup\022"
    "\017\n\007_lineup\030\001 \003(\r\"\017\n\rquery_records\"<\n\014que"
    "ry_replay\022\025\n\r_record_index\030\001 \002(\r\022\025\n\r_rec"
    "ord_svrid\030\002 \001(\r\"\022\n\020sync_skill_stren\"q\n\017q"
    "uery_rankboard\0221\n\005_type\030\001 \002(\0162\".up.query"
    "_rankboard.rankboard_type\"+\n\016rankboard_t"
    "ype\022\014\n\010static_c\020\000\022\013\n\007dynamic\020\001\"(\n\017query_"
    "oppo_info\022\025\n\r_oppo_user_id\030\001 \002(\r\"\021\n\017clea"
    "r_battle_cd\"\022\n\020draw_rank_reward\"\023\n\021buy_b"
    "attle_chance\"^\n\010set_name\022$\n\005_type\030\001 \002(\0162"
    "\025.up.set_name.set_type\022\r\n\005_name\030\002 \002(\t\"\035\n"
    "\010set_type\022\010\n\004free\020\000\022\007\n\003rmb\020\001\"\035\n\nset_avat"
    "ar\022\017\n\007_avatar\030\001 \002(\r\"\243\001\n\nquery_data\022(\n\005_t"
    "ype\030\001 \003(\0162\031.up.query_data.query_type\022\025\n\r"
    "_query_heroes\030\002 \003(\r\022\026\n\016_month_card_id\030\003 "
    "\003(\r\"<\n\nquery_type\022\007\n\003rmb\020\001\022\010\n\004hero\020\002\022\014\n\010"
    "recharge\020\003\022\r\n\tmonthcard\020\004\"\027\n\005midas\022\016\n\006_t"
    "imes\030\001 \002(\r\"\034\n\topen_shop\022\017\n\007_shopid\030\001 \002(\r"
    "\"Y\n\006charge\022(\n\007_platid\030\001 \002(\0162\021.up.platfor"
    "m_type:\004self\022\021\n\t_chargeid\030\002 \002(\r\022\022\n\n_extr"
    "adata\030\003 \001(\t\"f\n\017ask_daily_login\022+\n\007_statu"
    "s\030\001 \002(\0162\032.up.ask_daily_login.status\"&\n\006s"
    "tatus\022\007\n\003all\020\001\022\n\n\006common\020\002\022\007\n\003vip\020\003\"\361\001\n\003"
    "tbc\022\'\n\013_open_panel\030\001 \001(\0132\022.up.tbc_open_p"
    "anel\022\'\n\013_query_oppo\030\002 \001(\0132\022.up.tbc_query"
    "_oppo\022(\n\n_start_bat\030\003 \001(\0132\024.up.tbc_start"
    "_battle\022$\n\010_end_bat\030\004 \001(\0132\022.up.tbc_end_b"
    "attle\022\035\n\006_reset\030\005 \001(\0132\r.up.tbc_reset\022)\n\014"
    "_draw_reward\030\006 \001(\0132\023.up.tbc_draw_reward\""
    "\020\n\016tbc_open_panel\"#\n\016tbc_query_oppo\022\021\n\t_"
    "stage_id\030\001 \002(\r\"7\n\020tbc_start_battle\022\020\n\010_h"
    "eroids\030\001 \003(\r\022\021\n\t_use_hire\030\002 \001(\r\"U\n\010tbc_h"
    "ero\022\017\n\007_heroid\030\001 \002(\r\022\020\n\010_hp_perc\030\002 \002(\r\022\020"
    "\n\010_mp_perc\030\003 \002(\r\022\024\n\014_custom_data\030\004 \001(\r\"\231"
    "\001\n\016tbc_end_battle\022+\n\007_result\030\001 \002(\0162\021.up."
    "battle_result:\007victory\022\"\n\014_self_heroes\030\002"
    " \003(\0132\014.up.tbc_hero\022\"\n\014_oppo_heroes\030\003 \003(\013"
    "2\014.up.tbc_hero\022\022\n\n_oprations\030\004 \003(\r\"\013\n\ttb"
    "c_reset\"$\n\017tbc_draw_reward\022\021\n\t_stage_id\030"
    "\001 \002(\r\"\016\n\014get_maillist\"\030\n\tread_mail\022\013\n\003_i"
    "d\030\001 \002(\r\"\016\n\014get_svr_time\"\034\n\014get_vip_gift\022"
    "\014\n\004_vip\030\001 \002(\r\"\210\002\n\004chat\022\032\n\004_say\030\001 \001(\0132\014.u"
    "p.chat_say\022\036\n\006_fresh\030\002 \001(\0132\016.up.chat_fre"
    "sh\022\036\n\006_fetch\030\003 \001(\0132\016.up.chat_fetch\022%\n\014_c"
    "hat_add_bl\030\004 \001(\0132\017.up.chat_add_bl\022%\n\014_ch"
    "at_del_bl\030\005 \001(\0132\017.up.chat_del_bl\022)\n\016_cha"
    "t_fetch_bl\030\006 \001(\0132\021.up.chat_fetch_bl\022+\n\017_"
    "chat_broad_say\030\007 \001(\0132\022.up.chat_broad_say"
    "\"\224\001\n\016chat_broad_say\022\"\n\010_channel\030\001 \001(\0162\020."
    "up.chat_channel\022\023\n\013_target_ids\030\002 \003(\r\022\025\n\r"
    "_content_type\030\003 \001(\r\022\020\n\010_content\030\004 \001(\t\022 \n"
    "\n_accessory\030\005 \001(\0132\014.up.chat_acc\"\017\n\rchat_"
    "fetch_bl\"\234\001\n\010chat_say\0221\n\010_channel\030\001 \002(\0162"
    "\020.up.chat_channel:\rworld_channel\022\022\n\n_tar"
    "get_id\030\002 \001(\r\022\025\n\r_content_type\030\003 \002(\r\022\020\n\010_"
    "content\030\004 \002(\t\022 \n\n_accessory\030\005 \001(\0132\014.up.c"
    "hat_acc\"\211\001\n\010chat_acc\022.\n\005_type\030\001 \002(\0162\027.up"
    ".chat_acc.chat_acc_t:\006binary\022\017\n\007_binary\030"
    "\002 \001(\t\022\022\n\n_record_id\030\003 \001(\r\"(\n\nchat_acc_t\022"
    "\n\n\006binary\020\001\022\016\n\npvp_replay\020\002\"\?\n\nchat_fres"
    "h\0221\n\010_channel\030\001 \002(\0162\020.up.chat_channel:\rw"
    "orld_channel\"Q\n\nchat_fetch\0221\n\010_channel\030\001"
    " \002(\0162\020.up.chat_channel:\rworld_channel\022\020\n"
    "\010_chat_id\030\002 \002(\r\"\033\n\013chat_add_bl\022\014\n\004_uid\030\001"
    " \002(\r\"\033\n\013chat_del_bl\022\014\n\004_uid\030\001 \002(\r\"\241\014\n\005gu"
    "ild\022!\n\007_create\030\001 \001(\0132\020.up.guild_create\022#"
    "\n\010_dismiss\030\002 \001(\0132\021.up.guild_dismiss\022\035\n\005_"
    "list\030\003 \001(\0132\016.up.guild_list\022!\n\007_search\030\004 "
    "\001(\0132\020.up.guild_search\022\035\n\005_join\030\005 \001(\0132\016.u"
    "p.guild_join\022-\n\r_join_confirm\030\006 \001(\0132\026.up"
    ".guild_join_confirm\022%\n\014_guild_leave\030\007 \001("
    "\0132\017.up.guild_leave\022\035\n\005_kick\030\010 \001(\0132\016.up.g"
    "uild_kick\022\033\n\004_set\030\t \001(\0132\r.up.guild_set\022\037"
    "\n\006_query\030\n \001(\0132\017.up.guild_query\022+\n\014_open"
    "_pannel\030\013 \001(\0132\025.up.guild_open_pannel\022#\n\010"
    "_set_job\030\014 \001(\0132\021.up.guild_set_job\022%\n\t_ad"
    "d_hire\030\r \001(\0132\022.up.guild_add_hire\022%\n\t_del"
    "_hire\030\016 \001(\0132\022.up.guild_del_hire\022+\n\014_quer"
    "y_hires\030\017 \001(\0132\025.up.guild_query_hires\022\'\n\n"
    "_hire_hero\030\020 \001(\0132\023.up.guild_hire_hero\022+\n"
    "\014_worship_req\030\021 \001(\0132\025.up.guild_worship_r"
    "eq\0225\n\021_worship_withdraw\030\022 \001(\0132\032.up.guild"
    "_worship_withdraw\0223\n\020_query_hh_detail\030\023 "
    "\001(\0132\031.up.guild_qurey_hh_detail\0221\n\017_insta"
    "nce_query\030\024 \001(\0132\030.up.guild_instance_quer"
    "y\0223\n\020_instance_detail\030\025 \001(\0132\031.up.guild_i"
    "nstance_detail\0221\n\017_instance_start\030\026 \001(\0132"
    "\030.up.guild_instance_start\022-\n\r_instance_e"
    "nd\030\027 \001(\0132\026.up.guild_instance_end\022/\n\016_ins"
    "tance_drop\030\030 \001(\0132\027.up.guild_instance_dro"
    "p\022/\n\016_instance_open\030\031 \001(\0132\027.up.guild_ins"
    "tance_open\0221\n\017_instance_apply\030\032 \001(\0132\030.up"
    ".guild_instance_apply\022\'\n\n_drop_info\030\033 \001("
    "\0132\023.up.guild_drop_info\022\'\n\n_drop_give\030\034 \001"
    "(\0132\023.up.guild_drop_give\0223\n\020_instance_dam"
    "age\030\035 \001(\0132\031.up.guild_instance_damage\022/\n\016"
    "_items_history\030\036 \001(\0132\027.up.guild_items_hi"
    "story\022#\n\013_guild_jump\030\037 \001(\0132\016.up.guild_ju"
    "mp\022-\n\020_guild_app_queue\030  \001(\0132\023.up.guild_"
    "app_queue\0225\n\021_instance_prepare\030! \001(\0132\032.u"
    "p.guild_prepare_instance\0223\n\023_guild_query"
    "_member\030\" \001(\0132\026.up.guild_query_member\022/\n"
    "\021_guild_stage_rank\030# \001(\0132\024.up.guild_stag"
    "e_rank\022%\n\t_set_jump\030$ \001(\0132\022.up.guild_set"
    "_jump\"l\n\016guild_set_jump\0224\n\014_is_can_jump\030"
    "\001 \002(\0162\036.up.guild_set_jump.is_can_jump\"$\n"
    "\013is_can_jump\022\t\n\005_true\020\001\022\n\n\006_false\020\002\"%\n\020g"
    "uild_stage_rank\022\021\n\t_stage_id\030\001 \002(\r\"\024\n\022gu"
    "ild_query_member\"+\n\026guild_prepare_instan"
    "ce\022\021\n\t_stage_id\030\001 \002(\r\"#\n\017guild_app_queue"
    "\022\020\n\010_item_id\030\001 \002(\r\"\014\n\nguild_jump\"\025\n\023guil"
    "d_items_history\"^\n\017guild_drop_give\022\020\n\010_i"
    "tem_id\030\001 \002(\r\022\020\n\010_raid_id\030\002 \002(\r\022\020\n\010_user_"
    "id\030\003 \002(\r\022\025\n\r_time_out_end\030\004 \002(\r\")\n\025guild"
    "_instance_damage\022\020\n\010_raid_id\030\001 \002(\r\"\021\n\017gu"
    "ild_drop_info\":\n\024guild_instance_apply\022\020\n"
    "\010_raid_id\030\001 \002(\r\022\020\n\010_item_id\030\002 \002(\r\")\n\024gui"
    "ld_instance_start\022\021\n\t_stage_id\030\001 \002(\r\"\273\001\n"
    "\022guild_instance_end\022\"\n\007_result\030\001 \002(\0162\021.u"
    "p.battle_result\022\020\n\010_hp_info\030\002 \003(\r\022\r\n\005_wa"
    "ve\030\003 \002(\r\022\017\n\007_damage\030\004 \002(\r\022\021\n\t_progress\030\005"
    " \002(\r\022\027\n\017_stage_progress\030\006 \002(\r\022\022\n\n_oprati"
    "ons\030\007 \003(\r\022\017\n\007_heroes\030\010 \003(\r\"\'\n\023guild_inst"
    "ance_drop\022\020\n\010_raid_id\030\001 \002(\r\"\'\n\023guild_ins"
    "tance_open\022\020\n\010_raid_id\030\001 \002(\r\"\026\n\024guild_in"
    "stance_query\"*\n\025guild_instance_detail\022\021\n"
    "\t_stage_id\030\001 \002(\r\".\n\014guild_create\022\r\n\005_nam"
    "e\030\001 \002(\t\022\017\n\007_avatar\030\002 \002(\r\"\017\n\rguild_dismis"
    "s\"\014\n\nguild_list\"!\n\014guild_search\022\021\n\t_guil"
    "d_id\030\001 \002(\r\"\037\n\nguild_join\022\021\n\t_guild_id\030\001 "
    "\002(\r\"\206\001\n\022guild_join_confirm\022\014\n\004_uid\030\001 \002(\r"
    "\022:\n\005_type\030\002 \002(\0162#.up.guild_join_confirm."
    "confirm_type:\006accept\"&\n\014confirm_type\022\n\n\006"
    "accept\020\001\022\n\n\006reject\020\002\"\r\n\013guild_leave\"\032\n\ng"
    "uild_kick\022\014\n\004_uid\030\001 \002(\r\"\274\001\n\tguild_set\022\017\n"
    "\007_avatar\030\001 \001(\r\022.\n\n_join_type\030\002 \001(\0162\032.up."
    "guild_set.guild_join_t\022\023\n\013_join_limit\030\003 "
    "\001(\r\022\017\n\007_slogan\030\004 \001(\t\022\021\n\t_can_jump\030\005 \001(\r\""
    "5\n\014guild_join_t\022\r\n\tno_verify\020\001\022\n\n\006verify"
    "\020\002\022\n\n\006closed\020\003\"\r\n\013guild_query\"\023\n\021guild_o"
    "pen_pannel\"<\n\rguild_set_job\022\014\n\004_uid\030\001 \002("
    "\r\022\035\n\004_job\030\002 \002(\0162\017.up.guild_job_t\"!\n\016guil"
    "d_add_hire\022\017\n\007_heroid\030\001 \002(\r\"!\n\016guild_del"
    "_hire\022\017\n\007_heroid\030\002 \002(\r\"1\n\021guild_query_hi"
    "res\022\034\n\005_from\030\001 \002(\0162\r.up.hire_from\"a\n\017gui"
    "ld_hire_hero\022\014\n\004_uid\030\001 \002(\r\022\017\n\007_heroid\030\002 "
    "\002(\r\022\034\n\005_from\030\003 \002(\0162\r.up.hire_from\022\021\n\t_st"
    "age_id\030\004 \001(\r\".\n\021guild_worship_req\022\013\n\003_id"
    "\030\001 \002(\r\022\014\n\004_uid\030\002 \002(\r\"\030\n\026guild_worship_wi"
    "thdraw\"6\n\025guild_qurey_hh_detail\022\014\n\004_uid\030"
    "\001 \002(\r\022\017\n\007_heroid\030\002 \002(\r\"\023\n\021ask_activity_i"
    "nfo\"\034\n\ncdkey_gift\022\016\n\006_cdkey\030\001 \002(\t\"\311\005\n\010ex"
    "cavate\022-\n\020_search_excavate\030\001 \001(\0132\023.up.se"
    "arch_excavate\0225\n\024_query_excavate_data\030\002 "
    "\001(\0132\027.up.query_excavate_data\022;\n\027_query_e"
    "xcavate_history\030\003 \001(\0132\032.up.query_excavat"
    "e_history\0229\n\026_query_excavate_battle\030\004 \001("
    "\0132\031.up.query_excavate_battle\0221\n\022_set_exc"
    "avate_team\030\005 \001(\0132\025.up.set_excavate_team\022"
    "9\n\026_excavate_start_battle\030\006 \001(\0132\031.up.exc"
    "avate_start_battle\0225\n\024_excavate_end_batt"
    "le\030\007 \001(\0132\027.up.excavate_end_battle\0223\n\023_qu"
    "ery_excavate_def\030\010 \001(\0132\026.up.query_excava"
    "te_def\0229\n\026_clear_excavate_battle\030\t \001(\0132\031"
    ".up.clear_excavate_battle\022;\n\027_withdraw_e"
    "xcavate_hero\030\n \001(\0132\032.up.withdraw_excavat"
    "e_hero\0229\n\026_draw_excavate_def_rwd\030\013 \001(\0132\031"
    ".up.draw_excavate_def_rwd\022)\n\016_drop_excav"
    "ate\030\014 \001(\0132\021.up.drop_excavate\022\'\n\r_query_r"
    "eplay\030\r \001(\0132\020.up.query_replay\"\021\n\017search_"
    "excavate\"\025\n\023query_excavate_data\"\030\n\026query"
    "_excavate_history\"$\n\025query_excavate_batt"
    "le\022\013\n\003_id\030\001 \002(\t\"7\n\021set_excavate_team\022\024\n\014"
    "_excavate_id\030\001 \002(\r\022\014\n\004_tid\030\002 \003(\r\"z\n\025exca"
    "vate_start_battle\022\020\n\010_heroids\030\001 \003(\r\022\024\n\014_"
    "excavate_id\030\002 \002(\r\022\020\n\010_team_id\030\003 \002(\r\022\024\n\014_"
    "team_svr_id\030\004 \001(\r\022\021\n\t_use_hire\030\005 \001(\r\"\272\001\n"
    "\023excavate_end_battle\022+\n\007_result\030\001 \002(\0162\021."
    "up.battle_result:\007victory\022\'\n\014_self_heroe"
    "s\030\002 \003(\0132\021.up.excavate_hero\022\'\n\014_oppo_hero"
    "es\030\003 \003(\0132\021.up.excavate_hero\022\022\n\n_opration"
    "s\030\004 \003(\r\022\020\n\010_type_id\030\005 \002(\r\"<\n\022query_excav"
    "ate_def\022\020\n\010_mine_id\030\001 \002(\r\022\024\n\014_applier_ui"
    "d\030\002 \002(\r\"\027\n\025clear_excavate_battle\"*\n\026with"
    "draw_excavate_hero\022\020\n\010_hero_id\030\001 \002(\r\"$\n\025"
    "draw_excavate_def_rwd\022\013\n\003_id\030\001 \002(\t\"!\n\rdr"
    "op_excavate\022\020\n\010_mine_id\030\001 \002(\r\"Z\n\rexcavat"
    "e_hero\022\017\n\007_heroid\030\001 \002(\r\022\020\n\010_hp_perc\030\002 \002("
    "\r\022\020\n\010_mp_perc\030\003 \002(\r\022\024\n\014_custom_data\030\004 \001("
    "\r\"\022\n\020query_split_data\"\"\n\022query_split_ret"
    "urn\022\014\n\004_tid\030\001 \002(\r\"-\n\nsplit_hero\022\014\n\004_tid\030"
    "\001 \002(\r\022\021\n\t_stone_id\030\002 \001(\r\"f\n\010worldcup\022+\n\017"
    "_worldcup_query\030\001 \001(\0132\022.up.worldcup_quer"
    "y\022-\n\020_worldcup_submit\030\002 \001(\0132\023.up.worldcu"
    "p_submit\"\020\n\016worldcup_query\"3\n\017worldcup_s"
    "ubmit\022\017\n\007_guess1\030\001 \002(\r\022\017\n\007_guess2\030\002 \001(\r\""
    "+\n\rreport_battle\022\013\n\003_id\030\001 \002(\r\022\r\n\005_data\030\002"
    " \002(\014\"\376\001\n\016query_ranklist\0220\n\n_rank_type\030\001 "
    "\002(\0162\034.up.query_ranklist.rank_type\"\271\001\n\tra"
    "nk_type\022\021\n\rguildliveness\020\001\022\020\n\014excavate_r"
    "ob\020\002\022\021\n\rexcavate_gold\020\003\022\020\n\014excavate_exp\020"
    "\004\022\n\n\006top_gs\020\005\022\020\n\014full_hero_gs\020\006\022\020\n\014hero_"
    "team_gs\020\007\022\021\n\rhero_evo_star\020\010\022\020\n\014hero_aro"
    "usal\020\t\022\r\n\ttop_arena\020\n\"\033\n\010dot_info\022\017\n\007_do"
    "t_id\030\001 \002(\r\"\237\001\n\017require_arousal\022\014\n\004_hid\030\001"
    " \002(\r\0227\n\r_arousal_type\030\002 \002(\0162 .up.require"
    "_arousal.arousal_type\022\014\n\004_aid\030\003 \001(\r\"7\n\014a"
    "rousal_type\022\024\n\020_require_arousal\020\000\022\021\n\rapp"
    "ly_arousal\020\001\"J\n\rchange_server\022%\n\010_op_typ"
    "e\030\001 \002(\0162\023.up.server_opt_type\022\022\n\n_server_"
    "id\030\002 \001(\r\"\023\n\021request_guild_log\",\n\017query_a"
    "ct_stage\022\031\n\021_act_stage_groups\030\001 \003(\r\"%\n\014f"
    "b_attention\022\025\n\r_fb_attention\030\001 \002(\r*-\n\013he"
    "ro_status\022\010\n\004idle\020\000\022\010\n\004hire\020\001\022\n\n\006mining\020"
    "\002*2\n\013guild_job_t\022\014\n\010chairman\020\001\022\n\n\006member"
    "\020\002\022\t\n\005elder\020\003*I\n\thire_from\022\023\n\017hire_from_"
    "guild\020\000\022\021\n\rhire_from_tbc\020\001\022\t\n\005stage\020\002\022\t\n"
    "\005excav\020\003*J\n\014chat_channel\022\021\n\rworld_channe"
    "l\020\001\022\021\n\rguild_channel\020\002\022\024\n\020personal_chann"
    "el\020\003*&\n\017server_opt_type\022\007\n\003get\020\000\022\n\n\006chan"
    "ge\020\001*\260\003\n\rplatform_type\022\010\n\004self\020\000\022\007\n\003s91\020"
    "\001\022\007\n\003tbt\020\002\022\006\n\002pp\020\003\022\t\n\005lemon\020\004\022\n\n\006itools\020"
    "\005\022\014\n\010kuaiyong\020\006\022\t\n\005tuyoo\020\007\022\016\n\nlemonyueyu"
    "\020\010\022\016\n\nky_android\020e\022\016\n\nxm_android\020f\022\021\n\rle"
    "mon_android\020g\022\020\n\014s360_android\020h\022\016\n\nuc_an"
    "droid\020i\022\021\n\rduoku_android\020j\022\017\n\013s91_androi"
    "d\020k\022\025\n\021wandoujia_android\020l\022\017\n\013pps_androi"
    "d\020m\022\022\n\016dangle_android\020n\022\020\n\014oppo_android\020"
    "o\022\021\n\ranzhi_android\020p\022\022\n\016s37wan_android\020q"
    "\022\022\n\016huawei_android\020r\022\025\n\021lianxiang_androi"
    "d\020s\022\020\n\014pptv_android\020t\022\020\n\014vivo_android\020u*"
    "C\n\rbattle_result\022\013\n\007victory\020\000\022\n\n\006defeat\020"
    "\001\022\014\n\010canceled\020\002\022\013\n\007timeout\020\003", 17268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "up.proto", &protobuf_RegisterTypes);
  up_msg::default_instance_ = new up_msg();
  request_upgrade_arousal_level::default_instance_ = new request_upgrade_arousal_level();
  continue_pay::default_instance_ = new continue_pay();
  recharge_rebate::default_instance_ = new recharge_rebate();
  every_day_happy::default_instance_ = new every_day_happy();
  system_setting::default_instance_ = new system_setting();
  system_setting_change::default_instance_ = new system_setting_change();
  system_setting_request::default_instance_ = new system_setting_request();
  push_notify::default_instance_ = new push_notify();
  login::default_instance_ = new login();
  sdk_login::default_instance_ = new sdk_login();
  request_userinfo::default_instance_ = new request_userinfo();
  enter_stage::default_instance_ = new enter_stage();
  exit_stage::default_instance_ = new exit_stage();
  gm_cmd::default_instance_ = new gm_cmd();
  activity_info::default_instance_ = new activity_info();
  activity_lotto_info::default_instance_ = new activity_lotto_info();
  activity_bigpackage_info::default_instance_ = new activity_bigpackage_info();
  activity_bigpackage_reward_info::default_instance_ = new activity_bigpackage_reward_info();
  activity_bigpackage_reset::default_instance_ = new activity_bigpackage_reset();
  activity_lotto_reward::default_instance_ = new activity_lotto_reward();
  open_all_guild_stage::default_instance_ = new open_all_guild_stage();
  set_money::default_instance_ = new set_money();
  hero_upgrade::default_instance_ = new hero_upgrade();
  equip_synthesis::default_instance_ = new equip_synthesis();
  wear_equip::default_instance_ = new wear_equip();
  sync_vitality::default_instance_ = new sync_vitality();
  buy_vitality::default_instance_ = new buy_vitality();
  consume_item::default_instance_ = new consume_item();
  shop_refresh::default_instance_ = new shop_refresh();
  shop_consume::default_instance_ = new shop_consume();
  skill_levelup::default_instance_ = new skill_levelup();
  sell_item::default_instance_ = new sell_item();
  fragment_compose::default_instance_ = new fragment_compose();
  hero_equip_upgrade::default_instance_ = new hero_equip_upgrade();
  hero_equip::default_instance_ = new hero_equip();
  hero::default_instance_ = new hero();
  hero_arousal::default_instance_ = new hero_arousal();
  tutorial::default_instance_ = new tutorial();
  trigger_task::default_instance_ = new trigger_task();
  require_rewards::default_instance_ = new require_rewards();
  change_task_status::default_instance_ = new change_task_status();
  trigger_job::default_instance_ = new trigger_job();
  job_rewards::default_instance_ = new job_rewards();
  suspend_report::default_instance_ = new suspend_report();
  reset_elite::default_instance_ = new reset_elite();
  sweep_stage::default_instance_ = new sweep_stage();
  buy_skill_stren_point::default_instance_ = new buy_skill_stren_point();
  ask_magicsoul::default_instance_ = new ask_magicsoul();
  tavern_draw::default_instance_ = new tavern_draw();
  hero_evolve::default_instance_ = new hero_evolve();
  enter_act_stage::default_instance_ = new enter_act_stage();
  ladder::default_instance_ = new ladder();
  open_panel::default_instance_ = new open_panel();
  apply_opponent::default_instance_ = new apply_opponent();
  start_battle::default_instance_ = new start_battle();
  end_battle::default_instance_ = new end_battle();
  set_lineup::default_instance_ = new set_lineup();
  query_records::default_instance_ = new query_records();
  query_replay::default_instance_ = new query_replay();
  sync_skill_stren::default_instance_ = new sync_skill_stren();
  query_rankboard::default_instance_ = new query_rankboard();
  query_oppo_info::default_instance_ = new query_oppo_info();
  clear_battle_cd::default_instance_ = new clear_battle_cd();
  draw_rank_reward::default_instance_ = new draw_rank_reward();
  buy_battle_chance::default_instance_ = new buy_battle_chance();
  set_name::default_instance_ = new set_name();
  set_avatar::default_instance_ = new set_avatar();
  query_data::default_instance_ = new query_data();
  midas::default_instance_ = new midas();
  open_shop::default_instance_ = new open_shop();
  charge::default_instance_ = new charge();
  ask_daily_login::default_instance_ = new ask_daily_login();
  tbc::default_instance_ = new tbc();
  tbc_open_panel::default_instance_ = new tbc_open_panel();
  tbc_query_oppo::default_instance_ = new tbc_query_oppo();
  tbc_start_battle::default_instance_ = new tbc_start_battle();
  tbc_hero::default_instance_ = new tbc_hero();
  tbc_end_battle::default_instance_ = new tbc_end_battle();
  tbc_reset::default_instance_ = new tbc_reset();
  tbc_draw_reward::default_instance_ = new tbc_draw_reward();
  get_maillist::default_instance_ = new get_maillist();
  read_mail::default_instance_ = new read_mail();
  get_svr_time::default_instance_ = new get_svr_time();
  get_vip_gift::default_instance_ = new get_vip_gift();
  chat::default_instance_ = new chat();
  chat_broad_say::default_instance_ = new chat_broad_say();
  chat_fetch_bl::default_instance_ = new chat_fetch_bl();
  chat_say::default_instance_ = new chat_say();
  chat_acc::default_instance_ = new chat_acc();
  chat_fresh::default_instance_ = new chat_fresh();
  chat_fetch::default_instance_ = new chat_fetch();
  chat_add_bl::default_instance_ = new chat_add_bl();
  chat_del_bl::default_instance_ = new chat_del_bl();
  guild::default_instance_ = new guild();
  guild_set_jump::default_instance_ = new guild_set_jump();
  guild_stage_rank::default_instance_ = new guild_stage_rank();
  guild_query_member::default_instance_ = new guild_query_member();
  guild_prepare_instance::default_instance_ = new guild_prepare_instance();
  guild_app_queue::default_instance_ = new guild_app_queue();
  guild_jump::default_instance_ = new guild_jump();
  guild_items_history::default_instance_ = new guild_items_history();
  guild_drop_give::default_instance_ = new guild_drop_give();
  guild_instance_damage::default_instance_ = new guild_instance_damage();
  guild_drop_info::default_instance_ = new guild_drop_info();
  guild_instance_apply::default_instance_ = new guild_instance_apply();
  guild_instance_start::default_instance_ = new guild_instance_start();
  guild_instance_end::default_instance_ = new guild_instance_end();
  guild_instance_drop::default_instance_ = new guild_instance_drop();
  guild_instance_open::default_instance_ = new guild_instance_open();
  guild_instance_query::default_instance_ = new guild_instance_query();
  guild_instance_detail::default_instance_ = new guild_instance_detail();
  guild_create::default_instance_ = new guild_create();
  guild_dismiss::default_instance_ = new guild_dismiss();
  guild_list::default_instance_ = new guild_list();
  guild_search::default_instance_ = new guild_search();
  guild_join::default_instance_ = new guild_join();
  guild_join_confirm::default_instance_ = new guild_join_confirm();
  guild_leave::default_instance_ = new guild_leave();
  guild_kick::default_instance_ = new guild_kick();
  guild_set::default_instance_ = new guild_set();
  guild_query::default_instance_ = new guild_query();
  guild_open_pannel::default_instance_ = new guild_open_pannel();
  guild_set_job::default_instance_ = new guild_set_job();
  guild_add_hire::default_instance_ = new guild_add_hire();
  guild_del_hire::default_instance_ = new guild_del_hire();
  guild_query_hires::default_instance_ = new guild_query_hires();
  guild_hire_hero::default_instance_ = new guild_hire_hero();
  guild_worship_req::default_instance_ = new guild_worship_req();
  guild_worship_withdraw::default_instance_ = new guild_worship_withdraw();
  guild_qurey_hh_detail::default_instance_ = new guild_qurey_hh_detail();
  ask_activity_info::default_instance_ = new ask_activity_info();
  cdkey_gift::default_instance_ = new cdkey_gift();
  excavate::default_instance_ = new excavate();
  search_excavate::default_instance_ = new search_excavate();
  query_excavate_data::default_instance_ = new query_excavate_data();
  query_excavate_history::default_instance_ = new query_excavate_history();
  query_excavate_battle::default_instance_ = new query_excavate_battle();
  set_excavate_team::default_instance_ = new set_excavate_team();
  excavate_start_battle::default_instance_ = new excavate_start_battle();
  excavate_end_battle::default_instance_ = new excavate_end_battle();
  query_excavate_def::default_instance_ = new query_excavate_def();
  clear_excavate_battle::default_instance_ = new clear_excavate_battle();
  withdraw_excavate_hero::default_instance_ = new withdraw_excavate_hero();
  draw_excavate_def_rwd::default_instance_ = new draw_excavate_def_rwd();
  drop_excavate::default_instance_ = new drop_excavate();
  excavate_hero::default_instance_ = new excavate_hero();
  query_split_data::default_instance_ = new query_split_data();
  query_split_return::default_instance_ = new query_split_return();
  split_hero::default_instance_ = new split_hero();
  worldcup::default_instance_ = new worldcup();
  worldcup_query::default_instance_ = new worldcup_query();
  worldcup_submit::default_instance_ = new worldcup_submit();
  report_battle::default_instance_ = new report_battle();
  query_ranklist::default_instance_ = new query_ranklist();
  dot_info::default_instance_ = new dot_info();
  require_arousal::default_instance_ = new require_arousal();
  change_server::default_instance_ = new change_server();
  request_guild_log::default_instance_ = new request_guild_log();
  query_act_stage::default_instance_ = new query_act_stage();
  fb_attention::default_instance_ = new fb_attention();
  up_msg::default_instance_->InitAsDefaultInstance();
  request_upgrade_arousal_level::default_instance_->InitAsDefaultInstance();
  continue_pay::default_instance_->InitAsDefaultInstance();
  recharge_rebate::default_instance_->InitAsDefaultInstance();
  every_day_happy::default_instance_->InitAsDefaultInstance();
  system_setting::default_instance_->InitAsDefaultInstance();
  system_setting_change::default_instance_->InitAsDefaultInstance();
  system_setting_request::default_instance_->InitAsDefaultInstance();
  push_notify::default_instance_->InitAsDefaultInstance();
  login::default_instance_->InitAsDefaultInstance();
  sdk_login::default_instance_->InitAsDefaultInstance();
  request_userinfo::default_instance_->InitAsDefaultInstance();
  enter_stage::default_instance_->InitAsDefaultInstance();
  exit_stage::default_instance_->InitAsDefaultInstance();
  gm_cmd::default_instance_->InitAsDefaultInstance();
  activity_info::default_instance_->InitAsDefaultInstance();
  activity_lotto_info::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_info::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_reward_info::default_instance_->InitAsDefaultInstance();
  activity_bigpackage_reset::default_instance_->InitAsDefaultInstance();
  activity_lotto_reward::default_instance_->InitAsDefaultInstance();
  open_all_guild_stage::default_instance_->InitAsDefaultInstance();
  set_money::default_instance_->InitAsDefaultInstance();
  hero_upgrade::default_instance_->InitAsDefaultInstance();
  equip_synthesis::default_instance_->InitAsDefaultInstance();
  wear_equip::default_instance_->InitAsDefaultInstance();
  sync_vitality::default_instance_->InitAsDefaultInstance();
  buy_vitality::default_instance_->InitAsDefaultInstance();
  consume_item::default_instance_->InitAsDefaultInstance();
  shop_refresh::default_instance_->InitAsDefaultInstance();
  shop_consume::default_instance_->InitAsDefaultInstance();
  skill_levelup::default_instance_->InitAsDefaultInstance();
  sell_item::default_instance_->InitAsDefaultInstance();
  fragment_compose::default_instance_->InitAsDefaultInstance();
  hero_equip_upgrade::default_instance_->InitAsDefaultInstance();
  hero_equip::default_instance_->InitAsDefaultInstance();
  hero::default_instance_->InitAsDefaultInstance();
  hero_arousal::default_instance_->InitAsDefaultInstance();
  tutorial::default_instance_->InitAsDefaultInstance();
  trigger_task::default_instance_->InitAsDefaultInstance();
  require_rewards::default_instance_->InitAsDefaultInstance();
  change_task_status::default_instance_->InitAsDefaultInstance();
  trigger_job::default_instance_->InitAsDefaultInstance();
  job_rewards::default_instance_->InitAsDefaultInstance();
  suspend_report::default_instance_->InitAsDefaultInstance();
  reset_elite::default_instance_->InitAsDefaultInstance();
  sweep_stage::default_instance_->InitAsDefaultInstance();
  buy_skill_stren_point::default_instance_->InitAsDefaultInstance();
  ask_magicsoul::default_instance_->InitAsDefaultInstance();
  tavern_draw::default_instance_->InitAsDefaultInstance();
  hero_evolve::default_instance_->InitAsDefaultInstance();
  enter_act_stage::default_instance_->InitAsDefaultInstance();
  ladder::default_instance_->InitAsDefaultInstance();
  open_panel::default_instance_->InitAsDefaultInstance();
  apply_opponent::default_instance_->InitAsDefaultInstance();
  start_battle::default_instance_->InitAsDefaultInstance();
  end_battle::default_instance_->InitAsDefaultInstance();
  set_lineup::default_instance_->InitAsDefaultInstance();
  query_records::default_instance_->InitAsDefaultInstance();
  query_replay::default_instance_->InitAsDefaultInstance();
  sync_skill_stren::default_instance_->InitAsDefaultInstance();
  query_rankboard::default_instance_->InitAsDefaultInstance();
  query_oppo_info::default_instance_->InitAsDefaultInstance();
  clear_battle_cd::default_instance_->InitAsDefaultInstance();
  draw_rank_reward::default_instance_->InitAsDefaultInstance();
  buy_battle_chance::default_instance_->InitAsDefaultInstance();
  set_name::default_instance_->InitAsDefaultInstance();
  set_avatar::default_instance_->InitAsDefaultInstance();
  query_data::default_instance_->InitAsDefaultInstance();
  midas::default_instance_->InitAsDefaultInstance();
  open_shop::default_instance_->InitAsDefaultInstance();
  charge::default_instance_->InitAsDefaultInstance();
  ask_daily_login::default_instance_->InitAsDefaultInstance();
  tbc::default_instance_->InitAsDefaultInstance();
  tbc_open_panel::default_instance_->InitAsDefaultInstance();
  tbc_query_oppo::default_instance_->InitAsDefaultInstance();
  tbc_start_battle::default_instance_->InitAsDefaultInstance();
  tbc_hero::default_instance_->InitAsDefaultInstance();
  tbc_end_battle::default_instance_->InitAsDefaultInstance();
  tbc_reset::default_instance_->InitAsDefaultInstance();
  tbc_draw_reward::default_instance_->InitAsDefaultInstance();
  get_maillist::default_instance_->InitAsDefaultInstance();
  read_mail::default_instance_->InitAsDefaultInstance();
  get_svr_time::default_instance_->InitAsDefaultInstance();
  get_vip_gift::default_instance_->InitAsDefaultInstance();
  chat::default_instance_->InitAsDefaultInstance();
  chat_broad_say::default_instance_->InitAsDefaultInstance();
  chat_fetch_bl::default_instance_->InitAsDefaultInstance();
  chat_say::default_instance_->InitAsDefaultInstance();
  chat_acc::default_instance_->InitAsDefaultInstance();
  chat_fresh::default_instance_->InitAsDefaultInstance();
  chat_fetch::default_instance_->InitAsDefaultInstance();
  chat_add_bl::default_instance_->InitAsDefaultInstance();
  chat_del_bl::default_instance_->InitAsDefaultInstance();
  guild::default_instance_->InitAsDefaultInstance();
  guild_set_jump::default_instance_->InitAsDefaultInstance();
  guild_stage_rank::default_instance_->InitAsDefaultInstance();
  guild_query_member::default_instance_->InitAsDefaultInstance();
  guild_prepare_instance::default_instance_->InitAsDefaultInstance();
  guild_app_queue::default_instance_->InitAsDefaultInstance();
  guild_jump::default_instance_->InitAsDefaultInstance();
  guild_items_history::default_instance_->InitAsDefaultInstance();
  guild_drop_give::default_instance_->InitAsDefaultInstance();
  guild_instance_damage::default_instance_->InitAsDefaultInstance();
  guild_drop_info::default_instance_->InitAsDefaultInstance();
  guild_instance_apply::default_instance_->InitAsDefaultInstance();
  guild_instance_start::default_instance_->InitAsDefaultInstance();
  guild_instance_end::default_instance_->InitAsDefaultInstance();
  guild_instance_drop::default_instance_->InitAsDefaultInstance();
  guild_instance_open::default_instance_->InitAsDefaultInstance();
  guild_instance_query::default_instance_->InitAsDefaultInstance();
  guild_instance_detail::default_instance_->InitAsDefaultInstance();
  guild_create::default_instance_->InitAsDefaultInstance();
  guild_dismiss::default_instance_->InitAsDefaultInstance();
  guild_list::default_instance_->InitAsDefaultInstance();
  guild_search::default_instance_->InitAsDefaultInstance();
  guild_join::default_instance_->InitAsDefaultInstance();
  guild_join_confirm::default_instance_->InitAsDefaultInstance();
  guild_leave::default_instance_->InitAsDefaultInstance();
  guild_kick::default_instance_->InitAsDefaultInstance();
  guild_set::default_instance_->InitAsDefaultInstance();
  guild_query::default_instance_->InitAsDefaultInstance();
  guild_open_pannel::default_instance_->InitAsDefaultInstance();
  guild_set_job::default_instance_->InitAsDefaultInstance();
  guild_add_hire::default_instance_->InitAsDefaultInstance();
  guild_del_hire::default_instance_->InitAsDefaultInstance();
  guild_query_hires::default_instance_->InitAsDefaultInstance();
  guild_hire_hero::default_instance_->InitAsDefaultInstance();
  guild_worship_req::default_instance_->InitAsDefaultInstance();
  guild_worship_withdraw::default_instance_->InitAsDefaultInstance();
  guild_qurey_hh_detail::default_instance_->InitAsDefaultInstance();
  ask_activity_info::default_instance_->InitAsDefaultInstance();
  cdkey_gift::default_instance_->InitAsDefaultInstance();
  excavate::default_instance_->InitAsDefaultInstance();
  search_excavate::default_instance_->InitAsDefaultInstance();
  query_excavate_data::default_instance_->InitAsDefaultInstance();
  query_excavate_history::default_instance_->InitAsDefaultInstance();
  query_excavate_battle::default_instance_->InitAsDefaultInstance();
  set_excavate_team::default_instance_->InitAsDefaultInstance();
  excavate_start_battle::default_instance_->InitAsDefaultInstance();
  excavate_end_battle::default_instance_->InitAsDefaultInstance();
  query_excavate_def::default_instance_->InitAsDefaultInstance();
  clear_excavate_battle::default_instance_->InitAsDefaultInstance();
  withdraw_excavate_hero::default_instance_->InitAsDefaultInstance();
  draw_excavate_def_rwd::default_instance_->InitAsDefaultInstance();
  drop_excavate::default_instance_->InitAsDefaultInstance();
  excavate_hero::default_instance_->InitAsDefaultInstance();
  query_split_data::default_instance_->InitAsDefaultInstance();
  query_split_return::default_instance_->InitAsDefaultInstance();
  split_hero::default_instance_->InitAsDefaultInstance();
  worldcup::default_instance_->InitAsDefaultInstance();
  worldcup_query::default_instance_->InitAsDefaultInstance();
  worldcup_submit::default_instance_->InitAsDefaultInstance();
  report_battle::default_instance_->InitAsDefaultInstance();
  query_ranklist::default_instance_->InitAsDefaultInstance();
  dot_info::default_instance_->InitAsDefaultInstance();
  require_arousal::default_instance_->InitAsDefaultInstance();
  change_server::default_instance_->InitAsDefaultInstance();
  request_guild_log::default_instance_->InitAsDefaultInstance();
  query_act_stage::default_instance_->InitAsDefaultInstance();
  fb_attention::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_up_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_up_2eproto {
  StaticDescriptorInitializer_up_2eproto() {
    protobuf_AddDesc_up_2eproto();
  }
} static_descriptor_initializer_up_2eproto_;
const ::google::protobuf::EnumDescriptor* hero_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_status_descriptor_;
}
bool hero_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* guild_job_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_job_t_descriptor_;
}
bool guild_job_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* hire_from_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hire_from_descriptor_;
}
bool hire_from_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* chat_channel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_channel_descriptor_;
}
bool chat_channel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* server_opt_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_opt_type_descriptor_;
}
bool server_opt_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* platform_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_type_descriptor_;
}
bool platform_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* battle_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_result_descriptor_;
}
bool battle_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int up_msg::kRepeatFieldNumber;
const int up_msg::kUserIdFieldNumber;
const int up_msg::kLoginFieldNumber;
const int up_msg::kRequestUserinfoFieldNumber;
const int up_msg::kEnterStageFieldNumber;
const int up_msg::kExitStageFieldNumber;
const int up_msg::kGmCmdFieldNumber;
const int up_msg::kHeroUpgradeFieldNumber;
const int up_msg::kEquipSynthesisFieldNumber;
const int up_msg::kWearEquipFieldNumber;
const int up_msg::kConsumeItemFieldNumber;
const int up_msg::kShopRefreshFieldNumber;
const int up_msg::kShopConsumeFieldNumber;
const int up_msg::kSkillLevelupFieldNumber;
const int up_msg::kSellItemFieldNumber;
const int up_msg::kFragmentComposeFieldNumber;
const int up_msg::kHeroEquipUpgradeFieldNumber;
const int up_msg::kTriggerTaskFieldNumber;
const int up_msg::kRequireRewardsFieldNumber;
const int up_msg::kTriggerJobFieldNumber;
const int up_msg::kJobRewardsFieldNumber;
const int up_msg::kResetEliteFieldNumber;
const int up_msg::kSweepStageFieldNumber;
const int up_msg::kBuyVitalityFieldNumber;
const int up_msg::kBuySkillStrenPointFieldNumber;
const int up_msg::kTavernDrawFieldNumber;
const int up_msg::kQueryDataFieldNumber;
const int up_msg::kHeroEvolveFieldNumber;
const int up_msg::kEnterActStageFieldNumber;
const int up_msg::kSyncVitalityFieldNumber;
const int up_msg::kSuspendReportFieldNumber;
const int up_msg::kTutorialFieldNumber;
const int up_msg::kLadderFieldNumber;
const int up_msg::kSetNameFieldNumber;
const int up_msg::kMidasFieldNumber;
const int up_msg::kOpenShopFieldNumber;
const int up_msg::kChargeFieldNumber;
const int up_msg::kSdkLoginFieldNumber;
const int up_msg::kSetAvatarFieldNumber;
const int up_msg::kAskDailyLoginFieldNumber;
const int up_msg::kTbcFieldNumber;
const int up_msg::kGetMaillistFieldNumber;
const int up_msg::kReadMailFieldNumber;
const int up_msg::kGetSvrTimeFieldNumber;
const int up_msg::kGetVipGiftFieldNumber;
const int up_msg::kImportantDataMd5FieldNumber;
const int up_msg::kChatFieldNumber;
const int up_msg::kCdkeyGiftFieldNumber;
const int up_msg::kGuildFieldNumber;
const int up_msg::kAskMagicsoulFieldNumber;
const int up_msg::kAskActivityInfoFieldNumber;
const int up_msg::kExcavateFieldNumber;
const int up_msg::kPushNotifyFieldNumber;
const int up_msg::kSystemSettingFieldNumber;
const int up_msg::kQuerySplitDataFieldNumber;
const int up_msg::kQuerySplitReturnFieldNumber;
const int up_msg::kSplitHeroFieldNumber;
const int up_msg::kWorldcupFieldNumber;
const int up_msg::kReportBattleFieldNumber;
const int up_msg::kQueryReplayFieldNumber;
const int up_msg::kSyncSkillStrenFieldNumber;
const int up_msg::kQueryRanklistFieldNumber;
const int up_msg::kChangeServerFieldNumber;
const int up_msg::kRequireArousalFieldNumber;
const int up_msg::kChangeTaskStatusFieldNumber;
const int up_msg::kRequestGuildLogFieldNumber;
const int up_msg::kQueryActStageFieldNumber;
const int up_msg::kRequestUpgradeArousalLevelFieldNumber;
const int up_msg::kFbAttentionFieldNumber;
const int up_msg::kDotInfoFieldNumber;
const int up_msg::kActivityInfoFieldNumber;
const int up_msg::kActivityLottoInfoFieldNumber;
const int up_msg::kActivityLottoRewardFieldNumber;
const int up_msg::kActivityBigpackageInfoFieldNumber;
const int up_msg::kActivityBigpackageRewardInfoFieldNumber;
const int up_msg::kActivityBigpackageResetFieldNumber;
const int up_msg::kContinuePayFieldNumber;
const int up_msg::kRechargeRebateFieldNumber;
const int up_msg::kEveryDayHappyFieldNumber;
#endif  // !_MSC_VER

up_msg::up_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void up_msg::InitAsDefaultInstance() {
  _login_ = const_cast< ::up::login*>(&::up::login::default_instance());
  _request_userinfo_ = const_cast< ::up::request_userinfo*>(&::up::request_userinfo::default_instance());
  _enter_stage_ = const_cast< ::up::enter_stage*>(&::up::enter_stage::default_instance());
  _exit_stage_ = const_cast< ::up::exit_stage*>(&::up::exit_stage::default_instance());
  _gm_cmd_ = const_cast< ::up::gm_cmd*>(&::up::gm_cmd::default_instance());
  _hero_upgrade_ = const_cast< ::up::hero_upgrade*>(&::up::hero_upgrade::default_instance());
  _equip_synthesis_ = const_cast< ::up::equip_synthesis*>(&::up::equip_synthesis::default_instance());
  _wear_equip_ = const_cast< ::up::wear_equip*>(&::up::wear_equip::default_instance());
  _consume_item_ = const_cast< ::up::consume_item*>(&::up::consume_item::default_instance());
  _shop_refresh_ = const_cast< ::up::shop_refresh*>(&::up::shop_refresh::default_instance());
  _shop_consume_ = const_cast< ::up::shop_consume*>(&::up::shop_consume::default_instance());
  _skill_levelup_ = const_cast< ::up::skill_levelup*>(&::up::skill_levelup::default_instance());
  _sell_item_ = const_cast< ::up::sell_item*>(&::up::sell_item::default_instance());
  _fragment_compose_ = const_cast< ::up::fragment_compose*>(&::up::fragment_compose::default_instance());
  _hero_equip_upgrade_ = const_cast< ::up::hero_equip_upgrade*>(&::up::hero_equip_upgrade::default_instance());
  _trigger_task_ = const_cast< ::up::trigger_task*>(&::up::trigger_task::default_instance());
  _require_rewards_ = const_cast< ::up::require_rewards*>(&::up::require_rewards::default_instance());
  _trigger_job_ = const_cast< ::up::trigger_job*>(&::up::trigger_job::default_instance());
  _job_rewards_ = const_cast< ::up::job_rewards*>(&::up::job_rewards::default_instance());
  _reset_elite_ = const_cast< ::up::reset_elite*>(&::up::reset_elite::default_instance());
  _sweep_stage_ = const_cast< ::up::sweep_stage*>(&::up::sweep_stage::default_instance());
  _buy_vitality_ = const_cast< ::up::buy_vitality*>(&::up::buy_vitality::default_instance());
  _buy_skill_stren_point_ = const_cast< ::up::buy_skill_stren_point*>(&::up::buy_skill_stren_point::default_instance());
  _tavern_draw_ = const_cast< ::up::tavern_draw*>(&::up::tavern_draw::default_instance());
  _query_data_ = const_cast< ::up::query_data*>(&::up::query_data::default_instance());
  _hero_evolve_ = const_cast< ::up::hero_evolve*>(&::up::hero_evolve::default_instance());
  _enter_act_stage_ = const_cast< ::up::enter_act_stage*>(&::up::enter_act_stage::default_instance());
  _sync_vitality_ = const_cast< ::up::sync_vitality*>(&::up::sync_vitality::default_instance());
  _suspend_report_ = const_cast< ::up::suspend_report*>(&::up::suspend_report::default_instance());
  _tutorial_ = const_cast< ::up::tutorial*>(&::up::tutorial::default_instance());
  _ladder_ = const_cast< ::up::ladder*>(&::up::ladder::default_instance());
  _set_name_ = const_cast< ::up::set_name*>(&::up::set_name::default_instance());
  _midas_ = const_cast< ::up::midas*>(&::up::midas::default_instance());
  _open_shop_ = const_cast< ::up::open_shop*>(&::up::open_shop::default_instance());
  _charge_ = const_cast< ::up::charge*>(&::up::charge::default_instance());
  _sdk_login_ = const_cast< ::up::sdk_login*>(&::up::sdk_login::default_instance());
  _set_avatar_ = const_cast< ::up::set_avatar*>(&::up::set_avatar::default_instance());
  _ask_daily_login_ = const_cast< ::up::ask_daily_login*>(&::up::ask_daily_login::default_instance());
  _tbc_ = const_cast< ::up::tbc*>(&::up::tbc::default_instance());
  _get_maillist_ = const_cast< ::up::get_maillist*>(&::up::get_maillist::default_instance());
  _read_mail_ = const_cast< ::up::read_mail*>(&::up::read_mail::default_instance());
  _get_svr_time_ = const_cast< ::up::get_svr_time*>(&::up::get_svr_time::default_instance());
  _get_vip_gift_ = const_cast< ::up::get_vip_gift*>(&::up::get_vip_gift::default_instance());
  _chat_ = const_cast< ::up::chat*>(&::up::chat::default_instance());
  _cdkey_gift_ = const_cast< ::up::cdkey_gift*>(&::up::cdkey_gift::default_instance());
  _guild_ = const_cast< ::up::guild*>(&::up::guild::default_instance());
  _ask_magicsoul_ = const_cast< ::up::ask_magicsoul*>(&::up::ask_magicsoul::default_instance());
  _ask_activity_info_ = const_cast< ::up::ask_activity_info*>(&::up::ask_activity_info::default_instance());
  _excavate_ = const_cast< ::up::excavate*>(&::up::excavate::default_instance());
  _push_notify_ = const_cast< ::up::push_notify*>(&::up::push_notify::default_instance());
  _system_setting_ = const_cast< ::up::system_setting*>(&::up::system_setting::default_instance());
  _query_split_data_ = const_cast< ::up::query_split_data*>(&::up::query_split_data::default_instance());
  _query_split_return_ = const_cast< ::up::query_split_return*>(&::up::query_split_return::default_instance());
  _split_hero_ = const_cast< ::up::split_hero*>(&::up::split_hero::default_instance());
  _worldcup_ = const_cast< ::up::worldcup*>(&::up::worldcup::default_instance());
  _report_battle_ = const_cast< ::up::report_battle*>(&::up::report_battle::default_instance());
  _query_replay_ = const_cast< ::up::query_replay*>(&::up::query_replay::default_instance());
  _sync_skill_stren_ = const_cast< ::up::sync_skill_stren*>(&::up::sync_skill_stren::default_instance());
  _query_ranklist_ = const_cast< ::up::query_ranklist*>(&::up::query_ranklist::default_instance());
  _change_server_ = const_cast< ::up::change_server*>(&::up::change_server::default_instance());
  _require_arousal_ = const_cast< ::up::require_arousal*>(&::up::require_arousal::default_instance());
  _change_task_status_ = const_cast< ::up::change_task_status*>(&::up::change_task_status::default_instance());
  _request_guild_log_ = const_cast< ::up::request_guild_log*>(&::up::request_guild_log::default_instance());
  _query_act_stage_ = const_cast< ::up::query_act_stage*>(&::up::query_act_stage::default_instance());
  _request_upgrade_arousal_level_ = const_cast< ::up::request_upgrade_arousal_level*>(&::up::request_upgrade_arousal_level::default_instance());
  _fb_attention_ = const_cast< ::up::fb_attention*>(&::up::fb_attention::default_instance());
  _dot_info_ = const_cast< ::up::dot_info*>(&::up::dot_info::default_instance());
  _activity_info_ = const_cast< ::up::activity_info*>(&::up::activity_info::default_instance());
  _activity_lotto_info_ = const_cast< ::up::activity_lotto_info*>(&::up::activity_lotto_info::default_instance());
  _activity_lotto_reward_ = const_cast< ::up::activity_lotto_reward*>(&::up::activity_lotto_reward::default_instance());
  _activity_bigpackage_info_ = const_cast< ::up::activity_bigpackage_info*>(&::up::activity_bigpackage_info::default_instance());
  _activity_bigpackage_reward_info_ = const_cast< ::up::activity_bigpackage_reward_info*>(&::up::activity_bigpackage_reward_info::default_instance());
  _activity_bigpackage_reset_ = const_cast< ::up::activity_bigpackage_reset*>(&::up::activity_bigpackage_reset::default_instance());
  _continue_pay_ = const_cast< ::up::continue_pay*>(&::up::continue_pay::default_instance());
  _recharge_rebate_ = const_cast< ::up::recharge_rebate*>(&::up::recharge_rebate::default_instance());
  _every_day_happy_ = const_cast< ::up::every_day_happy*>(&::up::every_day_happy::default_instance());
}

up_msg::up_msg(const up_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void up_msg::SharedCtor() {
  _cached_size_ = 0;
  _repeat_ = 0u;
  _user_id_ = 0u;
  _login_ = NULL;
  _request_userinfo_ = NULL;
  _enter_stage_ = NULL;
  _exit_stage_ = NULL;
  _gm_cmd_ = NULL;
  _hero_upgrade_ = NULL;
  _equip_synthesis_ = NULL;
  _wear_equip_ = NULL;
  _consume_item_ = NULL;
  _shop_refresh_ = NULL;
  _shop_consume_ = NULL;
  _skill_levelup_ = NULL;
  _sell_item_ = NULL;
  _fragment_compose_ = NULL;
  _hero_equip_upgrade_ = NULL;
  _trigger_task_ = NULL;
  _require_rewards_ = NULL;
  _trigger_job_ = NULL;
  _job_rewards_ = NULL;
  _reset_elite_ = NULL;
  _sweep_stage_ = NULL;
  _buy_vitality_ = NULL;
  _buy_skill_stren_point_ = NULL;
  _tavern_draw_ = NULL;
  _query_data_ = NULL;
  _hero_evolve_ = NULL;
  _enter_act_stage_ = NULL;
  _sync_vitality_ = NULL;
  _suspend_report_ = NULL;
  _tutorial_ = NULL;
  _ladder_ = NULL;
  _set_name_ = NULL;
  _midas_ = NULL;
  _open_shop_ = NULL;
  _charge_ = NULL;
  _sdk_login_ = NULL;
  _set_avatar_ = NULL;
  _ask_daily_login_ = NULL;
  _tbc_ = NULL;
  _get_maillist_ = NULL;
  _read_mail_ = NULL;
  _get_svr_time_ = NULL;
  _get_vip_gift_ = NULL;
  _important_data_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _chat_ = NULL;
  _cdkey_gift_ = NULL;
  _guild_ = NULL;
  _ask_magicsoul_ = NULL;
  _ask_activity_info_ = NULL;
  _excavate_ = NULL;
  _push_notify_ = NULL;
  _system_setting_ = NULL;
  _query_split_data_ = NULL;
  _query_split_return_ = NULL;
  _split_hero_ = NULL;
  _worldcup_ = NULL;
  _report_battle_ = NULL;
  _query_replay_ = NULL;
  _sync_skill_stren_ = NULL;
  _query_ranklist_ = NULL;
  _change_server_ = NULL;
  _require_arousal_ = NULL;
  _change_task_status_ = NULL;
  _request_guild_log_ = NULL;
  _query_act_stage_ = NULL;
  _request_upgrade_arousal_level_ = NULL;
  _fb_attention_ = NULL;
  _dot_info_ = NULL;
  _activity_info_ = NULL;
  _activity_lotto_info_ = NULL;
  _activity_lotto_reward_ = NULL;
  _activity_bigpackage_info_ = NULL;
  _activity_bigpackage_reward_info_ = NULL;
  _activity_bigpackage_reset_ = NULL;
  _continue_pay_ = NULL;
  _recharge_rebate_ = NULL;
  _every_day_happy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

up_msg::~up_msg() {
  SharedDtor();
}

void up_msg::SharedDtor() {
  if (_important_data_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete _important_data_md5_;
  }
  if (this != default_instance_) {
    delete _login_;
    delete _request_userinfo_;
    delete _enter_stage_;
    delete _exit_stage_;
    delete _gm_cmd_;
    delete _hero_upgrade_;
    delete _equip_synthesis_;
    delete _wear_equip_;
    delete _consume_item_;
    delete _shop_refresh_;
    delete _shop_consume_;
    delete _skill_levelup_;
    delete _sell_item_;
    delete _fragment_compose_;
    delete _hero_equip_upgrade_;
    delete _trigger_task_;
    delete _require_rewards_;
    delete _trigger_job_;
    delete _job_rewards_;
    delete _reset_elite_;
    delete _sweep_stage_;
    delete _buy_vitality_;
    delete _buy_skill_stren_point_;
    delete _tavern_draw_;
    delete _query_data_;
    delete _hero_evolve_;
    delete _enter_act_stage_;
    delete _sync_vitality_;
    delete _suspend_report_;
    delete _tutorial_;
    delete _ladder_;
    delete _set_name_;
    delete _midas_;
    delete _open_shop_;
    delete _charge_;
    delete _sdk_login_;
    delete _set_avatar_;
    delete _ask_daily_login_;
    delete _tbc_;
    delete _get_maillist_;
    delete _read_mail_;
    delete _get_svr_time_;
    delete _get_vip_gift_;
    delete _chat_;
    delete _cdkey_gift_;
    delete _guild_;
    delete _ask_magicsoul_;
    delete _ask_activity_info_;
    delete _excavate_;
    delete _push_notify_;
    delete _system_setting_;
    delete _query_split_data_;
    delete _query_split_return_;
    delete _split_hero_;
    delete _worldcup_;
    delete _report_battle_;
    delete _query_replay_;
    delete _sync_skill_stren_;
    delete _query_ranklist_;
    delete _change_server_;
    delete _require_arousal_;
    delete _change_task_status_;
    delete _request_guild_log_;
    delete _query_act_stage_;
    delete _request_upgrade_arousal_level_;
    delete _fb_attention_;
    delete _dot_info_;
    delete _activity_info_;
    delete _activity_lotto_info_;
    delete _activity_lotto_reward_;
    delete _activity_bigpackage_info_;
    delete _activity_bigpackage_reward_info_;
    delete _activity_bigpackage_reset_;
    delete _continue_pay_;
    delete _recharge_rebate_;
    delete _every_day_happy_;
  }
}

void up_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* up_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return up_msg_descriptor_;
}

const up_msg& up_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

up_msg* up_msg::default_instance_ = NULL;

up_msg* up_msg::New() const {
  return new up_msg;
}

void up_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _repeat_ = 0u;
    _user_id_ = 0u;
    if (has__login()) {
      if (_login_ != NULL) _login_->::up::login::Clear();
    }
    if (has__request_userinfo()) {
      if (_request_userinfo_ != NULL) _request_userinfo_->::up::request_userinfo::Clear();
    }
    if (has__enter_stage()) {
      if (_enter_stage_ != NULL) _enter_stage_->::up::enter_stage::Clear();
    }
    if (has__exit_stage()) {
      if (_exit_stage_ != NULL) _exit_stage_->::up::exit_stage::Clear();
    }
    if (has__gm_cmd()) {
      if (_gm_cmd_ != NULL) _gm_cmd_->::up::gm_cmd::Clear();
    }
    if (has__hero_upgrade()) {
      if (_hero_upgrade_ != NULL) _hero_upgrade_->::up::hero_upgrade::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has__equip_synthesis()) {
      if (_equip_synthesis_ != NULL) _equip_synthesis_->::up::equip_synthesis::Clear();
    }
    if (has__wear_equip()) {
      if (_wear_equip_ != NULL) _wear_equip_->::up::wear_equip::Clear();
    }
    if (has__consume_item()) {
      if (_consume_item_ != NULL) _consume_item_->::up::consume_item::Clear();
    }
    if (has__shop_refresh()) {
      if (_shop_refresh_ != NULL) _shop_refresh_->::up::shop_refresh::Clear();
    }
    if (has__shop_consume()) {
      if (_shop_consume_ != NULL) _shop_consume_->::up::shop_consume::Clear();
    }
    if (has__skill_levelup()) {
      if (_skill_levelup_ != NULL) _skill_levelup_->::up::skill_levelup::Clear();
    }
    if (has__sell_item()) {
      if (_sell_item_ != NULL) _sell_item_->::up::sell_item::Clear();
    }
    if (has__fragment_compose()) {
      if (_fragment_compose_ != NULL) _fragment_compose_->::up::fragment_compose::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has__hero_equip_upgrade()) {
      if (_hero_equip_upgrade_ != NULL) _hero_equip_upgrade_->::up::hero_equip_upgrade::Clear();
    }
    if (has__trigger_task()) {
      if (_trigger_task_ != NULL) _trigger_task_->::up::trigger_task::Clear();
    }
    if (has__require_rewards()) {
      if (_require_rewards_ != NULL) _require_rewards_->::up::require_rewards::Clear();
    }
    if (has__trigger_job()) {
      if (_trigger_job_ != NULL) _trigger_job_->::up::trigger_job::Clear();
    }
    if (has__job_rewards()) {
      if (_job_rewards_ != NULL) _job_rewards_->::up::job_rewards::Clear();
    }
    if (has__reset_elite()) {
      if (_reset_elite_ != NULL) _reset_elite_->::up::reset_elite::Clear();
    }
    if (has__sweep_stage()) {
      if (_sweep_stage_ != NULL) _sweep_stage_->::up::sweep_stage::Clear();
    }
    if (has__buy_vitality()) {
      if (_buy_vitality_ != NULL) _buy_vitality_->::up::buy_vitality::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has__buy_skill_stren_point()) {
      if (_buy_skill_stren_point_ != NULL) _buy_skill_stren_point_->::up::buy_skill_stren_point::Clear();
    }
    if (has__tavern_draw()) {
      if (_tavern_draw_ != NULL) _tavern_draw_->::up::tavern_draw::Clear();
    }
    if (has__query_data()) {
      if (_query_data_ != NULL) _query_data_->::up::query_data::Clear();
    }
    if (has__hero_evolve()) {
      if (_hero_evolve_ != NULL) _hero_evolve_->::up::hero_evolve::Clear();
    }
    if (has__enter_act_stage()) {
      if (_enter_act_stage_ != NULL) _enter_act_stage_->::up::enter_act_stage::Clear();
    }
    if (has__sync_vitality()) {
      if (_sync_vitality_ != NULL) _sync_vitality_->::up::sync_vitality::Clear();
    }
    if (has__suspend_report()) {
      if (_suspend_report_ != NULL) _suspend_report_->::up::suspend_report::Clear();
    }
    if (has__tutorial()) {
      if (_tutorial_ != NULL) _tutorial_->::up::tutorial::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has__ladder()) {
      if (_ladder_ != NULL) _ladder_->::up::ladder::Clear();
    }
    if (has__set_name()) {
      if (_set_name_ != NULL) _set_name_->::up::set_name::Clear();
    }
    if (has__midas()) {
      if (_midas_ != NULL) _midas_->::up::midas::Clear();
    }
    if (has__open_shop()) {
      if (_open_shop_ != NULL) _open_shop_->::up::open_shop::Clear();
    }
    if (has__charge()) {
      if (_charge_ != NULL) _charge_->::up::charge::Clear();
    }
    if (has__sdk_login()) {
      if (_sdk_login_ != NULL) _sdk_login_->::up::sdk_login::Clear();
    }
    if (has__set_avatar()) {
      if (_set_avatar_ != NULL) _set_avatar_->::up::set_avatar::Clear();
    }
    if (has__ask_daily_login()) {
      if (_ask_daily_login_ != NULL) _ask_daily_login_->::up::ask_daily_login::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has__tbc()) {
      if (_tbc_ != NULL) _tbc_->::up::tbc::Clear();
    }
    if (has__get_maillist()) {
      if (_get_maillist_ != NULL) _get_maillist_->::up::get_maillist::Clear();
    }
    if (has__read_mail()) {
      if (_read_mail_ != NULL) _read_mail_->::up::read_mail::Clear();
    }
    if (has__get_svr_time()) {
      if (_get_svr_time_ != NULL) _get_svr_time_->::up::get_svr_time::Clear();
    }
    if (has__get_vip_gift()) {
      if (_get_vip_gift_ != NULL) _get_vip_gift_->::up::get_vip_gift::Clear();
    }
    if (has__important_data_md5()) {
      if (_important_data_md5_ != &::google::protobuf::internal::kEmptyString) {
        _important_data_md5_->clear();
      }
    }
    if (has__chat()) {
      if (_chat_ != NULL) _chat_->::up::chat::Clear();
    }
    if (has__cdkey_gift()) {
      if (_cdkey_gift_ != NULL) _cdkey_gift_->::up::cdkey_gift::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has__guild()) {
      if (_guild_ != NULL) _guild_->::up::guild::Clear();
    }
    if (has__ask_magicsoul()) {
      if (_ask_magicsoul_ != NULL) _ask_magicsoul_->::up::ask_magicsoul::Clear();
    }
    if (has__ask_activity_info()) {
      if (_ask_activity_info_ != NULL) _ask_activity_info_->::up::ask_activity_info::Clear();
    }
    if (has__excavate()) {
      if (_excavate_ != NULL) _excavate_->::up::excavate::Clear();
    }
    if (has__push_notify()) {
      if (_push_notify_ != NULL) _push_notify_->::up::push_notify::Clear();
    }
    if (has__system_setting()) {
      if (_system_setting_ != NULL) _system_setting_->::up::system_setting::Clear();
    }
    if (has__query_split_data()) {
      if (_query_split_data_ != NULL) _query_split_data_->::up::query_split_data::Clear();
    }
    if (has__query_split_return()) {
      if (_query_split_return_ != NULL) _query_split_return_->::up::query_split_return::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has__split_hero()) {
      if (_split_hero_ != NULL) _split_hero_->::up::split_hero::Clear();
    }
    if (has__worldcup()) {
      if (_worldcup_ != NULL) _worldcup_->::up::worldcup::Clear();
    }
    if (has__report_battle()) {
      if (_report_battle_ != NULL) _report_battle_->::up::report_battle::Clear();
    }
    if (has__query_replay()) {
      if (_query_replay_ != NULL) _query_replay_->::up::query_replay::Clear();
    }
    if (has__sync_skill_stren()) {
      if (_sync_skill_stren_ != NULL) _sync_skill_stren_->::up::sync_skill_stren::Clear();
    }
    if (has__query_ranklist()) {
      if (_query_ranklist_ != NULL) _query_ranklist_->::up::query_ranklist::Clear();
    }
    if (has__change_server()) {
      if (_change_server_ != NULL) _change_server_->::up::change_server::Clear();
    }
    if (has__require_arousal()) {
      if (_require_arousal_ != NULL) _require_arousal_->::up::require_arousal::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has__change_task_status()) {
      if (_change_task_status_ != NULL) _change_task_status_->::up::change_task_status::Clear();
    }
    if (has__request_guild_log()) {
      if (_request_guild_log_ != NULL) _request_guild_log_->::up::request_guild_log::Clear();
    }
    if (has__query_act_stage()) {
      if (_query_act_stage_ != NULL) _query_act_stage_->::up::query_act_stage::Clear();
    }
    if (has__request_upgrade_arousal_level()) {
      if (_request_upgrade_arousal_level_ != NULL) _request_upgrade_arousal_level_->::up::request_upgrade_arousal_level::Clear();
    }
    if (has__fb_attention()) {
      if (_fb_attention_ != NULL) _fb_attention_->::up::fb_attention::Clear();
    }
    if (has__dot_info()) {
      if (_dot_info_ != NULL) _dot_info_->::up::dot_info::Clear();
    }
    if (has__activity_info()) {
      if (_activity_info_ != NULL) _activity_info_->::up::activity_info::Clear();
    }
    if (has__activity_lotto_info()) {
      if (_activity_lotto_info_ != NULL) _activity_lotto_info_->::up::activity_lotto_info::Clear();
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has__activity_lotto_reward()) {
      if (_activity_lotto_reward_ != NULL) _activity_lotto_reward_->::up::activity_lotto_reward::Clear();
    }
    if (has__activity_bigpackage_info()) {
      if (_activity_bigpackage_info_ != NULL) _activity_bigpackage_info_->::up::activity_bigpackage_info::Clear();
    }
    if (has__activity_bigpackage_reward_info()) {
      if (_activity_bigpackage_reward_info_ != NULL) _activity_bigpackage_reward_info_->::up::activity_bigpackage_reward_info::Clear();
    }
    if (has__activity_bigpackage_reset()) {
      if (_activity_bigpackage_reset_ != NULL) _activity_bigpackage_reset_->::up::activity_bigpackage_reset::Clear();
    }
    if (has__continue_pay()) {
      if (_continue_pay_ != NULL) _continue_pay_->::up::continue_pay::Clear();
    }
    if (has__recharge_rebate()) {
      if (_recharge_rebate_ != NULL) _recharge_rebate_->::up::recharge_rebate::Clear();
    }
    if (has__every_day_happy()) {
      if (_every_day_happy_ != NULL) _every_day_happy_->::up::every_day_happy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool up_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _repeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_repeat_)));
          set_has__repeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__user_id;
        break;
      }

      // optional uint32 _user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__login;
        break;
      }

      // optional .up.login _login = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__request_userinfo;
        break;
      }

      // optional .up.request_userinfo _request_userinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__request_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__enter_stage;
        break;
      }

      // optional .up.enter_stage _enter_stage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__enter_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__enter_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__exit_stage;
        break;
      }

      // optional .up.exit_stage _exit_stage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__exit_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__exit_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__gm_cmd;
        break;
      }

      // optional .up.gm_cmd _gm_cmd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__gm_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__gm_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse__hero_upgrade;
        break;
      }

      // optional .up.hero_upgrade _hero_upgrade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__hero_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse__equip_synthesis;
        break;
      }

      // optional .up.equip_synthesis _equip_synthesis = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__equip_synthesis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__equip_synthesis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse__wear_equip;
        break;
      }

      // optional .up.wear_equip _wear_equip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__wear_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__wear_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse__consume_item;
        break;
      }

      // optional .up.consume_item _consume_item = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__consume_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__consume_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse__shop_refresh;
        break;
      }

      // optional .up.shop_refresh _shop_refresh = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__shop_refresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop_refresh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse__shop_consume;
        break;
      }

      // optional .up.shop_consume _shop_consume = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__shop_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__shop_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse__skill_levelup;
        break;
      }

      // optional .up.skill_levelup _skill_levelup = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__skill_levelup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__skill_levelup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse__sell_item;
        break;
      }

      // optional .up.sell_item _sell_item = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__sell_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sell_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse__fragment_compose;
        break;
      }

      // optional .up.fragment_compose _fragment_compose = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__fragment_compose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fragment_compose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse__hero_equip_upgrade;
        break;
      }

      // optional .up.hero_equip_upgrade _hero_equip_upgrade = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__hero_equip_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_equip_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse__trigger_task;
        break;
      }

      // optional .up.trigger_task _trigger_task = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__trigger_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__trigger_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse__require_rewards;
        break;
      }

      // optional .up.require_rewards _require_rewards = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__require_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__require_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse__trigger_job;
        break;
      }

      // optional .up.trigger_job _trigger_job = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__trigger_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__trigger_job()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse__job_rewards;
        break;
      }

      // optional .up.job_rewards _job_rewards = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__job_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__job_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse__reset_elite;
        break;
      }

      // optional .up.reset_elite _reset_elite = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__reset_elite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reset_elite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse__sweep_stage;
        break;
      }

      // optional .up.sweep_stage _sweep_stage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__sweep_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sweep_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse__buy_vitality;
        break;
      }

      // optional .up.buy_vitality _buy_vitality = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__buy_vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__buy_vitality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse__buy_skill_stren_point;
        break;
      }

      // optional .up.buy_skill_stren_point _buy_skill_stren_point = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__buy_skill_stren_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__buy_skill_stren_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse__tavern_draw;
        break;
      }

      // optional .up.tavern_draw _tavern_draw = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__tavern_draw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tavern_draw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse__query_data;
        break;
      }

      // optional .up.query_data _query_data = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse__hero_evolve;
        break;
      }

      // optional .up.hero_evolve _hero_evolve = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__hero_evolve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hero_evolve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse__enter_act_stage;
        break;
      }

      // optional .up.enter_act_stage _enter_act_stage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__enter_act_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__enter_act_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse__sync_vitality;
        break;
      }

      // optional .up.sync_vitality _sync_vitality = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__sync_vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sync_vitality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse__suspend_report;
        break;
      }

      // optional .up.suspend_report _suspend_report = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__suspend_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__suspend_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse__tutorial;
        break;
      }

      // optional .up.tutorial _tutorial = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__tutorial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tutorial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse__ladder;
        break;
      }

      // optional .up.ladder _ladder = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ladder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ladder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse__set_name;
        break;
      }

      // optional .up.set_name _set_name = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse__midas;
        break;
      }

      // optional .up.midas _midas = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__midas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__midas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse__open_shop;
        break;
      }

      // optional .up.open_shop _open_shop = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__open_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse__charge;
        break;
      }

      // optional .up.charge _charge = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__charge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse__sdk_login;
        break;
      }

      // optional .up.sdk_login _sdk_login = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__sdk_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sdk_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse__set_avatar;
        break;
      }

      // optional .up.set_avatar _set_avatar = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse__ask_daily_login;
        break;
      }

      // optional .up.ask_daily_login _ask_daily_login = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ask_daily_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_daily_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse__tbc;
        break;
      }

      // optional .up.tbc _tbc = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__tbc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__tbc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse__get_maillist;
        break;
      }

      // optional .up.get_maillist _get_maillist = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__get_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__get_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse__read_mail;
        break;
      }

      // optional .up.read_mail _read_mail = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__read_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__read_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse__get_svr_time;
        break;
      }

      // optional .up.get_svr_time _get_svr_time = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__get_svr_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__get_svr_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse__get_vip_gift;
        break;
      }

      // optional .up.get_vip_gift _get_vip_gift = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__get_vip_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__get_vip_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse__important_data_md5;
        break;
      }

      // optional string _important_data_md5 = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__important_data_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__important_data_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_important_data_md5().data(), this->_important_data_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse__chat;
        break;
      }

      // optional .up.chat _chat = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse__cdkey_gift;
        break;
      }

      // optional .up.cdkey_gift _cdkey_gift = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__cdkey_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__cdkey_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse__guild;
        break;
      }

      // optional .up.guild _guild = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse__ask_magicsoul;
        break;
      }

      // optional .up.ask_magicsoul _ask_magicsoul = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ask_magicsoul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_magicsoul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse__ask_activity_info;
        break;
      }

      // optional .up.ask_activity_info _ask_activity_info = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__ask_activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__ask_activity_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse__excavate;
        break;
      }

      // optional .up.excavate _excavate = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__excavate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse__push_notify;
        break;
      }

      // optional .up.push_notify _push_notify = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__push_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__push_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse__system_setting;
        break;
      }

      // optional .up.system_setting _system_setting = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__system_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__system_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse__query_split_data;
        break;
      }

      // optional .up.query_split_data _query_split_data = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_split_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_split_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse__query_split_return;
        break;
      }

      // optional .up.query_split_return _query_split_return = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_split_return:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_split_return()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse__split_hero;
        break;
      }

      // optional .up.split_hero _split_hero = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__split_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__split_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse__worldcup;
        break;
      }

      // optional .up.worldcup _worldcup = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__worldcup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse__report_battle;
        break;
      }

      // optional .up.report_battle _report_battle = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__report_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__report_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse__query_replay;
        break;
      }

      // optional .up.query_replay _query_replay = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_replay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse__sync_skill_stren;
        break;
      }

      // optional .up.sync_skill_stren _sync_skill_stren = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__sync_skill_stren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__sync_skill_stren()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse__query_ranklist;
        break;
      }

      // optional .up.query_ranklist _query_ranklist = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse__change_server;
        break;
      }

      // optional .up.change_server _change_server = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__change_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__change_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse__require_arousal;
        break;
      }

      // optional .up.require_arousal _require_arousal = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__require_arousal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__require_arousal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse__change_task_status;
        break;
      }

      // optional .up.change_task_status _change_task_status = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__change_task_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__change_task_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse__request_guild_log;
        break;
      }

      // optional .up.request_guild_log _request_guild_log = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__request_guild_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request_guild_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse__query_act_stage;
        break;
      }

      // optional .up.query_act_stage _query_act_stage = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_act_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_act_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse__request_upgrade_arousal_level;
        break;
      }

      // optional .up.request_upgrade_arousal_level _request_upgrade_arousal_level = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__request_upgrade_arousal_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request_upgrade_arousal_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse__activity_info;
        break;
      }

      // optional .up.activity_info _activity_info = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse__activity_lotto_info;
        break;
      }

      // optional .up.activity_lotto_info _activity_lotto_info = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_lotto_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_lotto_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse__activity_lotto_reward;
        break;
      }

      // optional .up.activity_lotto_reward _activity_lotto_reward = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_lotto_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_lotto_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse__activity_bigpackage_info;
        break;
      }

      // optional .up.activity_bigpackage_info _activity_bigpackage_info = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_bigpackage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse__activity_bigpackage_reward_info;
        break;
      }

      // optional .up.activity_bigpackage_reward_info _activity_bigpackage_reward_info = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_bigpackage_reward_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_reward_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse__activity_bigpackage_reset;
        break;
      }

      // optional .up.activity_bigpackage_reset _activity_bigpackage_reset = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__activity_bigpackage_reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__activity_bigpackage_reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse__fb_attention;
        break;
      }

      // optional .up.fb_attention _fb_attention = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__fb_attention:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fb_attention()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2410)) goto parse__dot_info;
        break;
      }

      // optional .up.dot_info _dot_info = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__dot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dot_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2418)) goto parse__continue_pay;
        break;
      }

      // optional .up.continue_pay _continue_pay = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__continue_pay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__continue_pay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2426)) goto parse__recharge_rebate;
        break;
      }

      // optional .up.recharge_rebate _recharge_rebate = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__recharge_rebate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__recharge_rebate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2434)) goto parse__every_day_happy;
        break;
      }

      // optional .up.every_day_happy _every_day_happy = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__every_day_happy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__every_day_happy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void up_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _repeat = 1;
  if (has__repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_repeat(), output);
  }

  // optional uint32 _user_id = 2;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_user_id(), output);
  }

  // optional .up.login _login = 3;
  if (has__login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_login(), output);
  }

  // optional .up.request_userinfo _request_userinfo = 4;
  if (has__request_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_request_userinfo(), output);
  }

  // optional .up.enter_stage _enter_stage = 5;
  if (has__enter_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_enter_stage(), output);
  }

  // optional .up.exit_stage _exit_stage = 6;
  if (has__exit_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_exit_stage(), output);
  }

  // optional .up.gm_cmd _gm_cmd = 7;
  if (has__gm_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_gm_cmd(), output);
  }

  // optional .up.hero_upgrade _hero_upgrade = 8;
  if (has__hero_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_hero_upgrade(), output);
  }

  // optional .up.equip_synthesis _equip_synthesis = 9;
  if (has__equip_synthesis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_equip_synthesis(), output);
  }

  // optional .up.wear_equip _wear_equip = 10;
  if (has__wear_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_wear_equip(), output);
  }

  // optional .up.consume_item _consume_item = 11;
  if (has__consume_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_consume_item(), output);
  }

  // optional .up.shop_refresh _shop_refresh = 12;
  if (has__shop_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_shop_refresh(), output);
  }

  // optional .up.shop_consume _shop_consume = 13;
  if (has__shop_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_shop_consume(), output);
  }

  // optional .up.skill_levelup _skill_levelup = 14;
  if (has__skill_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_skill_levelup(), output);
  }

  // optional .up.sell_item _sell_item = 15;
  if (has__sell_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_sell_item(), output);
  }

  // optional .up.fragment_compose _fragment_compose = 16;
  if (has__fragment_compose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_fragment_compose(), output);
  }

  // optional .up.hero_equip_upgrade _hero_equip_upgrade = 17;
  if (has__hero_equip_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_hero_equip_upgrade(), output);
  }

  // optional .up.trigger_task _trigger_task = 18;
  if (has__trigger_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_trigger_task(), output);
  }

  // optional .up.require_rewards _require_rewards = 19;
  if (has__require_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_require_rewards(), output);
  }

  // optional .up.trigger_job _trigger_job = 20;
  if (has__trigger_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_trigger_job(), output);
  }

  // optional .up.job_rewards _job_rewards = 21;
  if (has__job_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_job_rewards(), output);
  }

  // optional .up.reset_elite _reset_elite = 22;
  if (has__reset_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_reset_elite(), output);
  }

  // optional .up.sweep_stage _sweep_stage = 23;
  if (has__sweep_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_sweep_stage(), output);
  }

  // optional .up.buy_vitality _buy_vitality = 24;
  if (has__buy_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_buy_vitality(), output);
  }

  // optional .up.buy_skill_stren_point _buy_skill_stren_point = 25;
  if (has__buy_skill_stren_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_buy_skill_stren_point(), output);
  }

  // optional .up.tavern_draw _tavern_draw = 26;
  if (has__tavern_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_tavern_draw(), output);
  }

  // optional .up.query_data _query_data = 27;
  if (has__query_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_query_data(), output);
  }

  // optional .up.hero_evolve _hero_evolve = 28;
  if (has__hero_evolve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_hero_evolve(), output);
  }

  // optional .up.enter_act_stage _enter_act_stage = 29;
  if (has__enter_act_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_enter_act_stage(), output);
  }

  // optional .up.sync_vitality _sync_vitality = 30;
  if (has__sync_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_sync_vitality(), output);
  }

  // optional .up.suspend_report _suspend_report = 31;
  if (has__suspend_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_suspend_report(), output);
  }

  // optional .up.tutorial _tutorial = 32;
  if (has__tutorial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_tutorial(), output);
  }

  // optional .up.ladder _ladder = 33;
  if (has__ladder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_ladder(), output);
  }

  // optional .up.set_name _set_name = 34;
  if (has__set_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_set_name(), output);
  }

  // optional .up.midas _midas = 35;
  if (has__midas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_midas(), output);
  }

  // optional .up.open_shop _open_shop = 36;
  if (has__open_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_open_shop(), output);
  }

  // optional .up.charge _charge = 37;
  if (has__charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_charge(), output);
  }

  // optional .up.sdk_login _sdk_login = 38;
  if (has__sdk_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->_sdk_login(), output);
  }

  // optional .up.set_avatar _set_avatar = 39;
  if (has__set_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->_set_avatar(), output);
  }

  // optional .up.ask_daily_login _ask_daily_login = 40;
  if (has__ask_daily_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_ask_daily_login(), output);
  }

  // optional .up.tbc _tbc = 41;
  if (has__tbc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_tbc(), output);
  }

  // optional .up.get_maillist _get_maillist = 42;
  if (has__get_maillist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->_get_maillist(), output);
  }

  // optional .up.read_mail _read_mail = 43;
  if (has__read_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->_read_mail(), output);
  }

  // optional .up.get_svr_time _get_svr_time = 44;
  if (has__get_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->_get_svr_time(), output);
  }

  // optional .up.get_vip_gift _get_vip_gift = 45;
  if (has__get_vip_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->_get_vip_gift(), output);
  }

  // optional string _important_data_md5 = 46;
  if (has__important_data_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_important_data_md5().data(), this->_important_data_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->_important_data_md5(), output);
  }

  // optional .up.chat _chat = 47;
  if (has__chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->_chat(), output);
  }

  // optional .up.cdkey_gift _cdkey_gift = 48;
  if (has__cdkey_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->_cdkey_gift(), output);
  }

  // optional .up.guild _guild = 49;
  if (has__guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->_guild(), output);
  }

  // optional .up.ask_magicsoul _ask_magicsoul = 50;
  if (has__ask_magicsoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_ask_magicsoul(), output);
  }

  // optional .up.ask_activity_info _ask_activity_info = 51;
  if (has__ask_activity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_ask_activity_info(), output);
  }

  // optional .up.excavate _excavate = 52;
  if (has__excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->_excavate(), output);
  }

  // optional .up.push_notify _push_notify = 53;
  if (has__push_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->_push_notify(), output);
  }

  // optional .up.system_setting _system_setting = 54;
  if (has__system_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->_system_setting(), output);
  }

  // optional .up.query_split_data _query_split_data = 55;
  if (has__query_split_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->_query_split_data(), output);
  }

  // optional .up.query_split_return _query_split_return = 56;
  if (has__query_split_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->_query_split_return(), output);
  }

  // optional .up.split_hero _split_hero = 57;
  if (has__split_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->_split_hero(), output);
  }

  // optional .up.worldcup _worldcup = 58;
  if (has__worldcup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->_worldcup(), output);
  }

  // optional .up.report_battle _report_battle = 59;
  if (has__report_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->_report_battle(), output);
  }

  // optional .up.query_replay _query_replay = 60;
  if (has__query_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->_query_replay(), output);
  }

  // optional .up.sync_skill_stren _sync_skill_stren = 61;
  if (has__sync_skill_stren()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->_sync_skill_stren(), output);
  }

  // optional .up.query_ranklist _query_ranklist = 62;
  if (has__query_ranklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->_query_ranklist(), output);
  }

  // optional .up.change_server _change_server = 63;
  if (has__change_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->_change_server(), output);
  }

  // optional .up.require_arousal _require_arousal = 64;
  if (has__require_arousal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->_require_arousal(), output);
  }

  // optional .up.change_task_status _change_task_status = 65;
  if (has__change_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->_change_task_status(), output);
  }

  // optional .up.request_guild_log _request_guild_log = 66;
  if (has__request_guild_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->_request_guild_log(), output);
  }

  // optional .up.query_act_stage _query_act_stage = 67;
  if (has__query_act_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->_query_act_stage(), output);
  }

  // optional .up.request_upgrade_arousal_level _request_upgrade_arousal_level = 68;
  if (has__request_upgrade_arousal_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->_request_upgrade_arousal_level(), output);
  }

  // optional .up.activity_info _activity_info = 69;
  if (has__activity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->_activity_info(), output);
  }

  // optional .up.activity_lotto_info _activity_lotto_info = 70;
  if (has__activity_lotto_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->_activity_lotto_info(), output);
  }

  // optional .up.activity_lotto_reward _activity_lotto_reward = 71;
  if (has__activity_lotto_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->_activity_lotto_reward(), output);
  }

  // optional .up.activity_bigpackage_info _activity_bigpackage_info = 72;
  if (has__activity_bigpackage_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->_activity_bigpackage_info(), output);
  }

  // optional .up.activity_bigpackage_reward_info _activity_bigpackage_reward_info = 73;
  if (has__activity_bigpackage_reward_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->_activity_bigpackage_reward_info(), output);
  }

  // optional .up.activity_bigpackage_reset _activity_bigpackage_reset = 74;
  if (has__activity_bigpackage_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->_activity_bigpackage_reset(), output);
  }

  // optional .up.fb_attention _fb_attention = 300;
  if (has__fb_attention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->_fb_attention(), output);
  }

  // optional .up.dot_info _dot_info = 301;
  if (has__dot_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->_dot_info(), output);
  }

  // optional .up.continue_pay _continue_pay = 302;
  if (has__continue_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->_continue_pay(), output);
  }

  // optional .up.recharge_rebate _recharge_rebate = 303;
  if (has__recharge_rebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->_recharge_rebate(), output);
  }

  // optional .up.every_day_happy _every_day_happy = 304;
  if (has__every_day_happy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->_every_day_happy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* up_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _repeat = 1;
  if (has__repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_repeat(), target);
  }

  // optional uint32 _user_id = 2;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_user_id(), target);
  }

  // optional .up.login _login = 3;
  if (has__login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_login(), target);
  }

  // optional .up.request_userinfo _request_userinfo = 4;
  if (has__request_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_request_userinfo(), target);
  }

  // optional .up.enter_stage _enter_stage = 5;
  if (has__enter_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_enter_stage(), target);
  }

  // optional .up.exit_stage _exit_stage = 6;
  if (has__exit_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_exit_stage(), target);
  }

  // optional .up.gm_cmd _gm_cmd = 7;
  if (has__gm_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_gm_cmd(), target);
  }

  // optional .up.hero_upgrade _hero_upgrade = 8;
  if (has__hero_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_hero_upgrade(), target);
  }

  // optional .up.equip_synthesis _equip_synthesis = 9;
  if (has__equip_synthesis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_equip_synthesis(), target);
  }

  // optional .up.wear_equip _wear_equip = 10;
  if (has__wear_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_wear_equip(), target);
  }

  // optional .up.consume_item _consume_item = 11;
  if (has__consume_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_consume_item(), target);
  }

  // optional .up.shop_refresh _shop_refresh = 12;
  if (has__shop_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_shop_refresh(), target);
  }

  // optional .up.shop_consume _shop_consume = 13;
  if (has__shop_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_shop_consume(), target);
  }

  // optional .up.skill_levelup _skill_levelup = 14;
  if (has__skill_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->_skill_levelup(), target);
  }

  // optional .up.sell_item _sell_item = 15;
  if (has__sell_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_sell_item(), target);
  }

  // optional .up.fragment_compose _fragment_compose = 16;
  if (has__fragment_compose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_fragment_compose(), target);
  }

  // optional .up.hero_equip_upgrade _hero_equip_upgrade = 17;
  if (has__hero_equip_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->_hero_equip_upgrade(), target);
  }

  // optional .up.trigger_task _trigger_task = 18;
  if (has__trigger_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->_trigger_task(), target);
  }

  // optional .up.require_rewards _require_rewards = 19;
  if (has__require_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->_require_rewards(), target);
  }

  // optional .up.trigger_job _trigger_job = 20;
  if (has__trigger_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->_trigger_job(), target);
  }

  // optional .up.job_rewards _job_rewards = 21;
  if (has__job_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->_job_rewards(), target);
  }

  // optional .up.reset_elite _reset_elite = 22;
  if (has__reset_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->_reset_elite(), target);
  }

  // optional .up.sweep_stage _sweep_stage = 23;
  if (has__sweep_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->_sweep_stage(), target);
  }

  // optional .up.buy_vitality _buy_vitality = 24;
  if (has__buy_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->_buy_vitality(), target);
  }

  // optional .up.buy_skill_stren_point _buy_skill_stren_point = 25;
  if (has__buy_skill_stren_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->_buy_skill_stren_point(), target);
  }

  // optional .up.tavern_draw _tavern_draw = 26;
  if (has__tavern_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->_tavern_draw(), target);
  }

  // optional .up.query_data _query_data = 27;
  if (has__query_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->_query_data(), target);
  }

  // optional .up.hero_evolve _hero_evolve = 28;
  if (has__hero_evolve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->_hero_evolve(), target);
  }

  // optional .up.enter_act_stage _enter_act_stage = 29;
  if (has__enter_act_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->_enter_act_stage(), target);
  }

  // optional .up.sync_vitality _sync_vitality = 30;
  if (has__sync_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->_sync_vitality(), target);
  }

  // optional .up.suspend_report _suspend_report = 31;
  if (has__suspend_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->_suspend_report(), target);
  }

  // optional .up.tutorial _tutorial = 32;
  if (has__tutorial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->_tutorial(), target);
  }

  // optional .up.ladder _ladder = 33;
  if (has__ladder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->_ladder(), target);
  }

  // optional .up.set_name _set_name = 34;
  if (has__set_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->_set_name(), target);
  }

  // optional .up.midas _midas = 35;
  if (has__midas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->_midas(), target);
  }

  // optional .up.open_shop _open_shop = 36;
  if (has__open_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->_open_shop(), target);
  }

  // optional .up.charge _charge = 37;
  if (has__charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->_charge(), target);
  }

  // optional .up.sdk_login _sdk_login = 38;
  if (has__sdk_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->_sdk_login(), target);
  }

  // optional .up.set_avatar _set_avatar = 39;
  if (has__set_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->_set_avatar(), target);
  }

  // optional .up.ask_daily_login _ask_daily_login = 40;
  if (has__ask_daily_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->_ask_daily_login(), target);
  }

  // optional .up.tbc _tbc = 41;
  if (has__tbc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->_tbc(), target);
  }

  // optional .up.get_maillist _get_maillist = 42;
  if (has__get_maillist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->_get_maillist(), target);
  }

  // optional .up.read_mail _read_mail = 43;
  if (has__read_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->_read_mail(), target);
  }

  // optional .up.get_svr_time _get_svr_time = 44;
  if (has__get_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->_get_svr_time(), target);
  }

  // optional .up.get_vip_gift _get_vip_gift = 45;
  if (has__get_vip_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->_get_vip_gift(), target);
  }

  // optional string _important_data_md5 = 46;
  if (has__important_data_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_important_data_md5().data(), this->_important_data_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->_important_data_md5(), target);
  }

  // optional .up.chat _chat = 47;
  if (has__chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->_chat(), target);
  }

  // optional .up.cdkey_gift _cdkey_gift = 48;
  if (has__cdkey_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->_cdkey_gift(), target);
  }

  // optional .up.guild _guild = 49;
  if (has__guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->_guild(), target);
  }

  // optional .up.ask_magicsoul _ask_magicsoul = 50;
  if (has__ask_magicsoul()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->_ask_magicsoul(), target);
  }

  // optional .up.ask_activity_info _ask_activity_info = 51;
  if (has__ask_activity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->_ask_activity_info(), target);
  }

  // optional .up.excavate _excavate = 52;
  if (has__excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->_excavate(), target);
  }

  // optional .up.push_notify _push_notify = 53;
  if (has__push_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->_push_notify(), target);
  }

  // optional .up.system_setting _system_setting = 54;
  if (has__system_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->_system_setting(), target);
  }

  // optional .up.query_split_data _query_split_data = 55;
  if (has__query_split_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->_query_split_data(), target);
  }

  // optional .up.query_split_return _query_split_return = 56;
  if (has__query_split_return()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->_query_split_return(), target);
  }

  // optional .up.split_hero _split_hero = 57;
  if (has__split_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->_split_hero(), target);
  }

  // optional .up.worldcup _worldcup = 58;
  if (has__worldcup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->_worldcup(), target);
  }

  // optional .up.report_battle _report_battle = 59;
  if (has__report_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->_report_battle(), target);
  }

  // optional .up.query_replay _query_replay = 60;
  if (has__query_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->_query_replay(), target);
  }

  // optional .up.sync_skill_stren _sync_skill_stren = 61;
  if (has__sync_skill_stren()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->_sync_skill_stren(), target);
  }

  // optional .up.query_ranklist _query_ranklist = 62;
  if (has__query_ranklist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->_query_ranklist(), target);
  }

  // optional .up.change_server _change_server = 63;
  if (has__change_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->_change_server(), target);
  }

  // optional .up.require_arousal _require_arousal = 64;
  if (has__require_arousal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->_require_arousal(), target);
  }

  // optional .up.change_task_status _change_task_status = 65;
  if (has__change_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->_change_task_status(), target);
  }

  // optional .up.request_guild_log _request_guild_log = 66;
  if (has__request_guild_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->_request_guild_log(), target);
  }

  // optional .up.query_act_stage _query_act_stage = 67;
  if (has__query_act_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->_query_act_stage(), target);
  }

  // optional .up.request_upgrade_arousal_level _request_upgrade_arousal_level = 68;
  if (has__request_upgrade_arousal_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->_request_upgrade_arousal_level(), target);
  }

  // optional .up.activity_info _activity_info = 69;
  if (has__activity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->_activity_info(), target);
  }

  // optional .up.activity_lotto_info _activity_lotto_info = 70;
  if (has__activity_lotto_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->_activity_lotto_info(), target);
  }

  // optional .up.activity_lotto_reward _activity_lotto_reward = 71;
  if (has__activity_lotto_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->_activity_lotto_reward(), target);
  }

  // optional .up.activity_bigpackage_info _activity_bigpackage_info = 72;
  if (has__activity_bigpackage_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->_activity_bigpackage_info(), target);
  }

  // optional .up.activity_bigpackage_reward_info _activity_bigpackage_reward_info = 73;
  if (has__activity_bigpackage_reward_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->_activity_bigpackage_reward_info(), target);
  }

  // optional .up.activity_bigpackage_reset _activity_bigpackage_reset = 74;
  if (has__activity_bigpackage_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->_activity_bigpackage_reset(), target);
  }

  // optional .up.fb_attention _fb_attention = 300;
  if (has__fb_attention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->_fb_attention(), target);
  }

  // optional .up.dot_info _dot_info = 301;
  if (has__dot_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->_dot_info(), target);
  }

  // optional .up.continue_pay _continue_pay = 302;
  if (has__continue_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->_continue_pay(), target);
  }

  // optional .up.recharge_rebate _recharge_rebate = 303;
  if (has__recharge_rebate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->_recharge_rebate(), target);
  }

  // optional .up.every_day_happy _every_day_happy = 304;
  if (has__every_day_happy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->_every_day_happy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int up_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _repeat = 1;
    if (has__repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_repeat());
    }

    // optional uint32 _user_id = 2;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

    // optional .up.login _login = 3;
    if (has__login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_login());
    }

    // optional .up.request_userinfo _request_userinfo = 4;
    if (has__request_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request_userinfo());
    }

    // optional .up.enter_stage _enter_stage = 5;
    if (has__enter_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_enter_stage());
    }

    // optional .up.exit_stage _exit_stage = 6;
    if (has__exit_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_exit_stage());
    }

    // optional .up.gm_cmd _gm_cmd = 7;
    if (has__gm_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_gm_cmd());
    }

    // optional .up.hero_upgrade _hero_upgrade = 8;
    if (has__hero_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_upgrade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .up.equip_synthesis _equip_synthesis = 9;
    if (has__equip_synthesis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_equip_synthesis());
    }

    // optional .up.wear_equip _wear_equip = 10;
    if (has__wear_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_wear_equip());
    }

    // optional .up.consume_item _consume_item = 11;
    if (has__consume_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_consume_item());
    }

    // optional .up.shop_refresh _shop_refresh = 12;
    if (has__shop_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop_refresh());
    }

    // optional .up.shop_consume _shop_consume = 13;
    if (has__shop_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_shop_consume());
    }

    // optional .up.skill_levelup _skill_levelup = 14;
    if (has__skill_levelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_skill_levelup());
    }

    // optional .up.sell_item _sell_item = 15;
    if (has__sell_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sell_item());
    }

    // optional .up.fragment_compose _fragment_compose = 16;
    if (has__fragment_compose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fragment_compose());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .up.hero_equip_upgrade _hero_equip_upgrade = 17;
    if (has__hero_equip_upgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_equip_upgrade());
    }

    // optional .up.trigger_task _trigger_task = 18;
    if (has__trigger_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_trigger_task());
    }

    // optional .up.require_rewards _require_rewards = 19;
    if (has__require_rewards()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_require_rewards());
    }

    // optional .up.trigger_job _trigger_job = 20;
    if (has__trigger_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_trigger_job());
    }

    // optional .up.job_rewards _job_rewards = 21;
    if (has__job_rewards()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_job_rewards());
    }

    // optional .up.reset_elite _reset_elite = 22;
    if (has__reset_elite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reset_elite());
    }

    // optional .up.sweep_stage _sweep_stage = 23;
    if (has__sweep_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sweep_stage());
    }

    // optional .up.buy_vitality _buy_vitality = 24;
    if (has__buy_vitality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_buy_vitality());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .up.buy_skill_stren_point _buy_skill_stren_point = 25;
    if (has__buy_skill_stren_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_buy_skill_stren_point());
    }

    // optional .up.tavern_draw _tavern_draw = 26;
    if (has__tavern_draw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tavern_draw());
    }

    // optional .up.query_data _query_data = 27;
    if (has__query_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_data());
    }

    // optional .up.hero_evolve _hero_evolve = 28;
    if (has__hero_evolve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hero_evolve());
    }

    // optional .up.enter_act_stage _enter_act_stage = 29;
    if (has__enter_act_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_enter_act_stage());
    }

    // optional .up.sync_vitality _sync_vitality = 30;
    if (has__sync_vitality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sync_vitality());
    }

    // optional .up.suspend_report _suspend_report = 31;
    if (has__suspend_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_suspend_report());
    }

    // optional .up.tutorial _tutorial = 32;
    if (has__tutorial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tutorial());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .up.ladder _ladder = 33;
    if (has__ladder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ladder());
    }

    // optional .up.set_name _set_name = 34;
    if (has__set_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_name());
    }

    // optional .up.midas _midas = 35;
    if (has__midas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_midas());
    }

    // optional .up.open_shop _open_shop = 36;
    if (has__open_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_shop());
    }

    // optional .up.charge _charge = 37;
    if (has__charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_charge());
    }

    // optional .up.sdk_login _sdk_login = 38;
    if (has__sdk_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sdk_login());
    }

    // optional .up.set_avatar _set_avatar = 39;
    if (has__set_avatar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_avatar());
    }

    // optional .up.ask_daily_login _ask_daily_login = 40;
    if (has__ask_daily_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_daily_login());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .up.tbc _tbc = 41;
    if (has__tbc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_tbc());
    }

    // optional .up.get_maillist _get_maillist = 42;
    if (has__get_maillist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_get_maillist());
    }

    // optional .up.read_mail _read_mail = 43;
    if (has__read_mail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_read_mail());
    }

    // optional .up.get_svr_time _get_svr_time = 44;
    if (has__get_svr_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_get_svr_time());
    }

    // optional .up.get_vip_gift _get_vip_gift = 45;
    if (has__get_vip_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_get_vip_gift());
    }

    // optional string _important_data_md5 = 46;
    if (has__important_data_md5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_important_data_md5());
    }

    // optional .up.chat _chat = 47;
    if (has__chat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat());
    }

    // optional .up.cdkey_gift _cdkey_gift = 48;
    if (has__cdkey_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_cdkey_gift());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .up.guild _guild = 49;
    if (has__guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild());
    }

    // optional .up.ask_magicsoul _ask_magicsoul = 50;
    if (has__ask_magicsoul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_magicsoul());
    }

    // optional .up.ask_activity_info _ask_activity_info = 51;
    if (has__ask_activity_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_ask_activity_info());
    }

    // optional .up.excavate _excavate = 52;
    if (has__excavate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate());
    }

    // optional .up.push_notify _push_notify = 53;
    if (has__push_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_push_notify());
    }

    // optional .up.system_setting _system_setting = 54;
    if (has__system_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_system_setting());
    }

    // optional .up.query_split_data _query_split_data = 55;
    if (has__query_split_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_split_data());
    }

    // optional .up.query_split_return _query_split_return = 56;
    if (has__query_split_return()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_split_return());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .up.split_hero _split_hero = 57;
    if (has__split_hero()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_split_hero());
    }

    // optional .up.worldcup _worldcup = 58;
    if (has__worldcup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup());
    }

    // optional .up.report_battle _report_battle = 59;
    if (has__report_battle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_report_battle());
    }

    // optional .up.query_replay _query_replay = 60;
    if (has__query_replay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_replay());
    }

    // optional .up.sync_skill_stren _sync_skill_stren = 61;
    if (has__sync_skill_stren()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_sync_skill_stren());
    }

    // optional .up.query_ranklist _query_ranklist = 62;
    if (has__query_ranklist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_ranklist());
    }

    // optional .up.change_server _change_server = 63;
    if (has__change_server()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_change_server());
    }

    // optional .up.require_arousal _require_arousal = 64;
    if (has__require_arousal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_require_arousal());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .up.change_task_status _change_task_status = 65;
    if (has__change_task_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_change_task_status());
    }

    // optional .up.request_guild_log _request_guild_log = 66;
    if (has__request_guild_log()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request_guild_log());
    }

    // optional .up.query_act_stage _query_act_stage = 67;
    if (has__query_act_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_act_stage());
    }

    // optional .up.request_upgrade_arousal_level _request_upgrade_arousal_level = 68;
    if (has__request_upgrade_arousal_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request_upgrade_arousal_level());
    }

    // optional .up.fb_attention _fb_attention = 300;
    if (has__fb_attention()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fb_attention());
    }

    // optional .up.dot_info _dot_info = 301;
    if (has__dot_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dot_info());
    }

    // optional .up.activity_info _activity_info = 69;
    if (has__activity_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_info());
    }

    // optional .up.activity_lotto_info _activity_lotto_info = 70;
    if (has__activity_lotto_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_lotto_info());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .up.activity_lotto_reward _activity_lotto_reward = 71;
    if (has__activity_lotto_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_lotto_reward());
    }

    // optional .up.activity_bigpackage_info _activity_bigpackage_info = 72;
    if (has__activity_bigpackage_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_info());
    }

    // optional .up.activity_bigpackage_reward_info _activity_bigpackage_reward_info = 73;
    if (has__activity_bigpackage_reward_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_reward_info());
    }

    // optional .up.activity_bigpackage_reset _activity_bigpackage_reset = 74;
    if (has__activity_bigpackage_reset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_activity_bigpackage_reset());
    }

    // optional .up.continue_pay _continue_pay = 302;
    if (has__continue_pay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_continue_pay());
    }

    // optional .up.recharge_rebate _recharge_rebate = 303;
    if (has__recharge_rebate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_recharge_rebate());
    }

    // optional .up.every_day_happy _every_day_happy = 304;
    if (has__every_day_happy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_every_day_happy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void up_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const up_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const up_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void up_msg::MergeFrom(const up_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__repeat()) {
      set__repeat(from._repeat());
    }
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
    if (from.has__login()) {
      mutable__login()->::up::login::MergeFrom(from._login());
    }
    if (from.has__request_userinfo()) {
      mutable__request_userinfo()->::up::request_userinfo::MergeFrom(from._request_userinfo());
    }
    if (from.has__enter_stage()) {
      mutable__enter_stage()->::up::enter_stage::MergeFrom(from._enter_stage());
    }
    if (from.has__exit_stage()) {
      mutable__exit_stage()->::up::exit_stage::MergeFrom(from._exit_stage());
    }
    if (from.has__gm_cmd()) {
      mutable__gm_cmd()->::up::gm_cmd::MergeFrom(from._gm_cmd());
    }
    if (from.has__hero_upgrade()) {
      mutable__hero_upgrade()->::up::hero_upgrade::MergeFrom(from._hero_upgrade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__equip_synthesis()) {
      mutable__equip_synthesis()->::up::equip_synthesis::MergeFrom(from._equip_synthesis());
    }
    if (from.has__wear_equip()) {
      mutable__wear_equip()->::up::wear_equip::MergeFrom(from._wear_equip());
    }
    if (from.has__consume_item()) {
      mutable__consume_item()->::up::consume_item::MergeFrom(from._consume_item());
    }
    if (from.has__shop_refresh()) {
      mutable__shop_refresh()->::up::shop_refresh::MergeFrom(from._shop_refresh());
    }
    if (from.has__shop_consume()) {
      mutable__shop_consume()->::up::shop_consume::MergeFrom(from._shop_consume());
    }
    if (from.has__skill_levelup()) {
      mutable__skill_levelup()->::up::skill_levelup::MergeFrom(from._skill_levelup());
    }
    if (from.has__sell_item()) {
      mutable__sell_item()->::up::sell_item::MergeFrom(from._sell_item());
    }
    if (from.has__fragment_compose()) {
      mutable__fragment_compose()->::up::fragment_compose::MergeFrom(from._fragment_compose());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has__hero_equip_upgrade()) {
      mutable__hero_equip_upgrade()->::up::hero_equip_upgrade::MergeFrom(from._hero_equip_upgrade());
    }
    if (from.has__trigger_task()) {
      mutable__trigger_task()->::up::trigger_task::MergeFrom(from._trigger_task());
    }
    if (from.has__require_rewards()) {
      mutable__require_rewards()->::up::require_rewards::MergeFrom(from._require_rewards());
    }
    if (from.has__trigger_job()) {
      mutable__trigger_job()->::up::trigger_job::MergeFrom(from._trigger_job());
    }
    if (from.has__job_rewards()) {
      mutable__job_rewards()->::up::job_rewards::MergeFrom(from._job_rewards());
    }
    if (from.has__reset_elite()) {
      mutable__reset_elite()->::up::reset_elite::MergeFrom(from._reset_elite());
    }
    if (from.has__sweep_stage()) {
      mutable__sweep_stage()->::up::sweep_stage::MergeFrom(from._sweep_stage());
    }
    if (from.has__buy_vitality()) {
      mutable__buy_vitality()->::up::buy_vitality::MergeFrom(from._buy_vitality());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has__buy_skill_stren_point()) {
      mutable__buy_skill_stren_point()->::up::buy_skill_stren_point::MergeFrom(from._buy_skill_stren_point());
    }
    if (from.has__tavern_draw()) {
      mutable__tavern_draw()->::up::tavern_draw::MergeFrom(from._tavern_draw());
    }
    if (from.has__query_data()) {
      mutable__query_data()->::up::query_data::MergeFrom(from._query_data());
    }
    if (from.has__hero_evolve()) {
      mutable__hero_evolve()->::up::hero_evolve::MergeFrom(from._hero_evolve());
    }
    if (from.has__enter_act_stage()) {
      mutable__enter_act_stage()->::up::enter_act_stage::MergeFrom(from._enter_act_stage());
    }
    if (from.has__sync_vitality()) {
      mutable__sync_vitality()->::up::sync_vitality::MergeFrom(from._sync_vitality());
    }
    if (from.has__suspend_report()) {
      mutable__suspend_report()->::up::suspend_report::MergeFrom(from._suspend_report());
    }
    if (from.has__tutorial()) {
      mutable__tutorial()->::up::tutorial::MergeFrom(from._tutorial());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has__ladder()) {
      mutable__ladder()->::up::ladder::MergeFrom(from._ladder());
    }
    if (from.has__set_name()) {
      mutable__set_name()->::up::set_name::MergeFrom(from._set_name());
    }
    if (from.has__midas()) {
      mutable__midas()->::up::midas::MergeFrom(from._midas());
    }
    if (from.has__open_shop()) {
      mutable__open_shop()->::up::open_shop::MergeFrom(from._open_shop());
    }
    if (from.has__charge()) {
      mutable__charge()->::up::charge::MergeFrom(from._charge());
    }
    if (from.has__sdk_login()) {
      mutable__sdk_login()->::up::sdk_login::MergeFrom(from._sdk_login());
    }
    if (from.has__set_avatar()) {
      mutable__set_avatar()->::up::set_avatar::MergeFrom(from._set_avatar());
    }
    if (from.has__ask_daily_login()) {
      mutable__ask_daily_login()->::up::ask_daily_login::MergeFrom(from._ask_daily_login());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has__tbc()) {
      mutable__tbc()->::up::tbc::MergeFrom(from._tbc());
    }
    if (from.has__get_maillist()) {
      mutable__get_maillist()->::up::get_maillist::MergeFrom(from._get_maillist());
    }
    if (from.has__read_mail()) {
      mutable__read_mail()->::up::read_mail::MergeFrom(from._read_mail());
    }
    if (from.has__get_svr_time()) {
      mutable__get_svr_time()->::up::get_svr_time::MergeFrom(from._get_svr_time());
    }
    if (from.has__get_vip_gift()) {
      mutable__get_vip_gift()->::up::get_vip_gift::MergeFrom(from._get_vip_gift());
    }
    if (from.has__important_data_md5()) {
      set__important_data_md5(from._important_data_md5());
    }
    if (from.has__chat()) {
      mutable__chat()->::up::chat::MergeFrom(from._chat());
    }
    if (from.has__cdkey_gift()) {
      mutable__cdkey_gift()->::up::cdkey_gift::MergeFrom(from._cdkey_gift());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has__guild()) {
      mutable__guild()->::up::guild::MergeFrom(from._guild());
    }
    if (from.has__ask_magicsoul()) {
      mutable__ask_magicsoul()->::up::ask_magicsoul::MergeFrom(from._ask_magicsoul());
    }
    if (from.has__ask_activity_info()) {
      mutable__ask_activity_info()->::up::ask_activity_info::MergeFrom(from._ask_activity_info());
    }
    if (from.has__excavate()) {
      mutable__excavate()->::up::excavate::MergeFrom(from._excavate());
    }
    if (from.has__push_notify()) {
      mutable__push_notify()->::up::push_notify::MergeFrom(from._push_notify());
    }
    if (from.has__system_setting()) {
      mutable__system_setting()->::up::system_setting::MergeFrom(from._system_setting());
    }
    if (from.has__query_split_data()) {
      mutable__query_split_data()->::up::query_split_data::MergeFrom(from._query_split_data());
    }
    if (from.has__query_split_return()) {
      mutable__query_split_return()->::up::query_split_return::MergeFrom(from._query_split_return());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has__split_hero()) {
      mutable__split_hero()->::up::split_hero::MergeFrom(from._split_hero());
    }
    if (from.has__worldcup()) {
      mutable__worldcup()->::up::worldcup::MergeFrom(from._worldcup());
    }
    if (from.has__report_battle()) {
      mutable__report_battle()->::up::report_battle::MergeFrom(from._report_battle());
    }
    if (from.has__query_replay()) {
      mutable__query_replay()->::up::query_replay::MergeFrom(from._query_replay());
    }
    if (from.has__sync_skill_stren()) {
      mutable__sync_skill_stren()->::up::sync_skill_stren::MergeFrom(from._sync_skill_stren());
    }
    if (from.has__query_ranklist()) {
      mutable__query_ranklist()->::up::query_ranklist::MergeFrom(from._query_ranklist());
    }
    if (from.has__change_server()) {
      mutable__change_server()->::up::change_server::MergeFrom(from._change_server());
    }
    if (from.has__require_arousal()) {
      mutable__require_arousal()->::up::require_arousal::MergeFrom(from._require_arousal());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has__change_task_status()) {
      mutable__change_task_status()->::up::change_task_status::MergeFrom(from._change_task_status());
    }
    if (from.has__request_guild_log()) {
      mutable__request_guild_log()->::up::request_guild_log::MergeFrom(from._request_guild_log());
    }
    if (from.has__query_act_stage()) {
      mutable__query_act_stage()->::up::query_act_stage::MergeFrom(from._query_act_stage());
    }
    if (from.has__request_upgrade_arousal_level()) {
      mutable__request_upgrade_arousal_level()->::up::request_upgrade_arousal_level::MergeFrom(from._request_upgrade_arousal_level());
    }
    if (from.has__fb_attention()) {
      mutable__fb_attention()->::up::fb_attention::MergeFrom(from._fb_attention());
    }
    if (from.has__dot_info()) {
      mutable__dot_info()->::up::dot_info::MergeFrom(from._dot_info());
    }
    if (from.has__activity_info()) {
      mutable__activity_info()->::up::activity_info::MergeFrom(from._activity_info());
    }
    if (from.has__activity_lotto_info()) {
      mutable__activity_lotto_info()->::up::activity_lotto_info::MergeFrom(from._activity_lotto_info());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has__activity_lotto_reward()) {
      mutable__activity_lotto_reward()->::up::activity_lotto_reward::MergeFrom(from._activity_lotto_reward());
    }
    if (from.has__activity_bigpackage_info()) {
      mutable__activity_bigpackage_info()->::up::activity_bigpackage_info::MergeFrom(from._activity_bigpackage_info());
    }
    if (from.has__activity_bigpackage_reward_info()) {
      mutable__activity_bigpackage_reward_info()->::up::activity_bigpackage_reward_info::MergeFrom(from._activity_bigpackage_reward_info());
    }
    if (from.has__activity_bigpackage_reset()) {
      mutable__activity_bigpackage_reset()->::up::activity_bigpackage_reset::MergeFrom(from._activity_bigpackage_reset());
    }
    if (from.has__continue_pay()) {
      mutable__continue_pay()->::up::continue_pay::MergeFrom(from._continue_pay());
    }
    if (from.has__recharge_rebate()) {
      mutable__recharge_rebate()->::up::recharge_rebate::MergeFrom(from._recharge_rebate());
    }
    if (from.has__every_day_happy()) {
      mutable__every_day_happy()->::up::every_day_happy::MergeFrom(from._every_day_happy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void up_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void up_msg::CopyFrom(const up_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool up_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__enter_stage()) {
    if (!this->_enter_stage().IsInitialized()) return false;
  }
  if (has__exit_stage()) {
    if (!this->_exit_stage().IsInitialized()) return false;
  }
  if (has__gm_cmd()) {
    if (!this->_gm_cmd().IsInitialized()) return false;
  }
  if (has__hero_upgrade()) {
    if (!this->_hero_upgrade().IsInitialized()) return false;
  }
  if (has__equip_synthesis()) {
    if (!this->_equip_synthesis().IsInitialized()) return false;
  }
  if (has__wear_equip()) {
    if (!this->_wear_equip().IsInitialized()) return false;
  }
  if (has__consume_item()) {
    if (!this->_consume_item().IsInitialized()) return false;
  }
  if (has__shop_refresh()) {
    if (!this->_shop_refresh().IsInitialized()) return false;
  }
  if (has__shop_consume()) {
    if (!this->_shop_consume().IsInitialized()) return false;
  }
  if (has__skill_levelup()) {
    if (!this->_skill_levelup().IsInitialized()) return false;
  }
  if (has__fragment_compose()) {
    if (!this->_fragment_compose().IsInitialized()) return false;
  }
  if (has__hero_equip_upgrade()) {
    if (!this->_hero_equip_upgrade().IsInitialized()) return false;
  }
  if (has__require_rewards()) {
    if (!this->_require_rewards().IsInitialized()) return false;
  }
  if (has__job_rewards()) {
    if (!this->_job_rewards().IsInitialized()) return false;
  }
  if (has__reset_elite()) {
    if (!this->_reset_elite().IsInitialized()) return false;
  }
  if (has__sweep_stage()) {
    if (!this->_sweep_stage().IsInitialized()) return false;
  }
  if (has__tavern_draw()) {
    if (!this->_tavern_draw().IsInitialized()) return false;
  }
  if (has__hero_evolve()) {
    if (!this->_hero_evolve().IsInitialized()) return false;
  }
  if (has__enter_act_stage()) {
    if (!this->_enter_act_stage().IsInitialized()) return false;
  }
  if (has__suspend_report()) {
    if (!this->_suspend_report().IsInitialized()) return false;
  }
  if (has__ladder()) {
    if (!this->_ladder().IsInitialized()) return false;
  }
  if (has__set_name()) {
    if (!this->_set_name().IsInitialized()) return false;
  }
  if (has__midas()) {
    if (!this->_midas().IsInitialized()) return false;
  }
  if (has__open_shop()) {
    if (!this->_open_shop().IsInitialized()) return false;
  }
  if (has__charge()) {
    if (!this->_charge().IsInitialized()) return false;
  }
  if (has__sdk_login()) {
    if (!this->_sdk_login().IsInitialized()) return false;
  }
  if (has__set_avatar()) {
    if (!this->_set_avatar().IsInitialized()) return false;
  }
  if (has__ask_daily_login()) {
    if (!this->_ask_daily_login().IsInitialized()) return false;
  }
  if (has__tbc()) {
    if (!this->_tbc().IsInitialized()) return false;
  }
  if (has__read_mail()) {
    if (!this->_read_mail().IsInitialized()) return false;
  }
  if (has__get_vip_gift()) {
    if (!this->_get_vip_gift().IsInitialized()) return false;
  }
  if (has__chat()) {
    if (!this->_chat().IsInitialized()) return false;
  }
  if (has__cdkey_gift()) {
    if (!this->_cdkey_gift().IsInitialized()) return false;
  }
  if (has__guild()) {
    if (!this->_guild().IsInitialized()) return false;
  }
  if (has__excavate()) {
    if (!this->_excavate().IsInitialized()) return false;
  }
  if (has__push_notify()) {
    if (!this->_push_notify().IsInitialized()) return false;
  }
  if (has__system_setting()) {
    if (!this->_system_setting().IsInitialized()) return false;
  }
  if (has__query_split_return()) {
    if (!this->_query_split_return().IsInitialized()) return false;
  }
  if (has__split_hero()) {
    if (!this->_split_hero().IsInitialized()) return false;
  }
  if (has__worldcup()) {
    if (!this->_worldcup().IsInitialized()) return false;
  }
  if (has__report_battle()) {
    if (!this->_report_battle().IsInitialized()) return false;
  }
  if (has__query_replay()) {
    if (!this->_query_replay().IsInitialized()) return false;
  }
  if (has__query_ranklist()) {
    if (!this->_query_ranklist().IsInitialized()) return false;
  }
  if (has__change_server()) {
    if (!this->_change_server().IsInitialized()) return false;
  }
  if (has__require_arousal()) {
    if (!this->_require_arousal().IsInitialized()) return false;
  }
  if (has__change_task_status()) {
    if (!this->_change_task_status().IsInitialized()) return false;
  }
  if (has__fb_attention()) {
    if (!this->_fb_attention().IsInitialized()) return false;
  }
  if (has__dot_info()) {
    if (!this->_dot_info().IsInitialized()) return false;
  }
  if (has__activity_info()) {
    if (!this->_activity_info().IsInitialized()) return false;
  }
  if (has__activity_lotto_info()) {
    if (!this->_activity_lotto_info().IsInitialized()) return false;
  }
  if (has__activity_lotto_reward()) {
    if (!this->_activity_lotto_reward().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_info()) {
    if (!this->_activity_bigpackage_info().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_reward_info()) {
    if (!this->_activity_bigpackage_reward_info().IsInitialized()) return false;
  }
  if (has__activity_bigpackage_reset()) {
    if (!this->_activity_bigpackage_reset().IsInitialized()) return false;
  }
  if (has__continue_pay()) {
    if (!this->_continue_pay().IsInitialized()) return false;
  }
  if (has__recharge_rebate()) {
    if (!this->_recharge_rebate().IsInitialized()) return false;
  }
  if (has__every_day_happy()) {
    if (!this->_every_day_happy().IsInitialized()) return false;
  }
  return true;
}

void up_msg::Swap(up_msg* other) {
  if (other != this) {
    std::swap(_repeat_, other->_repeat_);
    std::swap(_user_id_, other->_user_id_);
    std::swap(_login_, other->_login_);
    std::swap(_request_userinfo_, other->_request_userinfo_);
    std::swap(_enter_stage_, other->_enter_stage_);
    std::swap(_exit_stage_, other->_exit_stage_);
    std::swap(_gm_cmd_, other->_gm_cmd_);
    std::swap(_hero_upgrade_, other->_hero_upgrade_);
    std::swap(_equip_synthesis_, other->_equip_synthesis_);
    std::swap(_wear_equip_, other->_wear_equip_);
    std::swap(_consume_item_, other->_consume_item_);
    std::swap(_shop_refresh_, other->_shop_refresh_);
    std::swap(_shop_consume_, other->_shop_consume_);
    std::swap(_skill_levelup_, other->_skill_levelup_);
    std::swap(_sell_item_, other->_sell_item_);
    std::swap(_fragment_compose_, other->_fragment_compose_);
    std::swap(_hero_equip_upgrade_, other->_hero_equip_upgrade_);
    std::swap(_trigger_task_, other->_trigger_task_);
    std::swap(_require_rewards_, other->_require_rewards_);
    std::swap(_trigger_job_, other->_trigger_job_);
    std::swap(_job_rewards_, other->_job_rewards_);
    std::swap(_reset_elite_, other->_reset_elite_);
    std::swap(_sweep_stage_, other->_sweep_stage_);
    std::swap(_buy_vitality_, other->_buy_vitality_);
    std::swap(_buy_skill_stren_point_, other->_buy_skill_stren_point_);
    std::swap(_tavern_draw_, other->_tavern_draw_);
    std::swap(_query_data_, other->_query_data_);
    std::swap(_hero_evolve_, other->_hero_evolve_);
    std::swap(_enter_act_stage_, other->_enter_act_stage_);
    std::swap(_sync_vitality_, other->_sync_vitality_);
    std::swap(_suspend_report_, other->_suspend_report_);
    std::swap(_tutorial_, other->_tutorial_);
    std::swap(_ladder_, other->_ladder_);
    std::swap(_set_name_, other->_set_name_);
    std::swap(_midas_, other->_midas_);
    std::swap(_open_shop_, other->_open_shop_);
    std::swap(_charge_, other->_charge_);
    std::swap(_sdk_login_, other->_sdk_login_);
    std::swap(_set_avatar_, other->_set_avatar_);
    std::swap(_ask_daily_login_, other->_ask_daily_login_);
    std::swap(_tbc_, other->_tbc_);
    std::swap(_get_maillist_, other->_get_maillist_);
    std::swap(_read_mail_, other->_read_mail_);
    std::swap(_get_svr_time_, other->_get_svr_time_);
    std::swap(_get_vip_gift_, other->_get_vip_gift_);
    std::swap(_important_data_md5_, other->_important_data_md5_);
    std::swap(_chat_, other->_chat_);
    std::swap(_cdkey_gift_, other->_cdkey_gift_);
    std::swap(_guild_, other->_guild_);
    std::swap(_ask_magicsoul_, other->_ask_magicsoul_);
    std::swap(_ask_activity_info_, other->_ask_activity_info_);
    std::swap(_excavate_, other->_excavate_);
    std::swap(_push_notify_, other->_push_notify_);
    std::swap(_system_setting_, other->_system_setting_);
    std::swap(_query_split_data_, other->_query_split_data_);
    std::swap(_query_split_return_, other->_query_split_return_);
    std::swap(_split_hero_, other->_split_hero_);
    std::swap(_worldcup_, other->_worldcup_);
    std::swap(_report_battle_, other->_report_battle_);
    std::swap(_query_replay_, other->_query_replay_);
    std::swap(_sync_skill_stren_, other->_sync_skill_stren_);
    std::swap(_query_ranklist_, other->_query_ranklist_);
    std::swap(_change_server_, other->_change_server_);
    std::swap(_require_arousal_, other->_require_arousal_);
    std::swap(_change_task_status_, other->_change_task_status_);
    std::swap(_request_guild_log_, other->_request_guild_log_);
    std::swap(_query_act_stage_, other->_query_act_stage_);
    std::swap(_request_upgrade_arousal_level_, other->_request_upgrade_arousal_level_);
    std::swap(_fb_attention_, other->_fb_attention_);
    std::swap(_dot_info_, other->_dot_info_);
    std::swap(_activity_info_, other->_activity_info_);
    std::swap(_activity_lotto_info_, other->_activity_lotto_info_);
    std::swap(_activity_lotto_reward_, other->_activity_lotto_reward_);
    std::swap(_activity_bigpackage_info_, other->_activity_bigpackage_info_);
    std::swap(_activity_bigpackage_reward_info_, other->_activity_bigpackage_reward_info_);
    std::swap(_activity_bigpackage_reset_, other->_activity_bigpackage_reset_);
    std::swap(_continue_pay_, other->_continue_pay_);
    std::swap(_recharge_rebate_, other->_recharge_rebate_);
    std::swap(_every_day_happy_, other->_every_day_happy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata up_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = up_msg_descriptor_;
  metadata.reflection = up_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

request_upgrade_arousal_level::request_upgrade_arousal_level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void request_upgrade_arousal_level::InitAsDefaultInstance() {
}

request_upgrade_arousal_level::request_upgrade_arousal_level(const request_upgrade_arousal_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void request_upgrade_arousal_level::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request_upgrade_arousal_level::~request_upgrade_arousal_level() {
  SharedDtor();
}

void request_upgrade_arousal_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request_upgrade_arousal_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_upgrade_arousal_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_upgrade_arousal_level_descriptor_;
}

const request_upgrade_arousal_level& request_upgrade_arousal_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

request_upgrade_arousal_level* request_upgrade_arousal_level::default_instance_ = NULL;

request_upgrade_arousal_level* request_upgrade_arousal_level::New() const {
  return new request_upgrade_arousal_level;
}

void request_upgrade_arousal_level::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request_upgrade_arousal_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void request_upgrade_arousal_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* request_upgrade_arousal_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int request_upgrade_arousal_level::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_upgrade_arousal_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request_upgrade_arousal_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request_upgrade_arousal_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request_upgrade_arousal_level::MergeFrom(const request_upgrade_arousal_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request_upgrade_arousal_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_upgrade_arousal_level::CopyFrom(const request_upgrade_arousal_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_upgrade_arousal_level::IsInitialized() const {

  return true;
}

void request_upgrade_arousal_level::Swap(request_upgrade_arousal_level* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request_upgrade_arousal_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_upgrade_arousal_level_descriptor_;
  metadata.reflection = request_upgrade_arousal_level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int continue_pay::kContinuePayFieldNumber;
#endif  // !_MSC_VER

continue_pay::continue_pay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void continue_pay::InitAsDefaultInstance() {
}

continue_pay::continue_pay(const continue_pay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void continue_pay::SharedCtor() {
  _cached_size_ = 0;
  _continue_pay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

continue_pay::~continue_pay() {
  SharedDtor();
}

void continue_pay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void continue_pay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* continue_pay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return continue_pay_descriptor_;
}

const continue_pay& continue_pay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

continue_pay* continue_pay::default_instance_ = NULL;

continue_pay* continue_pay::New() const {
  return new continue_pay;
}

void continue_pay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _continue_pay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool continue_pay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _continue_pay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_continue_pay_)));
          set_has__continue_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void continue_pay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _continue_pay = 1;
  if (has__continue_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_continue_pay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* continue_pay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _continue_pay = 1;
  if (has__continue_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_continue_pay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int continue_pay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _continue_pay = 1;
    if (has__continue_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_continue_pay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void continue_pay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const continue_pay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const continue_pay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void continue_pay::MergeFrom(const continue_pay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__continue_pay()) {
      set__continue_pay(from._continue_pay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void continue_pay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void continue_pay::CopyFrom(const continue_pay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool continue_pay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void continue_pay::Swap(continue_pay* other) {
  if (other != this) {
    std::swap(_continue_pay_, other->_continue_pay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata continue_pay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = continue_pay_descriptor_;
  metadata.reflection = continue_pay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recharge_rebate::kRechargeRebateFieldNumber;
#endif  // !_MSC_VER

recharge_rebate::recharge_rebate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recharge_rebate::InitAsDefaultInstance() {
}

recharge_rebate::recharge_rebate(const recharge_rebate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recharge_rebate::SharedCtor() {
  _cached_size_ = 0;
  _recharge_rebate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recharge_rebate::~recharge_rebate() {
  SharedDtor();
}

void recharge_rebate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void recharge_rebate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recharge_rebate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recharge_rebate_descriptor_;
}

const recharge_rebate& recharge_rebate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

recharge_rebate* recharge_rebate::default_instance_ = NULL;

recharge_rebate* recharge_rebate::New() const {
  return new recharge_rebate;
}

void recharge_rebate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _recharge_rebate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recharge_rebate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _recharge_rebate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_recharge_rebate_)));
          set_has__recharge_rebate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recharge_rebate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _recharge_rebate = 1;
  if (has__recharge_rebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_recharge_rebate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recharge_rebate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _recharge_rebate = 1;
  if (has__recharge_rebate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_recharge_rebate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recharge_rebate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _recharge_rebate = 1;
    if (has__recharge_rebate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_recharge_rebate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recharge_rebate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recharge_rebate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recharge_rebate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recharge_rebate::MergeFrom(const recharge_rebate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__recharge_rebate()) {
      set__recharge_rebate(from._recharge_rebate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recharge_rebate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_rebate::CopyFrom(const recharge_rebate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_rebate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void recharge_rebate::Swap(recharge_rebate* other) {
  if (other != this) {
    std::swap(_recharge_rebate_, other->_recharge_rebate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recharge_rebate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recharge_rebate_descriptor_;
  metadata.reflection = recharge_rebate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int every_day_happy::kEveryDayHappyFieldNumber;
#endif  // !_MSC_VER

every_day_happy::every_day_happy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void every_day_happy::InitAsDefaultInstance() {
}

every_day_happy::every_day_happy(const every_day_happy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void every_day_happy::SharedCtor() {
  _cached_size_ = 0;
  _every_day_happy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

every_day_happy::~every_day_happy() {
  SharedDtor();
}

void every_day_happy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void every_day_happy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* every_day_happy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return every_day_happy_descriptor_;
}

const every_day_happy& every_day_happy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

every_day_happy* every_day_happy::default_instance_ = NULL;

every_day_happy* every_day_happy::New() const {
  return new every_day_happy;
}

void every_day_happy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _every_day_happy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool every_day_happy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _every_day_happy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_every_day_happy_)));
          set_has__every_day_happy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void every_day_happy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _every_day_happy = 1;
  if (has__every_day_happy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_every_day_happy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* every_day_happy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _every_day_happy = 1;
  if (has__every_day_happy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_every_day_happy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int every_day_happy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _every_day_happy = 1;
    if (has__every_day_happy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_every_day_happy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void every_day_happy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const every_day_happy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const every_day_happy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void every_day_happy::MergeFrom(const every_day_happy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__every_day_happy()) {
      set__every_day_happy(from._every_day_happy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void every_day_happy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void every_day_happy::CopyFrom(const every_day_happy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool every_day_happy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void every_day_happy::Swap(every_day_happy* other) {
  if (other != this) {
    std::swap(_every_day_happy_, other->_every_day_happy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata every_day_happy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = every_day_happy_descriptor_;
  metadata.reflection = every_day_happy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_setting::kRequestFieldNumber;
const int system_setting::kChangeFieldNumber;
#endif  // !_MSC_VER

system_setting::system_setting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_setting::InitAsDefaultInstance() {
  _request_ = const_cast< ::up::system_setting_request*>(&::up::system_setting_request::default_instance());
  _change_ = const_cast< ::up::system_setting_change*>(&::up::system_setting_change::default_instance());
}

system_setting::system_setting(const system_setting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_setting::SharedCtor() {
  _cached_size_ = 0;
  _request_ = NULL;
  _change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting::~system_setting() {
  SharedDtor();
}

void system_setting::SharedDtor() {
  if (this != default_instance_) {
    delete _request_;
    delete _change_;
  }
}

void system_setting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_descriptor_;
}

const system_setting& system_setting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

system_setting* system_setting::default_instance_ = NULL;

system_setting* system_setting::New() const {
  return new system_setting;
}

void system_setting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__request()) {
      if (_request_ != NULL) _request_->::up::system_setting_request::Clear();
    }
    if (has__change()) {
      if (_change_ != NULL) _change_->::up::system_setting_change::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.system_setting_request _request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__change;
        break;
      }

      // optional .up.system_setting_change _change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void system_setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.system_setting_request _request = 1;
  if (has__request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_request(), output);
  }

  // optional .up.system_setting_change _change = 2;
  if (has__change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_setting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.system_setting_request _request = 1;
  if (has__request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_request(), target);
  }

  // optional .up.system_setting_change _change = 2;
  if (has__change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_setting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.system_setting_request _request = 1;
    if (has__request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_request());
    }

    // optional .up.system_setting_change _change = 2;
    if (has__change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting::MergeFrom(const system_setting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__request()) {
      mutable__request()->::up::system_setting_request::MergeFrom(from._request());
    }
    if (from.has__change()) {
      mutable__change()->::up::system_setting_change::MergeFrom(from._change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting::CopyFrom(const system_setting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting::IsInitialized() const {

  if (has__change()) {
    if (!this->_change().IsInitialized()) return false;
  }
  return true;
}

void system_setting::Swap(system_setting* other) {
  if (other != this) {
    std::swap(_request_, other->_request_);
    std::swap(_change_, other->_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_descriptor_;
  metadata.reflection = system_setting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* system_setting_change_setting_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_change_setting_status_descriptor_;
}
bool system_setting_change_setting_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const system_setting_change_setting_status system_setting_change::on;
const system_setting_change_setting_status system_setting_change::off;
const system_setting_change_setting_status system_setting_change::setting_status_MIN;
const system_setting_change_setting_status system_setting_change::setting_status_MAX;
const int system_setting_change::setting_status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int system_setting_change::kKeyFieldNumber;
const int system_setting_change::kValueFieldNumber;
#endif  // !_MSC_VER

system_setting_change::system_setting_change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_setting_change::InitAsDefaultInstance() {
}

system_setting_change::system_setting_change(const system_setting_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_setting_change::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_change::~system_setting_change() {
  SharedDtor();
}

void system_setting_change::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void system_setting_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_change_descriptor_;
}

const system_setting_change& system_setting_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

system_setting_change* system_setting_change::default_instance_ = NULL;

system_setting_change* system_setting_change::New() const {
  return new system_setting_change;
}

void system_setting_change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void system_setting_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_setting_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_setting_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_change::MergeFrom(const system_setting_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_change::CopyFrom(const system_setting_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void system_setting_change::Swap(system_setting_change* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_change_descriptor_;
  metadata.reflection = system_setting_change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

system_setting_request::system_setting_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_setting_request::InitAsDefaultInstance() {
}

system_setting_request::system_setting_request(const system_setting_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_setting_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_setting_request::~system_setting_request() {
  SharedDtor();
}

void system_setting_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_setting_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_setting_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_setting_request_descriptor_;
}

const system_setting_request& system_setting_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

system_setting_request* system_setting_request::default_instance_ = NULL;

system_setting_request* system_setting_request::New() const {
  return new system_setting_request;
}

void system_setting_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_setting_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void system_setting_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_setting_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_setting_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_setting_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_setting_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_setting_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_setting_request::MergeFrom(const system_setting_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_setting_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_setting_request::CopyFrom(const system_setting_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_setting_request::IsInitialized() const {

  return true;
}

void system_setting_request::Swap(system_setting_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_setting_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_setting_request_descriptor_;
  metadata.reflection = system_setting_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int push_notify::kClientIdFieldNumber;
#endif  // !_MSC_VER

push_notify::push_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void push_notify::InitAsDefaultInstance() {
}

push_notify::push_notify(const push_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void push_notify::SharedCtor() {
  _cached_size_ = 0;
  _client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

push_notify::~push_notify() {
  SharedDtor();
}

void push_notify::SharedDtor() {
  if (_client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _client_id_;
  }
  if (this != default_instance_) {
  }
}

void push_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* push_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return push_notify_descriptor_;
}

const push_notify& push_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

push_notify* push_notify::default_instance_ = NULL;

push_notify* push_notify::New() const {
  return new push_notify;
}

void push_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__client_id()) {
      if (_client_id_ != &::google::protobuf::internal::kEmptyString) {
        _client_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool push_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_client_id().data(), this->_client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void push_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _client_id = 1;
  if (has__client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_client_id().data(), this->_client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* push_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _client_id = 1;
  if (has__client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_client_id().data(), this->_client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int push_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _client_id = 1;
    if (has__client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void push_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const push_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const push_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void push_notify::MergeFrom(const push_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__client_id()) {
      set__client_id(from._client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void push_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_notify::CopyFrom(const push_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void push_notify::Swap(push_notify* other) {
  if (other != this) {
    std::swap(_client_id_, other->_client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata push_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = push_notify_descriptor_;
  metadata.reflection = push_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login::kActiveCodeFieldNumber;
const int login::kOldDeviceidFieldNumber;
const int login::kVersionFieldNumber;
const int login::kLanguageidFieldNumber;
#endif  // !_MSC_VER

login::login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login::InitAsDefaultInstance() {
}

login::login(const login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login::SharedCtor() {
  _cached_size_ = 0;
  _active_code_ = GOOGLE_ULONGLONG(0);
  _old_deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _languageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login::~login() {
  SharedDtor();
}

void login::SharedDtor() {
  if (_old_deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete _old_deviceid_;
  }
  if (_version_ != &::google::protobuf::internal::kEmptyString) {
    delete _version_;
  }
  if (this != default_instance_) {
  }
}

void login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_descriptor_;
}

const login& login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

login* login::default_instance_ = NULL;

login* login::New() const {
  return new login;
}

void login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _active_code_ = GOOGLE_ULONGLONG(0);
    if (has__old_deviceid()) {
      if (_old_deviceid_ != &::google::protobuf::internal::kEmptyString) {
        _old_deviceid_->clear();
      }
    }
    if (has__version()) {
      if (_version_ != &::google::protobuf::internal::kEmptyString) {
        _version_->clear();
      }
    }
    _languageid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 _active_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_active_code_)));
          set_has__active_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__old_deviceid;
        break;
      }

      // optional string _old_deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__old_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__old_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_old_deviceid().data(), this->_old_deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__version;
        break;
      }

      // optional string _version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_version().data(), this->_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__languageid;
        break;
      }

      // optional uint32 _languageid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__languageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_languageid_)));
          set_has__languageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 _active_code = 1;
  if (has__active_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->_active_code(), output);
  }

  // optional string _old_deviceid = 2;
  if (has__old_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_old_deviceid().data(), this->_old_deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_old_deviceid(), output);
  }

  // optional string _version = 3;
  if (has__version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_version().data(), this->_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_version(), output);
  }

  // optional uint32 _languageid = 4;
  if (has__languageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_languageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 _active_code = 1;
  if (has__active_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->_active_code(), target);
  }

  // optional string _old_deviceid = 2;
  if (has__old_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_old_deviceid().data(), this->_old_deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_old_deviceid(), target);
  }

  // optional string _version = 3;
  if (has__version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_version().data(), this->_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_version(), target);
  }

  // optional uint32 _languageid = 4;
  if (has__languageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_languageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 _active_code = 1;
    if (has__active_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_active_code());
    }

    // optional string _old_deviceid = 2;
    if (has__old_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_old_deviceid());
    }

    // optional string _version = 3;
    if (has__version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_version());
    }

    // optional uint32 _languageid = 4;
    if (has__languageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_languageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login::MergeFrom(const login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__active_code()) {
      set__active_code(from._active_code());
    }
    if (from.has__old_deviceid()) {
      set__old_deviceid(from._old_deviceid());
    }
    if (from.has__version()) {
      set__version(from._version());
    }
    if (from.has__languageid()) {
      set__languageid(from._languageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login::CopyFrom(const login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {

  return true;
}

void login::Swap(login* other) {
  if (other != this) {
    std::swap(_active_code_, other->_active_code_);
    std::swap(_old_deviceid_, other->_old_deviceid_);
    std::swap(_version_, other->_version_);
    std::swap(_languageid_, other->_languageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_descriptor_;
  metadata.reflection = login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sdk_login::kSessionKeyFieldNumber;
const int sdk_login::kPlatIdFieldNumber;
#endif  // !_MSC_VER

sdk_login::sdk_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sdk_login::InitAsDefaultInstance() {
}

sdk_login::sdk_login(const sdk_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sdk_login::SharedCtor() {
  _cached_size_ = 0;
  _session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _plat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sdk_login::~sdk_login() {
  SharedDtor();
}

void sdk_login::SharedDtor() {
  if (_session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete _session_key_;
  }
  if (this != default_instance_) {
  }
}

void sdk_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdk_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdk_login_descriptor_;
}

const sdk_login& sdk_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

sdk_login* sdk_login::default_instance_ = NULL;

sdk_login* sdk_login::New() const {
  return new sdk_login;
}

void sdk_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__session_key()) {
      if (_session_key_ != &::google::protobuf::internal::kEmptyString) {
        _session_key_->clear();
      }
    }
    _plat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sdk_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _session_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_session_key().data(), this->_session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__plat_id;
        break;
      }

      // required .up.platform_type _plat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__plat_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::platform_type_IsValid(value)) {
            set__plat_id(static_cast< ::up::platform_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sdk_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _session_key = 1;
  if (has__session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_session_key().data(), this->_session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_session_key(), output);
  }

  // required .up.platform_type _plat_id = 2;
  if (has__plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_plat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sdk_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _session_key = 1;
  if (has__session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_session_key().data(), this->_session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_session_key(), target);
  }

  // required .up.platform_type _plat_id = 2;
  if (has__plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_plat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sdk_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _session_key = 1;
    if (has__session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_session_key());
    }

    // required .up.platform_type _plat_id = 2;
    if (has__plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_plat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdk_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sdk_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sdk_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sdk_login::MergeFrom(const sdk_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__session_key()) {
      set__session_key(from._session_key());
    }
    if (from.has__plat_id()) {
      set__plat_id(from._plat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sdk_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdk_login::CopyFrom(const sdk_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sdk_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sdk_login::Swap(sdk_login* other) {
  if (other != this) {
    std::swap(_session_key_, other->_session_key_);
    std::swap(_plat_id_, other->_plat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sdk_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdk_login_descriptor_;
  metadata.reflection = sdk_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

request_userinfo::request_userinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void request_userinfo::InitAsDefaultInstance() {
}

request_userinfo::request_userinfo(const request_userinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void request_userinfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request_userinfo::~request_userinfo() {
  SharedDtor();
}

void request_userinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request_userinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_userinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_userinfo_descriptor_;
}

const request_userinfo& request_userinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

request_userinfo* request_userinfo::default_instance_ = NULL;

request_userinfo* request_userinfo::New() const {
  return new request_userinfo;
}

void request_userinfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request_userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void request_userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* request_userinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int request_userinfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_userinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request_userinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request_userinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request_userinfo::MergeFrom(const request_userinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request_userinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_userinfo::CopyFrom(const request_userinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_userinfo::IsInitialized() const {

  return true;
}

void request_userinfo::Swap(request_userinfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request_userinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_userinfo_descriptor_;
  metadata.reflection = request_userinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_stage::kStageIdFieldNumber;
#endif  // !_MSC_VER

enter_stage::enter_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_stage::InitAsDefaultInstance() {
}

enter_stage::enter_stage(const enter_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_stage::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_stage::~enter_stage() {
  SharedDtor();
}

void enter_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_stage_descriptor_;
}

const enter_stage& enter_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

enter_stage* enter_stage::default_instance_ = NULL;

enter_stage* enter_stage::New() const {
  return new enter_stage;
}

void enter_stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_stage::MergeFrom(const enter_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_stage::CopyFrom(const enter_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_stage::Swap(enter_stage* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_stage_descriptor_;
  metadata.reflection = enter_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_stage::kResultFieldNumber;
const int exit_stage::kStarsFieldNumber;
const int exit_stage::kHeroesFieldNumber;
const int exit_stage::kOprationsFieldNumber;
const int exit_stage::kMd5FieldNumber;
const int exit_stage::kSelfDataFieldNumber;
#endif  // !_MSC_VER

exit_stage::exit_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_stage::InitAsDefaultInstance() {
}

exit_stage::exit_stage(const exit_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_stage::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _stars_ = 0u;
  _md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_stage::~exit_stage() {
  SharedDtor();
}

void exit_stage::SharedDtor() {
  if (_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete _md5_;
  }
  if (this != default_instance_) {
  }
}

void exit_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_stage_descriptor_;
}

const exit_stage& exit_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

exit_stage* exit_stage::default_instance_ = NULL;

exit_stage* exit_stage::New() const {
  return new exit_stage;
}

void exit_stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _result_ = 0;
    _stars_ = 0u;
    if (has__md5()) {
      if (_md5_ != &::google::protobuf::internal::kEmptyString) {
        _md5_->clear();
      }
    }
  }
  _heroes_.Clear();
  _oprations_.Clear();
  _self_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.battle_result _result = 1 [default = victory];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::battle_result_IsValid(value)) {
            set__result(static_cast< ::up::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__stars;
        break;
      }

      // optional uint32 _stars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stars_)));
          set_has__stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__heroes;
        break;
      }

      // repeated uint32 _heroes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__heroes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__heroes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__heroes;
        if (input->ExpectTag(32)) goto parse__oprations;
        break;
      }

      // repeated uint32 _oprations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__oprations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__oprations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__oprations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__oprations;
        if (input->ExpectTag(42)) goto parse__md5;
        break;
      }

      // optional string _md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_md5().data(), this->_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__self_data;
        break;
      }

      // repeated uint32 _self_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__self_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable__self_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__self_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__self_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // optional uint32 _stars = 2;
  if (has__stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stars(), output);
  }

  // repeated uint32 _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_heroes(i), output);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_oprations(i), output);
  }

  // optional string _md5 = 5;
  if (has__md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_md5().data(), this->_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->_md5(), output);
  }

  // repeated uint32 _self_data = 6;
  for (int i = 0; i < this->_self_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->_self_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // optional uint32 _stars = 2;
  if (has__stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stars(), target);
  }

  // repeated uint32 _heroes = 3;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_heroes(i), target);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_oprations(i), target);
  }

  // optional string _md5 = 5;
  if (has__md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_md5().data(), this->_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->_md5(), target);
  }

  // repeated uint32 _self_data = 6;
  for (int i = 0; i < this->_self_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->_self_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.battle_result _result = 1 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // optional uint32 _stars = 2;
    if (has__stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stars());
    }

    // optional string _md5 = 5;
    if (has__md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_md5());
    }

  }
  // repeated uint32 _heroes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_heroes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_heroes(i));
    }
    total_size += 1 * this->_heroes_size() + data_size;
  }

  // repeated uint32 _oprations = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_oprations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_oprations(i));
    }
    total_size += 1 * this->_oprations_size() + data_size;
  }

  // repeated uint32 _self_data = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->_self_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_self_data(i));
    }
    total_size += 1 * this->_self_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_stage::MergeFrom(const exit_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroes_.MergeFrom(from._heroes_);
  _oprations_.MergeFrom(from._oprations_);
  _self_data_.MergeFrom(from._self_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__stars()) {
      set__stars(from._stars());
    }
    if (from.has__md5()) {
      set__md5(from._md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_stage::CopyFrom(const exit_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void exit_stage::Swap(exit_stage* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_stars_, other->_stars_);
    _heroes_.Swap(&other->_heroes_);
    _oprations_.Swap(&other->_oprations_);
    std::swap(_md5_, other->_md5_);
    _self_data_.Swap(&other->_self_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_stage_descriptor_;
  metadata.reflection = exit_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_cmd::kUnlockAllStagesFieldNumber;
const int gm_cmd::kGetAllHeroesFieldNumber;
const int gm_cmd::kSetHeroInfoFieldNumber;
const int gm_cmd::kSetVitalityFieldNumber;
const int gm_cmd::kSetMoneyFieldNumber;
const int gm_cmd::kSetRechargeSumFieldNumber;
const int gm_cmd::kSetPlayerLevelFieldNumber;
const int gm_cmd::kSetPlayerExpFieldNumber;
const int gm_cmd::kSetItemsFieldNumber;
const int gm_cmd::kResetDeviceFieldNumber;
const int gm_cmd::kOpenMysteryShopFieldNumber;
const int gm_cmd::kArchiveIdFieldNumber;
const int gm_cmd::kRestoreIdFieldNumber;
const int gm_cmd::kResetSweepFieldNumber;
const int gm_cmd::kSetDailyloginDaysFieldNumber;
const int gm_cmd::kOpenGuildStageFieldNumber;
#endif  // !_MSC_VER

gm_cmd::gm_cmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_cmd::InitAsDefaultInstance() {
  _set_money_ = const_cast< ::up::set_money*>(&::up::set_money::default_instance());
  _open_guild_stage_ = const_cast< ::up::open_all_guild_stage*>(&::up::open_all_guild_stage::default_instance());
}

gm_cmd::gm_cmd(const gm_cmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_cmd::SharedCtor() {
  _cached_size_ = 0;
  _unlock_all_stages_ = 0;
  _get_all_heroes_ = 0;
  _set_vitality_ = 0;
  _set_money_ = NULL;
  _set_recharge_sum_ = 0;
  _set_player_level_ = 0;
  _set_player_exp_ = 0;
  _reset_device_ = 0u;
  _open_mystery_shop_ = 0u;
  _archive_id_ = 0u;
  _restore_id_ = 0u;
  _reset_sweep_ = 0;
  _set_dailylogin_days_ = 0u;
  _open_guild_stage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_cmd::~gm_cmd() {
  SharedDtor();
}

void gm_cmd::SharedDtor() {
  if (this != default_instance_) {
    delete _set_money_;
    delete _open_guild_stage_;
  }
}

void gm_cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_cmd_descriptor_;
}

const gm_cmd& gm_cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

gm_cmd* gm_cmd::default_instance_ = NULL;

gm_cmd* gm_cmd::New() const {
  return new gm_cmd;
}

void gm_cmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _unlock_all_stages_ = 0;
    _get_all_heroes_ = 0;
    _set_vitality_ = 0;
    if (has__set_money()) {
      if (_set_money_ != NULL) _set_money_->::up::set_money::Clear();
    }
    _set_recharge_sum_ = 0;
    _set_player_level_ = 0;
    _set_player_exp_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    _reset_device_ = 0u;
    _open_mystery_shop_ = 0u;
    _archive_id_ = 0u;
    _restore_id_ = 0u;
    _reset_sweep_ = 0;
    _set_dailylogin_days_ = 0u;
    if (has__open_guild_stage()) {
      if (_open_guild_stage_ != NULL) _open_guild_stage_->::up::open_all_guild_stage::Clear();
    }
  }
  _set_hero_info_.Clear();
  _set_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 _unlock_all_stages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_unlock_all_stages_)));
          set_has__unlock_all_stages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__get_all_heroes;
        break;
      }

      // optional int32 _get_all_heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__get_all_heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_get_all_heroes_)));
          set_has__get_all_heroes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__set_hero_info;
        break;
      }

      // repeated .up.hero _set_hero_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_hero_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__set_hero_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__set_hero_info;
        if (input->ExpectTag(32)) goto parse__set_vitality;
        break;
      }

      // optional int32 _set_vitality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_set_vitality_)));
          set_has__set_vitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__set_money;
        break;
      }

      // optional .up.set_money _set_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__set_recharge_sum;
        break;
      }

      // optional int32 _set_recharge_sum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_recharge_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_set_recharge_sum_)));
          set_has__set_recharge_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse__set_player_level;
        break;
      }

      // optional int32 _set_player_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_set_player_level_)));
          set_has__set_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse__set_player_exp;
        break;
      }

      // optional int32 _set_player_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_player_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_set_player_exp_)));
          set_has__set_player_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse__set_items;
        break;
      }

      // repeated uint32 _set_items = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable__set_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__set_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse__set_items;
        if (input->ExpectTag(80)) goto parse__reset_device;
        break;
      }

      // optional uint32 _reset_device = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__reset_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_reset_device_)));
          set_has__reset_device();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse__open_mystery_shop;
        break;
      }

      // optional uint32 _open_mystery_shop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__open_mystery_shop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_open_mystery_shop_)));
          set_has__open_mystery_shop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse__archive_id;
        break;
      }

      // optional uint32 _archive_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__archive_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_archive_id_)));
          set_has__archive_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse__restore_id;
        break;
      }

      // optional uint32 _restore_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__restore_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_restore_id_)));
          set_has__restore_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse__reset_sweep;
        break;
      }

      // optional int32 _reset_sweep = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__reset_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_reset_sweep_)));
          set_has__reset_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse__set_dailylogin_days;
        break;
      }

      // optional uint32 _set_dailylogin_days = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__set_dailylogin_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_set_dailylogin_days_)));
          set_has__set_dailylogin_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse__open_guild_stage;
        break;
      }

      // optional .up.open_all_guild_stage _open_guild_stage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__open_guild_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_guild_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 _unlock_all_stages = 1;
  if (has__unlock_all_stages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->_unlock_all_stages(), output);
  }

  // optional int32 _get_all_heroes = 2;
  if (has__get_all_heroes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->_get_all_heroes(), output);
  }

  // repeated .up.hero _set_hero_info = 3;
  for (int i = 0; i < this->_set_hero_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_set_hero_info(i), output);
  }

  // optional int32 _set_vitality = 4;
  if (has__set_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->_set_vitality(), output);
  }

  // optional .up.set_money _set_money = 5;
  if (has__set_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_set_money(), output);
  }

  // optional int32 _set_recharge_sum = 6;
  if (has__set_recharge_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->_set_recharge_sum(), output);
  }

  // optional int32 _set_player_level = 7;
  if (has__set_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->_set_player_level(), output);
  }

  // optional int32 _set_player_exp = 8;
  if (has__set_player_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->_set_player_exp(), output);
  }

  // repeated uint32 _set_items = 9;
  for (int i = 0; i < this->_set_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->_set_items(i), output);
  }

  // optional uint32 _reset_device = 10;
  if (has__reset_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_reset_device(), output);
  }

  // optional uint32 _open_mystery_shop = 11;
  if (has__open_mystery_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->_open_mystery_shop(), output);
  }

  // optional uint32 _archive_id = 12;
  if (has__archive_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->_archive_id(), output);
  }

  // optional uint32 _restore_id = 13;
  if (has__restore_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->_restore_id(), output);
  }

  // optional int32 _reset_sweep = 14;
  if (has__reset_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->_reset_sweep(), output);
  }

  // optional uint32 _set_dailylogin_days = 15;
  if (has__set_dailylogin_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->_set_dailylogin_days(), output);
  }

  // optional .up.open_all_guild_stage _open_guild_stage = 16;
  if (has__open_guild_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_open_guild_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 _unlock_all_stages = 1;
  if (has__unlock_all_stages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->_unlock_all_stages(), target);
  }

  // optional int32 _get_all_heroes = 2;
  if (has__get_all_heroes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->_get_all_heroes(), target);
  }

  // repeated .up.hero _set_hero_info = 3;
  for (int i = 0; i < this->_set_hero_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_set_hero_info(i), target);
  }

  // optional int32 _set_vitality = 4;
  if (has__set_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->_set_vitality(), target);
  }

  // optional .up.set_money _set_money = 5;
  if (has__set_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_set_money(), target);
  }

  // optional int32 _set_recharge_sum = 6;
  if (has__set_recharge_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->_set_recharge_sum(), target);
  }

  // optional int32 _set_player_level = 7;
  if (has__set_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->_set_player_level(), target);
  }

  // optional int32 _set_player_exp = 8;
  if (has__set_player_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->_set_player_exp(), target);
  }

  // repeated uint32 _set_items = 9;
  for (int i = 0; i < this->_set_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->_set_items(i), target);
  }

  // optional uint32 _reset_device = 10;
  if (has__reset_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_reset_device(), target);
  }

  // optional uint32 _open_mystery_shop = 11;
  if (has__open_mystery_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->_open_mystery_shop(), target);
  }

  // optional uint32 _archive_id = 12;
  if (has__archive_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->_archive_id(), target);
  }

  // optional uint32 _restore_id = 13;
  if (has__restore_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->_restore_id(), target);
  }

  // optional int32 _reset_sweep = 14;
  if (has__reset_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->_reset_sweep(), target);
  }

  // optional uint32 _set_dailylogin_days = 15;
  if (has__set_dailylogin_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->_set_dailylogin_days(), target);
  }

  // optional .up.open_all_guild_stage _open_guild_stage = 16;
  if (has__open_guild_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_open_guild_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_cmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 _unlock_all_stages = 1;
    if (has__unlock_all_stages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_unlock_all_stages());
    }

    // optional int32 _get_all_heroes = 2;
    if (has__get_all_heroes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_get_all_heroes());
    }

    // optional int32 _set_vitality = 4;
    if (has__set_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_set_vitality());
    }

    // optional .up.set_money _set_money = 5;
    if (has__set_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_money());
    }

    // optional int32 _set_recharge_sum = 6;
    if (has__set_recharge_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_set_recharge_sum());
    }

    // optional int32 _set_player_level = 7;
    if (has__set_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_set_player_level());
    }

    // optional int32 _set_player_exp = 8;
    if (has__set_player_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_set_player_exp());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 _reset_device = 10;
    if (has__reset_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_reset_device());
    }

    // optional uint32 _open_mystery_shop = 11;
    if (has__open_mystery_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_open_mystery_shop());
    }

    // optional uint32 _archive_id = 12;
    if (has__archive_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_archive_id());
    }

    // optional uint32 _restore_id = 13;
    if (has__restore_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_restore_id());
    }

    // optional int32 _reset_sweep = 14;
    if (has__reset_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_reset_sweep());
    }

    // optional uint32 _set_dailylogin_days = 15;
    if (has__set_dailylogin_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_set_dailylogin_days());
    }

    // optional .up.open_all_guild_stage _open_guild_stage = 16;
    if (has__open_guild_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_guild_stage());
    }

  }
  // repeated .up.hero _set_hero_info = 3;
  total_size += 1 * this->_set_hero_info_size();
  for (int i = 0; i < this->_set_hero_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_set_hero_info(i));
  }

  // repeated uint32 _set_items = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->_set_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_set_items(i));
    }
    total_size += 1 * this->_set_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_cmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_cmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_cmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_cmd::MergeFrom(const gm_cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  _set_hero_info_.MergeFrom(from._set_hero_info_);
  _set_items_.MergeFrom(from._set_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__unlock_all_stages()) {
      set__unlock_all_stages(from._unlock_all_stages());
    }
    if (from.has__get_all_heroes()) {
      set__get_all_heroes(from._get_all_heroes());
    }
    if (from.has__set_vitality()) {
      set__set_vitality(from._set_vitality());
    }
    if (from.has__set_money()) {
      mutable__set_money()->::up::set_money::MergeFrom(from._set_money());
    }
    if (from.has__set_recharge_sum()) {
      set__set_recharge_sum(from._set_recharge_sum());
    }
    if (from.has__set_player_level()) {
      set__set_player_level(from._set_player_level());
    }
    if (from.has__set_player_exp()) {
      set__set_player_exp(from._set_player_exp());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has__reset_device()) {
      set__reset_device(from._reset_device());
    }
    if (from.has__open_mystery_shop()) {
      set__open_mystery_shop(from._open_mystery_shop());
    }
    if (from.has__archive_id()) {
      set__archive_id(from._archive_id());
    }
    if (from.has__restore_id()) {
      set__restore_id(from._restore_id());
    }
    if (from.has__reset_sweep()) {
      set__reset_sweep(from._reset_sweep());
    }
    if (from.has__set_dailylogin_days()) {
      set__set_dailylogin_days(from._set_dailylogin_days());
    }
    if (from.has__open_guild_stage()) {
      mutable__open_guild_stage()->::up::open_all_guild_stage::MergeFrom(from._open_guild_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_cmd::CopyFrom(const gm_cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_cmd::IsInitialized() const {

  for (int i = 0; i < _set_hero_info_size(); i++) {
    if (!this->_set_hero_info(i).IsInitialized()) return false;
  }
  if (has__set_money()) {
    if (!this->_set_money().IsInitialized()) return false;
  }
  return true;
}

void gm_cmd::Swap(gm_cmd* other) {
  if (other != this) {
    std::swap(_unlock_all_stages_, other->_unlock_all_stages_);
    std::swap(_get_all_heroes_, other->_get_all_heroes_);
    _set_hero_info_.Swap(&other->_set_hero_info_);
    std::swap(_set_vitality_, other->_set_vitality_);
    std::swap(_set_money_, other->_set_money_);
    std::swap(_set_recharge_sum_, other->_set_recharge_sum_);
    std::swap(_set_player_level_, other->_set_player_level_);
    std::swap(_set_player_exp_, other->_set_player_exp_);
    _set_items_.Swap(&other->_set_items_);
    std::swap(_reset_device_, other->_reset_device_);
    std::swap(_open_mystery_shop_, other->_open_mystery_shop_);
    std::swap(_archive_id_, other->_archive_id_);
    std::swap(_restore_id_, other->_restore_id_);
    std::swap(_reset_sweep_, other->_reset_sweep_);
    std::swap(_set_dailylogin_days_, other->_set_dailylogin_days_);
    std::swap(_open_guild_stage_, other->_open_guild_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_cmd_descriptor_;
  metadata.reflection = gm_cmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info::kPlayerNameFieldNumber;
const int activity_info::kVersionFieldNumber;
#endif  // !_MSC_VER

activity_info::activity_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_info::InitAsDefaultInstance() {
}

activity_info::activity_info(const activity_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_info::SharedCtor() {
  _cached_size_ = 0;
  _player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info::~activity_info() {
  SharedDtor();
}

void activity_info::SharedDtor() {
  if (_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete _player_name_;
  }
  if (this != default_instance_) {
  }
}

void activity_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_descriptor_;
}

const activity_info& activity_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_info* activity_info::default_instance_ = NULL;

activity_info* activity_info::New() const {
  return new activity_info;
}

void activity_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__player_name()) {
      if (_player_name_ != &::google::protobuf::internal::kEmptyString) {
        _player_name_->clear();
      }
    }
    _version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_player_name().data(), this->_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__version;
        break;
      }

      // required uint32 _version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_version_)));
          set_has__version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _player_name = 1;
  if (has__player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_player_name().data(), this->_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_player_name(), output);
  }

  // required uint32 _version = 2;
  if (has__version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _player_name = 1;
  if (has__player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_player_name().data(), this->_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_player_name(), target);
  }

  // required uint32 _version = 2;
  if (has__version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _player_name = 1;
    if (has__player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_player_name());
    }

    // required uint32 _version = 2;
    if (has__version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info::MergeFrom(const activity_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__player_name()) {
      set__player_name(from._player_name());
    }
    if (from.has__version()) {
      set__version(from._version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info::CopyFrom(const activity_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_info::Swap(activity_info* other) {
  if (other != this) {
    std::swap(_player_name_, other->_player_name_);
    std::swap(_version_, other->_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_descriptor_;
  metadata.reflection = activity_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_lotto_info::kGroupIdFieldNumber;
const int activity_lotto_info::kActivityIdFieldNumber;
#endif  // !_MSC_VER

activity_lotto_info::activity_lotto_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_lotto_info::InitAsDefaultInstance() {
}

activity_lotto_info::activity_lotto_info(const activity_lotto_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_lotto_info::SharedCtor() {
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_lotto_info::~activity_lotto_info() {
  SharedDtor();
}

void activity_lotto_info::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void activity_lotto_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_lotto_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_lotto_info_descriptor_;
}

const activity_lotto_info& activity_lotto_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_lotto_info* activity_lotto_info::default_instance_ = NULL;

activity_lotto_info* activity_lotto_info::New() const {
  return new activity_lotto_info;
}

void activity_lotto_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__group_id()) {
      if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
        _group_id_->clear();
      }
    }
    _activity_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_lotto_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__activity_id;
        break;
      }

      // required uint32 _activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_id_)));
          set_has__activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_lotto_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_group_id(), output);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_lotto_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_lotto_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

    // required uint32 _activity_id = 2;
    if (has__activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_lotto_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_lotto_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_lotto_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_lotto_info::MergeFrom(const activity_lotto_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
    if (from.has__activity_id()) {
      set__activity_id(from._activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_lotto_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_lotto_info::CopyFrom(const activity_lotto_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_lotto_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_lotto_info::Swap(activity_lotto_info* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    std::swap(_activity_id_, other->_activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_lotto_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_lotto_info_descriptor_;
  metadata.reflection = activity_lotto_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_info::kGroupIdFieldNumber;
const int activity_bigpackage_info::kActivityIdFieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_info::activity_bigpackage_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_bigpackage_info::InitAsDefaultInstance() {
}

activity_bigpackage_info::activity_bigpackage_info(const activity_bigpackage_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_bigpackage_info::SharedCtor() {
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_info::~activity_bigpackage_info() {
  SharedDtor();
}

void activity_bigpackage_info::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void activity_bigpackage_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_info_descriptor_;
}

const activity_bigpackage_info& activity_bigpackage_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_bigpackage_info* activity_bigpackage_info::default_instance_ = NULL;

activity_bigpackage_info* activity_bigpackage_info::New() const {
  return new activity_bigpackage_info;
}

void activity_bigpackage_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__group_id()) {
      if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
        _group_id_->clear();
      }
    }
    _activity_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__activity_id;
        break;
      }

      // required uint32 _activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_id_)));
          set_has__activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_bigpackage_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_group_id(), output);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_bigpackage_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_bigpackage_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

    // required uint32 _activity_id = 2;
    if (has__activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_info::MergeFrom(const activity_bigpackage_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
    if (from.has__activity_id()) {
      set__activity_id(from._activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_info::CopyFrom(const activity_bigpackage_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_bigpackage_info::Swap(activity_bigpackage_info* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    std::swap(_activity_id_, other->_activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_info_descriptor_;
  metadata.reflection = activity_bigpackage_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_reward_info::kGroupIdFieldNumber;
const int activity_bigpackage_reward_info::kActivityIdFieldNumber;
const int activity_bigpackage_reward_info::kBoxIdFieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_reward_info::activity_bigpackage_reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_bigpackage_reward_info::InitAsDefaultInstance() {
}

activity_bigpackage_reward_info::activity_bigpackage_reward_info(const activity_bigpackage_reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_bigpackage_reward_info::SharedCtor() {
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _activity_id_ = 0u;
  _box_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_reward_info::~activity_bigpackage_reward_info() {
  SharedDtor();
}

void activity_bigpackage_reward_info::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void activity_bigpackage_reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_reward_info_descriptor_;
}

const activity_bigpackage_reward_info& activity_bigpackage_reward_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_bigpackage_reward_info* activity_bigpackage_reward_info::default_instance_ = NULL;

activity_bigpackage_reward_info* activity_bigpackage_reward_info::New() const {
  return new activity_bigpackage_reward_info;
}

void activity_bigpackage_reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__group_id()) {
      if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
        _group_id_->clear();
      }
    }
    _activity_id_ = 0u;
    _box_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__activity_id;
        break;
      }

      // required uint32 _activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_id_)));
          set_has__activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__box_id;
        break;
      }

      // required uint32 _box_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_box_id_)));
          set_has__box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_bigpackage_reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_group_id(), output);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_activity_id(), output);
  }

  // required uint32 _box_id = 3;
  if (has__box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_box_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_bigpackage_reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_activity_id(), target);
  }

  // required uint32 _box_id = 3;
  if (has__box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_box_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_bigpackage_reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

    // required uint32 _activity_id = 2;
    if (has__activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_id());
    }

    // required uint32 _box_id = 3;
    if (has__box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_box_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_reward_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_reward_info::MergeFrom(const activity_bigpackage_reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
    if (from.has__activity_id()) {
      set__activity_id(from._activity_id());
    }
    if (from.has__box_id()) {
      set__box_id(from._box_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_reward_info::CopyFrom(const activity_bigpackage_reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_reward_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void activity_bigpackage_reward_info::Swap(activity_bigpackage_reward_info* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    std::swap(_activity_id_, other->_activity_id_);
    std::swap(_box_id_, other->_box_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_reward_info_descriptor_;
  metadata.reflection = activity_bigpackage_reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_bigpackage_reset::kGroupIdFieldNumber;
const int activity_bigpackage_reset::kActivityIdFieldNumber;
#endif  // !_MSC_VER

activity_bigpackage_reset::activity_bigpackage_reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_bigpackage_reset::InitAsDefaultInstance() {
}

activity_bigpackage_reset::activity_bigpackage_reset(const activity_bigpackage_reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_bigpackage_reset::SharedCtor() {
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_bigpackage_reset::~activity_bigpackage_reset() {
  SharedDtor();
}

void activity_bigpackage_reset::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void activity_bigpackage_reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_bigpackage_reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_bigpackage_reset_descriptor_;
}

const activity_bigpackage_reset& activity_bigpackage_reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_bigpackage_reset* activity_bigpackage_reset::default_instance_ = NULL;

activity_bigpackage_reset* activity_bigpackage_reset::New() const {
  return new activity_bigpackage_reset;
}

void activity_bigpackage_reset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__group_id()) {
      if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
        _group_id_->clear();
      }
    }
    _activity_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_bigpackage_reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__activity_id;
        break;
      }

      // required uint32 _activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_id_)));
          set_has__activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_bigpackage_reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_group_id(), output);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_bigpackage_reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_bigpackage_reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

    // required uint32 _activity_id = 2;
    if (has__activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_bigpackage_reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_bigpackage_reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_bigpackage_reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_bigpackage_reset::MergeFrom(const activity_bigpackage_reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
    if (from.has__activity_id()) {
      set__activity_id(from._activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_bigpackage_reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_bigpackage_reset::CopyFrom(const activity_bigpackage_reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_bigpackage_reset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_bigpackage_reset::Swap(activity_bigpackage_reset* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    std::swap(_activity_id_, other->_activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_bigpackage_reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_bigpackage_reset_descriptor_;
  metadata.reflection = activity_bigpackage_reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_lotto_reward::kGroupIdFieldNumber;
const int activity_lotto_reward::kActivityIdFieldNumber;
#endif  // !_MSC_VER

activity_lotto_reward::activity_lotto_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_lotto_reward::InitAsDefaultInstance() {
}

activity_lotto_reward::activity_lotto_reward(const activity_lotto_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_lotto_reward::SharedCtor() {
  _cached_size_ = 0;
  _group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _activity_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_lotto_reward::~activity_lotto_reward() {
  SharedDtor();
}

void activity_lotto_reward::SharedDtor() {
  if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _group_id_;
  }
  if (this != default_instance_) {
  }
}

void activity_lotto_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_lotto_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_lotto_reward_descriptor_;
}

const activity_lotto_reward& activity_lotto_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

activity_lotto_reward* activity_lotto_reward::default_instance_ = NULL;

activity_lotto_reward* activity_lotto_reward::New() const {
  return new activity_lotto_reward;
}

void activity_lotto_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__group_id()) {
      if (_group_id_ != &::google::protobuf::internal::kEmptyString) {
        _group_id_->clear();
      }
    }
    _activity_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_lotto_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_group_id().data(), this->_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__activity_id;
        break;
      }

      // required uint32 _activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_activity_id_)));
          set_has__activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_lotto_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_group_id(), output);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_lotto_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _group_id = 1;
  if (has__group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_group_id().data(), this->_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_group_id(), target);
  }

  // required uint32 _activity_id = 2;
  if (has__activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_lotto_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _group_id = 1;
    if (has__group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_group_id());
    }

    // required uint32 _activity_id = 2;
    if (has__activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_lotto_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_lotto_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_lotto_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_lotto_reward::MergeFrom(const activity_lotto_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__group_id()) {
      set__group_id(from._group_id());
    }
    if (from.has__activity_id()) {
      set__activity_id(from._activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_lotto_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_lotto_reward::CopyFrom(const activity_lotto_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_lotto_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void activity_lotto_reward::Swap(activity_lotto_reward* other) {
  if (other != this) {
    std::swap(_group_id_, other->_group_id_);
    std::swap(_activity_id_, other->_activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_lotto_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_lotto_reward_descriptor_;
  metadata.reflection = activity_lotto_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

open_all_guild_stage::open_all_guild_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void open_all_guild_stage::InitAsDefaultInstance() {
}

open_all_guild_stage::open_all_guild_stage(const open_all_guild_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void open_all_guild_stage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_all_guild_stage::~open_all_guild_stage() {
  SharedDtor();
}

void open_all_guild_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void open_all_guild_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_all_guild_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_all_guild_stage_descriptor_;
}

const open_all_guild_stage& open_all_guild_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

open_all_guild_stage* open_all_guild_stage::default_instance_ = NULL;

open_all_guild_stage* open_all_guild_stage::New() const {
  return new open_all_guild_stage;
}

void open_all_guild_stage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_all_guild_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void open_all_guild_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* open_all_guild_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int open_all_guild_stage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_all_guild_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_all_guild_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_all_guild_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_all_guild_stage::MergeFrom(const open_all_guild_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_all_guild_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_all_guild_stage::CopyFrom(const open_all_guild_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_all_guild_stage::IsInitialized() const {

  return true;
}

void open_all_guild_stage::Swap(open_all_guild_stage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_all_guild_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_all_guild_stage_descriptor_;
  metadata.reflection = open_all_guild_stage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_money_price_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_money_price_type_descriptor_;
}
bool set_money_price_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_money_price_type set_money::gold;
const set_money_price_type set_money::diamond;
const set_money_price_type set_money::crusadepoint;
const set_money_price_type set_money::arenapoint;
const set_money_price_type set_money::guildpoint;
const set_money_price_type set_money::price_type_MIN;
const set_money_price_type set_money::price_type_MAX;
const int set_money::price_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_money::kTypeFieldNumber;
const int set_money::kAmountFieldNumber;
#endif  // !_MSC_VER

set_money::set_money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_money::InitAsDefaultInstance() {
}

set_money::set_money(const set_money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_money::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_money::~set_money() {
  SharedDtor();
}

void set_money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_money_descriptor_;
}

const set_money& set_money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

set_money* set_money::default_instance_ = NULL;

set_money* set_money::New() const {
  return new set_money;
}

void set_money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
    _amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.set_money.price_type _type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::set_money_price_type_IsValid(value)) {
            set__type(static_cast< ::up::set_money_price_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__amount;
        break;
      }

      // required uint32 _amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.set_money.price_type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required uint32 _amount = 2;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.set_money.price_type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required uint32 _amount = 2;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.set_money.price_type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _amount = 2;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_money::MergeFrom(const set_money& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_money::CopyFrom(const set_money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_money::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void set_money::Swap(set_money* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_amount_, other->_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_money_descriptor_;
  metadata.reflection = set_money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upgrade::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_upgrade::hero_upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_upgrade::InitAsDefaultInstance() {
}

hero_upgrade::hero_upgrade(const hero_upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_upgrade::SharedCtor() {
  _cached_size_ = 0;
  _hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upgrade::~hero_upgrade() {
  SharedDtor();
}

void hero_upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upgrade_descriptor_;
}

const hero_upgrade& hero_upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero_upgrade* hero_upgrade::default_instance_ = NULL;

hero_upgrade* hero_upgrade::New() const {
  return new hero_upgrade;
}

void hero_upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_id_)));
          set_has__hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hero_id = 1;
    if (has__hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upgrade::MergeFrom(const hero_upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_id()) {
      set__hero_id(from._hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upgrade::CopyFrom(const hero_upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void hero_upgrade::Swap(hero_upgrade* other) {
  if (other != this) {
    std::swap(_hero_id_, other->_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upgrade_descriptor_;
  metadata.reflection = hero_upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_synthesis::kEquipIdFieldNumber;
#endif  // !_MSC_VER

equip_synthesis::equip_synthesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equip_synthesis::InitAsDefaultInstance() {
}

equip_synthesis::equip_synthesis(const equip_synthesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equip_synthesis::SharedCtor() {
  _cached_size_ = 0;
  _equip_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_synthesis::~equip_synthesis() {
  SharedDtor();
}

void equip_synthesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_synthesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_synthesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_synthesis_descriptor_;
}

const equip_synthesis& equip_synthesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

equip_synthesis* equip_synthesis::default_instance_ = NULL;

equip_synthesis* equip_synthesis::New() const {
  return new equip_synthesis;
}

void equip_synthesis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _equip_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_synthesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_equip_id_)));
          set_has__equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equip_synthesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _equip_id = 1;
  if (has__equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equip_synthesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _equip_id = 1;
  if (has__equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equip_synthesis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _equip_id = 1;
    if (has__equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_synthesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_synthesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_synthesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_synthesis::MergeFrom(const equip_synthesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__equip_id()) {
      set__equip_id(from._equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_synthesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_synthesis::CopyFrom(const equip_synthesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_synthesis::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void equip_synthesis::Swap(equip_synthesis* other) {
  if (other != this) {
    std::swap(_equip_id_, other->_equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_synthesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_synthesis_descriptor_;
  metadata.reflection = equip_synthesis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_equip::kHeroIdFieldNumber;
const int wear_equip::kItemPosFieldNumber;
#endif  // !_MSC_VER

wear_equip::wear_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wear_equip::InitAsDefaultInstance() {
}

wear_equip::wear_equip(const wear_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wear_equip::SharedCtor() {
  _cached_size_ = 0;
  _hero_id_ = 0u;
  _item_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_equip::~wear_equip() {
  SharedDtor();
}

void wear_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_equip_descriptor_;
}

const wear_equip& wear_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

wear_equip* wear_equip::default_instance_ = NULL;

wear_equip* wear_equip::New() const {
  return new wear_equip;
}

void wear_equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _hero_id_ = 0u;
    _item_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_id_)));
          set_has__hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__item_pos;
        break;
      }

      // required uint32 _item_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__item_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_pos_)));
          set_has__item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wear_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_id(), output);
  }

  // required uint32 _item_pos = 2;
  if (has__item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_item_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wear_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_id(), target);
  }

  // required uint32 _item_pos = 2;
  if (has__item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_item_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wear_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hero_id = 1;
    if (has__hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_id());
    }

    // required uint32 _item_pos = 2;
    if (has__item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_equip::MergeFrom(const wear_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_id()) {
      set__hero_id(from._hero_id());
    }
    if (from.has__item_pos()) {
      set__item_pos(from._item_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_equip::CopyFrom(const wear_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void wear_equip::Swap(wear_equip* other) {
  if (other != this) {
    std::swap(_hero_id_, other->_hero_id_);
    std::swap(_item_pos_, other->_item_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_equip_descriptor_;
  metadata.reflection = wear_equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

sync_vitality::sync_vitality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_vitality::InitAsDefaultInstance() {
}

sync_vitality::sync_vitality(const sync_vitality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_vitality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_vitality::~sync_vitality() {
  SharedDtor();
}

void sync_vitality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_vitality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_vitality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_vitality_descriptor_;
}

const sync_vitality& sync_vitality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

sync_vitality* sync_vitality::default_instance_ = NULL;

sync_vitality* sync_vitality::New() const {
  return new sync_vitality;
}

void sync_vitality::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_vitality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void sync_vitality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_vitality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_vitality::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_vitality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_vitality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_vitality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_vitality::MergeFrom(const sync_vitality& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_vitality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_vitality::CopyFrom(const sync_vitality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_vitality::IsInitialized() const {

  return true;
}

void sync_vitality::Swap(sync_vitality* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_vitality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_vitality_descriptor_;
  metadata.reflection = sync_vitality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

buy_vitality::buy_vitality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_vitality::InitAsDefaultInstance() {
}

buy_vitality::buy_vitality(const buy_vitality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_vitality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_vitality::~buy_vitality() {
  SharedDtor();
}

void buy_vitality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_vitality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_vitality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_vitality_descriptor_;
}

const buy_vitality& buy_vitality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

buy_vitality* buy_vitality::default_instance_ = NULL;

buy_vitality* buy_vitality::New() const {
  return new buy_vitality;
}

void buy_vitality::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_vitality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void buy_vitality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_vitality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_vitality::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_vitality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_vitality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_vitality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_vitality::MergeFrom(const buy_vitality& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_vitality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_vitality::CopyFrom(const buy_vitality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_vitality::IsInitialized() const {

  return true;
}

void buy_vitality::Swap(buy_vitality* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_vitality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_vitality_descriptor_;
  metadata.reflection = buy_vitality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int consume_item::kHeroIdFieldNumber;
const int consume_item::kItemIdFieldNumber;
#endif  // !_MSC_VER

consume_item::consume_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void consume_item::InitAsDefaultInstance() {
}

consume_item::consume_item(const consume_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void consume_item::SharedCtor() {
  _cached_size_ = 0;
  _hero_id_ = 0u;
  _item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

consume_item::~consume_item() {
  SharedDtor();
}

void consume_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void consume_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* consume_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return consume_item_descriptor_;
}

const consume_item& consume_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

consume_item* consume_item::default_instance_ = NULL;

consume_item* consume_item::New() const {
  return new consume_item;
}

void consume_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _hero_id_ = 0u;
    _item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool consume_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_id_)));
          set_has__hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__item_id;
        break;
      }

      // required uint32 _item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void consume_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_id(), output);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* consume_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_id(), target);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int consume_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hero_id = 1;
    if (has__hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_id());
    }

    // required uint32 _item_id = 2;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void consume_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const consume_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const consume_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void consume_item::MergeFrom(const consume_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_id()) {
      set__hero_id(from._hero_id());
    }
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void consume_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void consume_item::CopyFrom(const consume_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void consume_item::Swap(consume_item* other) {
  if (other != this) {
    std::swap(_hero_id_, other->_hero_id_);
    std::swap(_item_id_, other->_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata consume_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = consume_item_descriptor_;
  metadata.reflection = consume_item_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* shop_refresh_rtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_refresh_rtype_descriptor_;
}
bool shop_refresh_rtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const shop_refresh_rtype shop_refresh::sync;
const shop_refresh_rtype shop_refresh::auto_refresh;
const shop_refresh_rtype shop_refresh::manual_refresh;
const shop_refresh_rtype shop_refresh::rtype_MIN;
const shop_refresh_rtype shop_refresh::rtype_MAX;
const int shop_refresh::rtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int shop_refresh::kTypeFieldNumber;
const int shop_refresh::kShopIdFieldNumber;
#endif  // !_MSC_VER

shop_refresh::shop_refresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_refresh::InitAsDefaultInstance() {
}

shop_refresh::shop_refresh(const shop_refresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_refresh::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _shop_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_refresh::~shop_refresh() {
  SharedDtor();
}

void shop_refresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_refresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_refresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_refresh_descriptor_;
}

const shop_refresh& shop_refresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

shop_refresh* shop_refresh::default_instance_ = NULL;

shop_refresh* shop_refresh::New() const {
  return new shop_refresh;
}

void shop_refresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
    _shop_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_refresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.shop_refresh.rtype _type = 1 [default = sync];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::shop_refresh_rtype_IsValid(value)) {
            set__type(static_cast< ::up::shop_refresh_rtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__shop_id;
        break;
      }

      // required uint32 _shop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_shop_id_)));
          set_has__shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_refresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.shop_refresh.rtype _type = 1 [default = sync];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required uint32 _shop_id = 2;
  if (has__shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_refresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.shop_refresh.rtype _type = 1 [default = sync];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required uint32 _shop_id = 2;
  if (has__shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_refresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.shop_refresh.rtype _type = 1 [default = sync];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _shop_id = 2;
    if (has__shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_refresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_refresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_refresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_refresh::MergeFrom(const shop_refresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__shop_id()) {
      set__shop_id(from._shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_refresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_refresh::CopyFrom(const shop_refresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_refresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void shop_refresh::Swap(shop_refresh* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_shop_id_, other->_shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_refresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_refresh_descriptor_;
  metadata.reflection = shop_refresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_consume::kSidFieldNumber;
const int shop_consume::kSlotidFieldNumber;
const int shop_consume::kAmountFieldNumber;
#endif  // !_MSC_VER

shop_consume::shop_consume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_consume::InitAsDefaultInstance() {
}

shop_consume::shop_consume(const shop_consume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_consume::SharedCtor() {
  _cached_size_ = 0;
  _sid_ = 0u;
  _slotid_ = 0u;
  _amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_consume::~shop_consume() {
  SharedDtor();
}

void shop_consume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_consume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_consume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_consume_descriptor_;
}

const shop_consume& shop_consume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

shop_consume* shop_consume::default_instance_ = NULL;

shop_consume* shop_consume::New() const {
  return new shop_consume;
}

void shop_consume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _sid_ = 0u;
    _slotid_ = 0u;
    _amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_consume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_sid_)));
          set_has__sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__slotid;
        break;
      }

      // required uint32 _slotid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_slotid_)));
          set_has__slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__amount;
        break;
      }

      // required uint32 _amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_amount_)));
          set_has__amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_consume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _sid = 1;
  if (has__sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_sid(), output);
  }

  // required uint32 _slotid = 2;
  if (has__slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_slotid(), output);
  }

  // required uint32 _amount = 3;
  if (has__amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_consume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _sid = 1;
  if (has__sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_sid(), target);
  }

  // required uint32 _slotid = 2;
  if (has__slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_slotid(), target);
  }

  // required uint32 _amount = 3;
  if (has__amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_consume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _sid = 1;
    if (has__sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_sid());
    }

    // required uint32 _slotid = 2;
    if (has__slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_slotid());
    }

    // required uint32 _amount = 3;
    if (has__amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_consume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_consume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_consume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_consume::MergeFrom(const shop_consume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__sid()) {
      set__sid(from._sid());
    }
    if (from.has__slotid()) {
      set__slotid(from._slotid());
    }
    if (from.has__amount()) {
      set__amount(from._amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_consume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_consume::CopyFrom(const shop_consume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_consume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void shop_consume::Swap(shop_consume* other) {
  if (other != this) {
    std::swap(_sid_, other->_sid_);
    std::swap(_slotid_, other->_slotid_);
    std::swap(_amount_, other->_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_consume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_consume_descriptor_;
  metadata.reflection = shop_consume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_levelup::kHeroidFieldNumber;
const int skill_levelup::kOrderFieldNumber;
#endif  // !_MSC_VER

skill_levelup::skill_levelup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_levelup::InitAsDefaultInstance() {
}

skill_levelup::skill_levelup(const skill_levelup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_levelup::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_levelup::~skill_levelup() {
  SharedDtor();
}

void skill_levelup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_levelup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_levelup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_levelup_descriptor_;
}

const skill_levelup& skill_levelup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

skill_levelup* skill_levelup::default_instance_ = NULL;

skill_levelup* skill_levelup::New() const {
  return new skill_levelup;
}

void skill_levelup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
  }
  _order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_levelup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__order;
        break;
      }

      // repeated uint32 _order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__order())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__order())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_levelup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_heroid(), output);
  }

  // repeated uint32 _order = 2;
  for (int i = 0; i < this->_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_levelup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_heroid(), target);
  }

  // repeated uint32 _order = 2;
  for (int i = 0; i < this->_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_levelup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 1;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  // repeated uint32 _order = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_order_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_order(i));
    }
    total_size += 1 * this->_order_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_levelup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_levelup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_levelup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_levelup::MergeFrom(const skill_levelup& from) {
  GOOGLE_CHECK_NE(&from, this);
  _order_.MergeFrom(from._order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_levelup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_levelup::CopyFrom(const skill_levelup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_levelup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void skill_levelup::Swap(skill_levelup* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    _order_.Swap(&other->_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_levelup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_levelup_descriptor_;
  metadata.reflection = skill_levelup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sell_item::kItemFieldNumber;
#endif  // !_MSC_VER

sell_item::sell_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sell_item::InitAsDefaultInstance() {
}

sell_item::sell_item(const sell_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sell_item::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sell_item::~sell_item() {
  SharedDtor();
}

void sell_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sell_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sell_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sell_item_descriptor_;
}

const sell_item& sell_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

sell_item* sell_item::default_instance_ = NULL;

sell_item* sell_item::New() const {
  return new sell_item;
}

void sell_item::Clear() {
  _item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sell_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sell_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _item = 1;
  for (int i = 0; i < this->_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sell_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _item = 1;
  for (int i = 0; i < this->_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sell_item::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _item = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_item(i));
    }
    total_size += 1 * this->_item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sell_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sell_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sell_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sell_item::MergeFrom(const sell_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  _item_.MergeFrom(from._item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sell_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sell_item::CopyFrom(const sell_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sell_item::IsInitialized() const {

  return true;
}

void sell_item::Swap(sell_item* other) {
  if (other != this) {
    _item_.Swap(&other->_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sell_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sell_item_descriptor_;
  metadata.reflection = sell_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fragment_compose::kFragmentFieldNumber;
const int fragment_compose::kFragAmountFieldNumber;
#endif  // !_MSC_VER

fragment_compose::fragment_compose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fragment_compose::InitAsDefaultInstance() {
}

fragment_compose::fragment_compose(const fragment_compose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fragment_compose::SharedCtor() {
  _cached_size_ = 0;
  _fragment_ = 0u;
  _frag_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fragment_compose::~fragment_compose() {
  SharedDtor();
}

void fragment_compose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fragment_compose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fragment_compose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fragment_compose_descriptor_;
}

const fragment_compose& fragment_compose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

fragment_compose* fragment_compose::default_instance_ = NULL;

fragment_compose* fragment_compose::New() const {
  return new fragment_compose;
}

void fragment_compose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _fragment_ = 0u;
    _frag_amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fragment_compose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _fragment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_fragment_)));
          set_has__fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__frag_amount;
        break;
      }

      // required uint32 _frag_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__frag_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_frag_amount_)));
          set_has__frag_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fragment_compose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _fragment = 1;
  if (has__fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_fragment(), output);
  }

  // required uint32 _frag_amount = 2;
  if (has__frag_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_frag_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fragment_compose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _fragment = 1;
  if (has__fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_fragment(), target);
  }

  // required uint32 _frag_amount = 2;
  if (has__frag_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_frag_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fragment_compose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _fragment = 1;
    if (has__fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_fragment());
    }

    // required uint32 _frag_amount = 2;
    if (has__frag_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_frag_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fragment_compose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fragment_compose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fragment_compose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fragment_compose::MergeFrom(const fragment_compose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__fragment()) {
      set__fragment(from._fragment());
    }
    if (from.has__frag_amount()) {
      set__frag_amount(from._frag_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fragment_compose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fragment_compose::CopyFrom(const fragment_compose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fragment_compose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fragment_compose::Swap(fragment_compose* other) {
  if (other != this) {
    std::swap(_fragment_, other->_fragment_);
    std::swap(_frag_amount_, other->_frag_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fragment_compose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fragment_compose_descriptor_;
  metadata.reflection = fragment_compose_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* hero_equip_upgrade_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_upgrade_OP_TYPE_descriptor_;
}
bool hero_equip_upgrade_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const hero_equip_upgrade_OP_TYPE hero_equip_upgrade::normal;
const hero_equip_upgrade_OP_TYPE hero_equip_upgrade::boss;
const hero_equip_upgrade_OP_TYPE hero_equip_upgrade::OP_TYPE_MIN;
const hero_equip_upgrade_OP_TYPE hero_equip_upgrade::OP_TYPE_MAX;
const int hero_equip_upgrade::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int hero_equip_upgrade::kOpTypeFieldNumber;
const int hero_equip_upgrade::kHeroidFieldNumber;
const int hero_equip_upgrade::kSlotFieldNumber;
const int hero_equip_upgrade::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_equip_upgrade::hero_equip_upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_upgrade::InitAsDefaultInstance() {
}

hero_equip_upgrade::hero_equip_upgrade(const hero_equip_upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_upgrade::SharedCtor() {
  _cached_size_ = 0;
  _op_type_ = 1;
  _heroid_ = 0u;
  _slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_upgrade::~hero_equip_upgrade() {
  SharedDtor();
}

void hero_equip_upgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_upgrade_descriptor_;
}

const hero_equip_upgrade& hero_equip_upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero_equip_upgrade* hero_equip_upgrade::default_instance_ = NULL;

hero_equip_upgrade* hero_equip_upgrade::New() const {
  return new hero_equip_upgrade;
}

void hero_equip_upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _op_type_ = 1;
    _heroid_ = 0u;
    _slot_ = 0u;
  }
  _materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.hero_equip_upgrade.OP_TYPE _op_type = 1 [default = normal];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::hero_equip_upgrade_OP_TYPE_IsValid(value)) {
            set__op_type(static_cast< ::up::hero_equip_upgrade_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__heroid;
        break;
      }

      // required uint32 _heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__slot;
        break;
      }

      // required uint32 _slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_slot_)));
          set_has__slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__materials;
        break;
      }

      // repeated uint32 _materials = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.hero_equip_upgrade.OP_TYPE _op_type = 1 [default = normal];
  if (has__op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_op_type(), output);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_heroid(), output);
  }

  // required uint32 _slot = 3;
  if (has__slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_slot(), output);
  }

  // repeated uint32 _materials = 4;
  for (int i = 0; i < this->_materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.hero_equip_upgrade.OP_TYPE _op_type = 1 [default = normal];
  if (has__op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_op_type(), target);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_heroid(), target);
  }

  // required uint32 _slot = 3;
  if (has__slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_slot(), target);
  }

  // repeated uint32 _materials = 4;
  for (int i = 0; i < this->_materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.hero_equip_upgrade.OP_TYPE _op_type = 1 [default = normal];
    if (has__op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_op_type());
    }

    // required uint32 _heroid = 2;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

    // required uint32 _slot = 3;
    if (has__slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_slot());
    }

  }
  // repeated uint32 _materials = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_materials(i));
    }
    total_size += 1 * this->_materials_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_upgrade::MergeFrom(const hero_equip_upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  _materials_.MergeFrom(from._materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__op_type()) {
      set__op_type(from._op_type());
    }
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
    if (from.has__slot()) {
      set__slot(from._slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_upgrade::CopyFrom(const hero_equip_upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_upgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void hero_equip_upgrade::Swap(hero_equip_upgrade* other) {
  if (other != this) {
    std::swap(_op_type_, other->_op_type_);
    std::swap(_heroid_, other->_heroid_);
    std::swap(_slot_, other->_slot_);
    _materials_.Swap(&other->_materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_upgrade_descriptor_;
  metadata.reflection = hero_equip_upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip::kIndexFieldNumber;
const int hero_equip::kItemIdFieldNumber;
const int hero_equip::kExpFieldNumber;
#endif  // !_MSC_VER

hero_equip::hero_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip::InitAsDefaultInstance() {
}

hero_equip::hero_equip(const hero_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip::SharedCtor() {
  _cached_size_ = 0;
  _index_ = 0u;
  _item_id_ = 0u;
  _exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip::~hero_equip() {
  SharedDtor();
}

void hero_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_descriptor_;
}

const hero_equip& hero_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero_equip* hero_equip::default_instance_ = NULL;

hero_equip* hero_equip::New() const {
  return new hero_equip;
}

void hero_equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _index_ = 0u;
    _item_id_ = 0u;
    _exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_index_)));
          set_has__index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__item_id;
        break;
      }

      // required uint32 _item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__exp;
        break;
      }

      // required uint32 _exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _index = 1;
  if (has__index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_index(), output);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_item_id(), output);
  }

  // required uint32 _exp = 3;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _index = 1;
  if (has__index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_index(), target);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_item_id(), target);
  }

  // required uint32 _exp = 3;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _index = 1;
    if (has__index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_index());
    }

    // required uint32 _item_id = 2;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _exp = 3;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip::MergeFrom(const hero_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__index()) {
      set__index(from._index());
    }
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__exp()) {
      set__exp(from._exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip::CopyFrom(const hero_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void hero_equip::Swap(hero_equip* other) {
  if (other != this) {
    std::swap(_index_, other->_index_);
    std::swap(_item_id_, other->_item_id_);
    std::swap(_exp_, other->_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_descriptor_;
  metadata.reflection = hero_equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero::kTidFieldNumber;
const int hero::kRankFieldNumber;
const int hero::kLevelFieldNumber;
const int hero::kStarsFieldNumber;
const int hero::kExpFieldNumber;
const int hero::kGsFieldNumber;
const int hero::kStateFieldNumber;
const int hero::kSkillLevelsFieldNumber;
const int hero::kItemsFieldNumber;
const int hero::kArousalFieldNumber;
#endif  // !_MSC_VER

hero::hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero::InitAsDefaultInstance() {
  _arousal_ = const_cast< ::up::hero_arousal*>(&::up::hero_arousal::default_instance());
}

hero::hero(const hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _rank_ = 0u;
  _level_ = 0u;
  _stars_ = 0u;
  _exp_ = 0u;
  _gs_ = 0u;
  _state_ = 0;
  _arousal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero::~hero() {
  SharedDtor();
}

void hero::SharedDtor() {
  if (this != default_instance_) {
    delete _arousal_;
  }
}

void hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_descriptor_;
}

const hero& hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero* hero::default_instance_ = NULL;

hero* hero::New() const {
  return new hero;
}

void hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _tid_ = 0u;
    _rank_ = 0u;
    _level_ = 0u;
    _stars_ = 0u;
    _exp_ = 0u;
    _gs_ = 0u;
    _state_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has__arousal()) {
      if (_arousal_ != NULL) _arousal_->::up::hero_arousal::Clear();
    }
  }
  _skill_levels_.Clear();
  _items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__rank;
        break;
      }

      // optional uint32 _rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_rank_)));
          set_has__rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__level;
        break;
      }

      // required uint32 _level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_level_)));
          set_has__level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__stars;
        break;
      }

      // required uint32 _stars = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stars_)));
          set_has__stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse__exp;
        break;
      }

      // required uint32 _exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_exp_)));
          set_has__exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__gs;
        break;
      }

      // required uint32 _gs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gs_)));
          set_has__gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse__state;
        break;
      }

      // required .up.hero_status _state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::hero_status_IsValid(value)) {
            set__state(static_cast< ::up::hero_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse__skill_levels;
        break;
      }

      // repeated uint32 _skill_levels = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__skill_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable__skill_levels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__skill_levels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse__skill_levels;
        if (input->ExpectTag(74)) goto parse__items;
        break;
      }

      // repeated .up.hero_equip _items = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse__items;
        if (input->ExpectTag(82)) goto parse__arousal;
        break;
      }

      // optional .up.hero_arousal _arousal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__arousal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__arousal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_rank(), output);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_level(), output);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_stars(), output);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_exp(), output);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_gs(), output);
  }

  // required .up.hero_status _state = 7;
  if (has__state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->_state(), output);
  }

  // repeated uint32 _skill_levels = 8;
  for (int i = 0; i < this->_skill_levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->_skill_levels(i), output);
  }

  // repeated .up.hero_equip _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_items(i), output);
  }

  // optional .up.hero_arousal _arousal = 10;
  if (has__arousal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_arousal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // optional uint32 _rank = 2;
  if (has__rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_rank(), target);
  }

  // required uint32 _level = 3;
  if (has__level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_level(), target);
  }

  // required uint32 _stars = 4;
  if (has__stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_stars(), target);
  }

  // required uint32 _exp = 5;
  if (has__exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_exp(), target);
  }

  // required uint32 _gs = 6;
  if (has__gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_gs(), target);
  }

  // required .up.hero_status _state = 7;
  if (has__state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->_state(), target);
  }

  // repeated uint32 _skill_levels = 8;
  for (int i = 0; i < this->_skill_levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->_skill_levels(i), target);
  }

  // repeated .up.hero_equip _items = 9;
  for (int i = 0; i < this->_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_items(i), target);
  }

  // optional .up.hero_arousal _arousal = 10;
  if (has__arousal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_arousal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // optional uint32 _rank = 2;
    if (has__rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_rank());
    }

    // required uint32 _level = 3;
    if (has__level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_level());
    }

    // required uint32 _stars = 4;
    if (has__stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stars());
    }

    // required uint32 _exp = 5;
    if (has__exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_exp());
    }

    // required uint32 _gs = 6;
    if (has__gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gs());
    }

    // required .up.hero_status _state = 7;
    if (has__state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_state());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .up.hero_arousal _arousal = 10;
    if (has__arousal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_arousal());
    }

  }
  // repeated uint32 _skill_levels = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->_skill_levels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_skill_levels(i));
    }
    total_size += 1 * this->_skill_levels_size() + data_size;
  }

  // repeated .up.hero_equip _items = 9;
  total_size += 1 * this->_items_size();
  for (int i = 0; i < this->_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero::MergeFrom(const hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  _skill_levels_.MergeFrom(from._skill_levels_);
  _items_.MergeFrom(from._items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__rank()) {
      set__rank(from._rank());
    }
    if (from.has__level()) {
      set__level(from._level());
    }
    if (from.has__stars()) {
      set__stars(from._stars());
    }
    if (from.has__exp()) {
      set__exp(from._exp());
    }
    if (from.has__gs()) {
      set__gs(from._gs());
    }
    if (from.has__state()) {
      set__state(from._state());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has__arousal()) {
      mutable__arousal()->::up::hero_arousal::MergeFrom(from._arousal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero::CopyFrom(const hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  for (int i = 0; i < _items_size(); i++) {
    if (!this->_items(i).IsInitialized()) return false;
  }
  if (has__arousal()) {
    if (!this->_arousal().IsInitialized()) return false;
  }
  return true;
}

void hero::Swap(hero* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_rank_, other->_rank_);
    std::swap(_level_, other->_level_);
    std::swap(_stars_, other->_stars_);
    std::swap(_exp_, other->_exp_);
    std::swap(_gs_, other->_gs_);
    std::swap(_state_, other->_state_);
    _skill_levels_.Swap(&other->_skill_levels_);
    _items_.Swap(&other->_items_);
    std::swap(_arousal_, other->_arousal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_descriptor_;
  metadata.reflection = hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_arousal::kStatusFieldNumber;
const int hero_arousal::kStrFieldNumber;
const int hero_arousal::kAgiFieldNumber;
const int hero_arousal::kIntFieldNumber;
const int hero_arousal::kStrVarFieldNumber;
const int hero_arousal::kAgiVarFieldNumber;
const int hero_arousal::kIntVarFieldNumber;
const int hero_arousal::kCostGoldFieldNumber;
const int hero_arousal::kCostDiamondFieldNumber;
const int hero_arousal::kAroExpFieldNumber;
#endif  // !_MSC_VER

hero_arousal::hero_arousal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_arousal::InitAsDefaultInstance() {
}

hero_arousal::hero_arousal(const hero_arousal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_arousal::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 0u;
  _str_ = 0u;
  _agi_ = 0u;
  _int_ = 0u;
  _str_var_ = 0;
  _agi_var_ = 0;
  _int_var_ = 0;
  _cost_gold_ = 0u;
  _cost_diamond_ = 0u;
  _aro_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_arousal::~hero_arousal() {
  SharedDtor();
}

void hero_arousal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_arousal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_arousal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_arousal_descriptor_;
}

const hero_arousal& hero_arousal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero_arousal* hero_arousal::default_instance_ = NULL;

hero_arousal* hero_arousal::New() const {
  return new hero_arousal;
}

void hero_arousal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _status_ = 0u;
    _str_ = 0u;
    _agi_ = 0u;
    _int_ = 0u;
    _str_var_ = 0;
    _agi_var_ = 0;
    _int_var_ = 0;
    _cost_gold_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    _cost_diamond_ = 0u;
    _aro_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_arousal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_status_)));
          set_has__status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__str;
        break;
      }

      // required uint32 _str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_str_)));
          set_has__str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__agi;
        break;
      }

      // required uint32 _agi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__agi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_agi_)));
          set_has__agi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__int;
        break;
      }

      // required uint32 _int = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_int_)));
          set_has__int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse__str_var;
        break;
      }

      // required int32 _str_var = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__str_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_str_var_)));
          set_has__str_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__agi_var;
        break;
      }

      // required int32 _agi_var = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__agi_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_agi_var_)));
          set_has__agi_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse__int_var;
        break;
      }

      // required int32 _int_var = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__int_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &_int_var_)));
          set_has__int_var();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse__cost_gold;
        break;
      }

      // required uint32 _cost_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cost_gold_)));
          set_has__cost_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse__cost_diamond;
        break;
      }

      // required uint32 _cost_diamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_cost_diamond_)));
          set_has__cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse__aro_exp;
        break;
      }

      // required uint32 _aro_exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__aro_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_aro_exp_)));
          set_has__aro_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_arousal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_status(), output);
  }

  // required uint32 _str = 2;
  if (has__str()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_str(), output);
  }

  // required uint32 _agi = 3;
  if (has__agi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_agi(), output);
  }

  // required uint32 _int = 4;
  if (has__int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_int(), output);
  }

  // required int32 _str_var = 5;
  if (has__str_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->_str_var(), output);
  }

  // required int32 _agi_var = 6;
  if (has__agi_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->_agi_var(), output);
  }

  // required int32 _int_var = 7;
  if (has__int_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->_int_var(), output);
  }

  // required uint32 _cost_gold = 8;
  if (has__cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->_cost_gold(), output);
  }

  // required uint32 _cost_diamond = 9;
  if (has__cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->_cost_diamond(), output);
  }

  // required uint32 _aro_exp = 10;
  if (has__aro_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->_aro_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_arousal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_status(), target);
  }

  // required uint32 _str = 2;
  if (has__str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_str(), target);
  }

  // required uint32 _agi = 3;
  if (has__agi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_agi(), target);
  }

  // required uint32 _int = 4;
  if (has__int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_int(), target);
  }

  // required int32 _str_var = 5;
  if (has__str_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->_str_var(), target);
  }

  // required int32 _agi_var = 6;
  if (has__agi_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->_agi_var(), target);
  }

  // required int32 _int_var = 7;
  if (has__int_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->_int_var(), target);
  }

  // required uint32 _cost_gold = 8;
  if (has__cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->_cost_gold(), target);
  }

  // required uint32 _cost_diamond = 9;
  if (has__cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->_cost_diamond(), target);
  }

  // required uint32 _aro_exp = 10;
  if (has__aro_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->_aro_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_arousal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_status());
    }

    // required uint32 _str = 2;
    if (has__str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_str());
    }

    // required uint32 _agi = 3;
    if (has__agi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_agi());
    }

    // required uint32 _int = 4;
    if (has__int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_int());
    }

    // required int32 _str_var = 5;
    if (has__str_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_str_var());
    }

    // required int32 _agi_var = 6;
    if (has__agi_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_agi_var());
    }

    // required int32 _int_var = 7;
    if (has__int_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->_int_var());
    }

    // required uint32 _cost_gold = 8;
    if (has__cost_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cost_gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 _cost_diamond = 9;
    if (has__cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_cost_diamond());
    }

    // required uint32 _aro_exp = 10;
    if (has__aro_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_aro_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_arousal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_arousal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_arousal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_arousal::MergeFrom(const hero_arousal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
    if (from.has__str()) {
      set__str(from._str());
    }
    if (from.has__agi()) {
      set__agi(from._agi());
    }
    if (from.has__int()) {
      set__int(from._int());
    }
    if (from.has__str_var()) {
      set__str_var(from._str_var());
    }
    if (from.has__agi_var()) {
      set__agi_var(from._agi_var());
    }
    if (from.has__int_var()) {
      set__int_var(from._int_var());
    }
    if (from.has__cost_gold()) {
      set__cost_gold(from._cost_gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__cost_diamond()) {
      set__cost_diamond(from._cost_diamond());
    }
    if (from.has__aro_exp()) {
      set__aro_exp(from._aro_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_arousal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_arousal::CopyFrom(const hero_arousal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_arousal::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void hero_arousal::Swap(hero_arousal* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_str_, other->_str_);
    std::swap(_agi_, other->_agi_);
    std::swap(_int_, other->_int_);
    std::swap(_str_var_, other->_str_var_);
    std::swap(_agi_var_, other->_agi_var_);
    std::swap(_int_var_, other->_int_var_);
    std::swap(_cost_gold_, other->_cost_gold_);
    std::swap(_cost_diamond_, other->_cost_diamond_);
    std::swap(_aro_exp_, other->_aro_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_arousal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_arousal_descriptor_;
  metadata.reflection = hero_arousal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tutorial::kRecordFieldNumber;
#endif  // !_MSC_VER

tutorial::tutorial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tutorial::InitAsDefaultInstance() {
}

tutorial::tutorial(const tutorial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tutorial::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tutorial::~tutorial() {
  SharedDtor();
}

void tutorial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tutorial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tutorial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tutorial_descriptor_;
}

const tutorial& tutorial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tutorial* tutorial::default_instance_ = NULL;

tutorial* tutorial::New() const {
  return new tutorial;
}

void tutorial::Clear() {
  _record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tutorial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tutorial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _record = 1;
  for (int i = 0; i < this->_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tutorial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _record = 1;
  for (int i = 0; i < this->_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tutorial::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _record = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_record(i));
    }
    total_size += 1 * this->_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tutorial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tutorial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tutorial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tutorial::MergeFrom(const tutorial& from) {
  GOOGLE_CHECK_NE(&from, this);
  _record_.MergeFrom(from._record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tutorial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tutorial::CopyFrom(const tutorial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tutorial::IsInitialized() const {

  return true;
}

void tutorial::Swap(tutorial* other) {
  if (other != this) {
    _record_.Swap(&other->_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tutorial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tutorial_descriptor_;
  metadata.reflection = tutorial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_task::kTaskFieldNumber;
#endif  // !_MSC_VER

trigger_task::trigger_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trigger_task::InitAsDefaultInstance() {
}

trigger_task::trigger_task(const trigger_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trigger_task::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_task::~trigger_task() {
  SharedDtor();
}

void trigger_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_task_descriptor_;
}

const trigger_task& trigger_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

trigger_task* trigger_task::default_instance_ = NULL;

trigger_task* trigger_task::New() const {
  return new trigger_task;
}

void trigger_task::Clear() {
  _task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__task())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__task())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trigger_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _task = 1;
  for (int i = 0; i < this->_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trigger_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _task = 1;
  for (int i = 0; i < this->_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trigger_task::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _task = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_task(i));
    }
    total_size += 1 * this->_task_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_task::MergeFrom(const trigger_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  _task_.MergeFrom(from._task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_task::CopyFrom(const trigger_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_task::IsInitialized() const {

  return true;
}

void trigger_task::Swap(trigger_task* other) {
  if (other != this) {
    _task_.Swap(&other->_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_task_descriptor_;
  metadata.reflection = trigger_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int require_rewards::kLineFieldNumber;
const int require_rewards::kIdFieldNumber;
#endif  // !_MSC_VER

require_rewards::require_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void require_rewards::InitAsDefaultInstance() {
}

require_rewards::require_rewards(const require_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void require_rewards::SharedCtor() {
  _cached_size_ = 0;
  _line_ = 0u;
  _id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

require_rewards::~require_rewards() {
  SharedDtor();
}

void require_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void require_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* require_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return require_rewards_descriptor_;
}

const require_rewards& require_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

require_rewards* require_rewards::default_instance_ = NULL;

require_rewards* require_rewards::New() const {
  return new require_rewards;
}

void require_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _line_ = 0u;
    _id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool require_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_line_)));
          set_has__line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // required uint32 _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void require_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _line = 1;
  if (has__line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_line(), output);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* require_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _line = 1;
  if (has__line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_line(), target);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int require_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _line = 1;
    if (has__line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_line());
    }

    // required uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void require_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const require_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const require_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void require_rewards::MergeFrom(const require_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__line()) {
      set__line(from._line());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void require_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void require_rewards::CopyFrom(const require_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_rewards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void require_rewards::Swap(require_rewards* other) {
  if (other != this) {
    std::swap(_line_, other->_line_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata require_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = require_rewards_descriptor_;
  metadata.reflection = require_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_task_status::kLineFieldNumber;
const int change_task_status::kIdFieldNumber;
const int change_task_status::kOperationFieldNumber;
#endif  // !_MSC_VER

change_task_status::change_task_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_task_status::InitAsDefaultInstance() {
}

change_task_status::change_task_status(const change_task_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_task_status::SharedCtor() {
  _cached_size_ = 0;
  _line_ = 0u;
  _id_ = 0u;
  _operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_task_status::~change_task_status() {
  SharedDtor();
}

void change_task_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void change_task_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_task_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_task_status_descriptor_;
}

const change_task_status& change_task_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

change_task_status* change_task_status::default_instance_ = NULL;

change_task_status* change_task_status::New() const {
  return new change_task_status;
}

void change_task_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _line_ = 0u;
    _id_ = 0u;
    _operation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_task_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_line_)));
          set_has__line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__id;
        break;
      }

      // required uint32 _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__operation;
        break;
      }

      // required uint32 _operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_operation_)));
          set_has__operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_task_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _line = 1;
  if (has__line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_line(), output);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_id(), output);
  }

  // required uint32 _operation = 3;
  if (has__operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_task_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _line = 1;
  if (has__line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_line(), target);
  }

  // required uint32 _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_id(), target);
  }

  // required uint32 _operation = 3;
  if (has__operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_task_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _line = 1;
    if (has__line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_line());
    }

    // required uint32 _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _operation = 3;
    if (has__operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_task_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_task_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_task_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_task_status::MergeFrom(const change_task_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__line()) {
      set__line(from._line());
    }
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__operation()) {
      set__operation(from._operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_task_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_task_status::CopyFrom(const change_task_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_task_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void change_task_status::Swap(change_task_status* other) {
  if (other != this) {
    std::swap(_line_, other->_line_);
    std::swap(_id_, other->_id_);
    std::swap(_operation_, other->_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_task_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_task_status_descriptor_;
  metadata.reflection = change_task_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_job::kJobsFieldNumber;
#endif  // !_MSC_VER

trigger_job::trigger_job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trigger_job::InitAsDefaultInstance() {
}

trigger_job::trigger_job(const trigger_job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trigger_job::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_job::~trigger_job() {
  SharedDtor();
}

void trigger_job::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_job_descriptor_;
}

const trigger_job& trigger_job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

trigger_job* trigger_job::default_instance_ = NULL;

trigger_job* trigger_job::New() const {
  return new trigger_job;
}

void trigger_job::Clear() {
  _jobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _jobs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__jobs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__jobs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__jobs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trigger_job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _jobs = 1;
  for (int i = 0; i < this->_jobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_jobs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trigger_job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _jobs = 1;
  for (int i = 0; i < this->_jobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_jobs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trigger_job::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _jobs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_jobs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_jobs(i));
    }
    total_size += 1 * this->_jobs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_job::MergeFrom(const trigger_job& from) {
  GOOGLE_CHECK_NE(&from, this);
  _jobs_.MergeFrom(from._jobs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_job::CopyFrom(const trigger_job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_job::IsInitialized() const {

  return true;
}

void trigger_job::Swap(trigger_job* other) {
  if (other != this) {
    _jobs_.Swap(&other->_jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_job_descriptor_;
  metadata.reflection = trigger_job_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_rewards::kJobFieldNumber;
#endif  // !_MSC_VER

job_rewards::job_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job_rewards::InitAsDefaultInstance() {
}

job_rewards::job_rewards(const job_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job_rewards::SharedCtor() {
  _cached_size_ = 0;
  _job_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_rewards::~job_rewards() {
  SharedDtor();
}

void job_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_rewards_descriptor_;
}

const job_rewards& job_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

job_rewards* job_rewards::default_instance_ = NULL;

job_rewards* job_rewards::New() const {
  return new job_rewards;
}

void job_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _job_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_job_)));
          set_has__job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _job = 1;
  if (has__job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _job = 1;
  if (has__job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _job = 1;
    if (has__job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_rewards::MergeFrom(const job_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__job()) {
      set__job(from._job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_rewards::CopyFrom(const job_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_rewards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void job_rewards::Swap(job_rewards* other) {
  if (other != this) {
    std::swap(_job_, other->_job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_rewards_descriptor_;
  metadata.reflection = job_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int suspend_report::kGametimeFieldNumber;
#endif  // !_MSC_VER

suspend_report::suspend_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void suspend_report::InitAsDefaultInstance() {
}

suspend_report::suspend_report(const suspend_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void suspend_report::SharedCtor() {
  _cached_size_ = 0;
  _gametime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

suspend_report::~suspend_report() {
  SharedDtor();
}

void suspend_report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void suspend_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* suspend_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return suspend_report_descriptor_;
}

const suspend_report& suspend_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

suspend_report* suspend_report::default_instance_ = NULL;

suspend_report* suspend_report::New() const {
  return new suspend_report;
}

void suspend_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _gametime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool suspend_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _gametime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_gametime_)));
          set_has__gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void suspend_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _gametime = 1;
  if (has__gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_gametime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* suspend_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _gametime = 1;
  if (has__gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_gametime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int suspend_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _gametime = 1;
    if (has__gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_gametime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void suspend_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const suspend_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const suspend_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void suspend_report::MergeFrom(const suspend_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__gametime()) {
      set__gametime(from._gametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void suspend_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void suspend_report::CopyFrom(const suspend_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool suspend_report::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void suspend_report::Swap(suspend_report* other) {
  if (other != this) {
    std::swap(_gametime_, other->_gametime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata suspend_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = suspend_report_descriptor_;
  metadata.reflection = suspend_report_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* reset_elite_rtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reset_elite_rtype_descriptor_;
}
bool reset_elite_rtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const reset_elite_rtype reset_elite::daily_free;
const reset_elite_rtype reset_elite::vip_reset;
const reset_elite_rtype reset_elite::rtype_MIN;
const reset_elite_rtype reset_elite::rtype_MAX;
const int reset_elite::rtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int reset_elite::kTypeFieldNumber;
const int reset_elite::kStageidFieldNumber;
#endif  // !_MSC_VER

reset_elite::reset_elite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reset_elite::InitAsDefaultInstance() {
}

reset_elite::reset_elite(const reset_elite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reset_elite::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reset_elite::~reset_elite() {
  SharedDtor();
}

void reset_elite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reset_elite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reset_elite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reset_elite_descriptor_;
}

const reset_elite& reset_elite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

reset_elite* reset_elite::default_instance_ = NULL;

reset_elite* reset_elite::New() const {
  return new reset_elite;
}

void reset_elite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
    _stageid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reset_elite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.reset_elite.rtype _type = 1 [default = daily_free];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::reset_elite_rtype_IsValid(value)) {
            set__type(static_cast< ::up::reset_elite_rtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__stageid;
        break;
      }

      // optional uint32 _stageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stageid_)));
          set_has__stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reset_elite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.reset_elite.rtype _type = 1 [default = daily_free];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional uint32 _stageid = 2;
  if (has__stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reset_elite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.reset_elite.rtype _type = 1 [default = daily_free];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional uint32 _stageid = 2;
  if (has__stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reset_elite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.reset_elite.rtype _type = 1 [default = daily_free];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional uint32 _stageid = 2;
    if (has__stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reset_elite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reset_elite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reset_elite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reset_elite::MergeFrom(const reset_elite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__stageid()) {
      set__stageid(from._stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reset_elite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reset_elite::CopyFrom(const reset_elite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reset_elite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void reset_elite::Swap(reset_elite* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_stageid_, other->_stageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reset_elite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reset_elite_descriptor_;
  metadata.reflection = reset_elite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* sweep_stage_rtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sweep_stage_rtype_descriptor_;
}
bool sweep_stage_rtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sweep_stage_rtype sweep_stage::sweep_with_ticket;
const sweep_stage_rtype sweep_stage::sweep_with_rmb;
const sweep_stage_rtype sweep_stage::rtype_MIN;
const sweep_stage_rtype sweep_stage::rtype_MAX;
const int sweep_stage::rtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int sweep_stage::kTypeFieldNumber;
const int sweep_stage::kStageidFieldNumber;
const int sweep_stage::kTimesFieldNumber;
#endif  // !_MSC_VER

sweep_stage::sweep_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sweep_stage::InitAsDefaultInstance() {
}

sweep_stage::sweep_stage(const sweep_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sweep_stage::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _stageid_ = 0u;
  _times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sweep_stage::~sweep_stage() {
  SharedDtor();
}

void sweep_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sweep_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sweep_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sweep_stage_descriptor_;
}

const sweep_stage& sweep_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

sweep_stage* sweep_stage::default_instance_ = NULL;

sweep_stage* sweep_stage::New() const {
  return new sweep_stage;
}

void sweep_stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
    _stageid_ = 0u;
    _times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sweep_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.sweep_stage.rtype _type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::sweep_stage_rtype_IsValid(value)) {
            set__type(static_cast< ::up::sweep_stage_rtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__stageid;
        break;
      }

      // required uint32 _stageid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stageid_)));
          set_has__stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__times;
        break;
      }

      // optional uint32 _times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_times_)));
          set_has__times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sweep_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.sweep_stage.rtype _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required uint32 _stageid = 2;
  if (has__stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stageid(), output);
  }

  // optional uint32 _times = 3;
  if (has__times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sweep_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.sweep_stage.rtype _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required uint32 _stageid = 2;
  if (has__stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stageid(), target);
  }

  // optional uint32 _times = 3;
  if (has__times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sweep_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.sweep_stage.rtype _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required uint32 _stageid = 2;
    if (has__stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stageid());
    }

    // optional uint32 _times = 3;
    if (has__times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sweep_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sweep_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sweep_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sweep_stage::MergeFrom(const sweep_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__stageid()) {
      set__stageid(from._stageid());
    }
    if (from.has__times()) {
      set__times(from._times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sweep_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sweep_stage::CopyFrom(const sweep_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sweep_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sweep_stage::Swap(sweep_stage* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_stageid_, other->_stageid_);
    std::swap(_times_, other->_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sweep_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sweep_stage_descriptor_;
  metadata.reflection = sweep_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

buy_skill_stren_point::buy_skill_stren_point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_skill_stren_point::InitAsDefaultInstance() {
}

buy_skill_stren_point::buy_skill_stren_point(const buy_skill_stren_point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_skill_stren_point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_skill_stren_point::~buy_skill_stren_point() {
  SharedDtor();
}

void buy_skill_stren_point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_skill_stren_point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_skill_stren_point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_skill_stren_point_descriptor_;
}

const buy_skill_stren_point& buy_skill_stren_point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

buy_skill_stren_point* buy_skill_stren_point::default_instance_ = NULL;

buy_skill_stren_point* buy_skill_stren_point::New() const {
  return new buy_skill_stren_point;
}

void buy_skill_stren_point::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_skill_stren_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void buy_skill_stren_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_skill_stren_point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_skill_stren_point::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_skill_stren_point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_skill_stren_point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_skill_stren_point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_skill_stren_point::MergeFrom(const buy_skill_stren_point& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_skill_stren_point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_skill_stren_point::CopyFrom(const buy_skill_stren_point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_skill_stren_point::IsInitialized() const {

  return true;
}

void buy_skill_stren_point::Swap(buy_skill_stren_point* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_skill_stren_point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_skill_stren_point_descriptor_;
  metadata.reflection = buy_skill_stren_point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ask_magicsoul::ask_magicsoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ask_magicsoul::InitAsDefaultInstance() {
}

ask_magicsoul::ask_magicsoul(const ask_magicsoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ask_magicsoul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_magicsoul::~ask_magicsoul() {
  SharedDtor();
}

void ask_magicsoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ask_magicsoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_magicsoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_magicsoul_descriptor_;
}

const ask_magicsoul& ask_magicsoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

ask_magicsoul* ask_magicsoul::default_instance_ = NULL;

ask_magicsoul* ask_magicsoul::New() const {
  return new ask_magicsoul;
}

void ask_magicsoul::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_magicsoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ask_magicsoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ask_magicsoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ask_magicsoul::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_magicsoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_magicsoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_magicsoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_magicsoul::MergeFrom(const ask_magicsoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_magicsoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_magicsoul::CopyFrom(const ask_magicsoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_magicsoul::IsInitialized() const {

  return true;
}

void ask_magicsoul::Swap(ask_magicsoul* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_magicsoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_magicsoul_descriptor_;
  metadata.reflection = ask_magicsoul_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* tavern_draw_draw_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_draw_draw_type_descriptor_;
}
bool tavern_draw_draw_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tavern_draw_draw_type tavern_draw::single;
const tavern_draw_draw_type tavern_draw::combo;
const tavern_draw_draw_type tavern_draw::stone;
const tavern_draw_draw_type tavern_draw::free;
const tavern_draw_draw_type tavern_draw::draw_type_MIN;
const tavern_draw_draw_type tavern_draw::draw_type_MAX;
const int tavern_draw::draw_type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* tavern_draw_box_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_draw_box_type_descriptor_;
}
bool tavern_draw_box_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tavern_draw_box_type tavern_draw::green;
const tavern_draw_box_type tavern_draw::blue;
const tavern_draw_box_type tavern_draw::purple;
const tavern_draw_box_type tavern_draw::magicsoul;
const tavern_draw_box_type tavern_draw::stone_green;
const tavern_draw_box_type tavern_draw::stone_blue;
const tavern_draw_box_type tavern_draw::stone_purple;
const tavern_draw_box_type tavern_draw::box_type_MIN;
const tavern_draw_box_type tavern_draw::box_type_MAX;
const int tavern_draw::box_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tavern_draw::kDrawTypeFieldNumber;
const int tavern_draw::kBoxTypeFieldNumber;
#endif  // !_MSC_VER

tavern_draw::tavern_draw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tavern_draw::InitAsDefaultInstance() {
}

tavern_draw::tavern_draw(const tavern_draw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tavern_draw::SharedCtor() {
  _cached_size_ = 0;
  _draw_type_ = 0;
  _box_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tavern_draw::~tavern_draw() {
  SharedDtor();
}

void tavern_draw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tavern_draw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tavern_draw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tavern_draw_descriptor_;
}

const tavern_draw& tavern_draw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tavern_draw* tavern_draw::default_instance_ = NULL;

tavern_draw* tavern_draw::New() const {
  return new tavern_draw;
}

void tavern_draw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _draw_type_ = 0;
    _box_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tavern_draw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.tavern_draw.draw_type _draw_type = 1 [default = single];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::tavern_draw_draw_type_IsValid(value)) {
            set__draw_type(static_cast< ::up::tavern_draw_draw_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__box_type;
        break;
      }

      // required .up.tavern_draw.box_type _box_type = 2 [default = green];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__box_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::tavern_draw_box_type_IsValid(value)) {
            set__box_type(static_cast< ::up::tavern_draw_box_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tavern_draw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.tavern_draw.draw_type _draw_type = 1 [default = single];
  if (has__draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_draw_type(), output);
  }

  // required .up.tavern_draw.box_type _box_type = 2 [default = green];
  if (has__box_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_box_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tavern_draw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.tavern_draw.draw_type _draw_type = 1 [default = single];
  if (has__draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_draw_type(), target);
  }

  // required .up.tavern_draw.box_type _box_type = 2 [default = green];
  if (has__box_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_box_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tavern_draw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.tavern_draw.draw_type _draw_type = 1 [default = single];
    if (has__draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_draw_type());
    }

    // required .up.tavern_draw.box_type _box_type = 2 [default = green];
    if (has__box_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_box_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tavern_draw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tavern_draw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tavern_draw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tavern_draw::MergeFrom(const tavern_draw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__draw_type()) {
      set__draw_type(from._draw_type());
    }
    if (from.has__box_type()) {
      set__box_type(from._box_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tavern_draw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tavern_draw::CopyFrom(const tavern_draw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tavern_draw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tavern_draw::Swap(tavern_draw* other) {
  if (other != this) {
    std::swap(_draw_type_, other->_draw_type_);
    std::swap(_box_type_, other->_box_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tavern_draw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tavern_draw_descriptor_;
  metadata.reflection = tavern_draw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_evolve::kHeroidFieldNumber;
#endif  // !_MSC_VER

hero_evolve::hero_evolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_evolve::InitAsDefaultInstance() {
}

hero_evolve::hero_evolve(const hero_evolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_evolve::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_evolve::~hero_evolve() {
  SharedDtor();
}

void hero_evolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_evolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_evolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_evolve_descriptor_;
}

const hero_evolve& hero_evolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

hero_evolve* hero_evolve::default_instance_ = NULL;

hero_evolve* hero_evolve::New() const {
  return new hero_evolve;
}

void hero_evolve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_evolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_evolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_evolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_evolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 1;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_evolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_evolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_evolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_evolve::MergeFrom(const hero_evolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_evolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_evolve::CopyFrom(const hero_evolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_evolve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void hero_evolve::Swap(hero_evolve* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_evolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_evolve_descriptor_;
  metadata.reflection = hero_evolve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_act_stage::kStageGroupFieldNumber;
const int enter_act_stage::kStageFieldNumber;
#endif  // !_MSC_VER

enter_act_stage::enter_act_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_act_stage::InitAsDefaultInstance() {
}

enter_act_stage::enter_act_stage(const enter_act_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_act_stage::SharedCtor() {
  _cached_size_ = 0;
  _stage_group_ = 0u;
  _stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_act_stage::~enter_act_stage() {
  SharedDtor();
}

void enter_act_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_act_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_act_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_act_stage_descriptor_;
}

const enter_act_stage& enter_act_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

enter_act_stage* enter_act_stage::default_instance_ = NULL;

enter_act_stage* enter_act_stage::New() const {
  return new enter_act_stage;
}

void enter_act_stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_group_ = 0u;
    _stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_act_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_group_)));
          set_has__stage_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__stage;
        break;
      }

      // required uint32 _stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_)));
          set_has__stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_act_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_group = 1;
  if (has__stage_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_group(), output);
  }

  // required uint32 _stage = 2;
  if (has__stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_act_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_group = 1;
  if (has__stage_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_group(), target);
  }

  // required uint32 _stage = 2;
  if (has__stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_act_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_group = 1;
    if (has__stage_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_group());
    }

    // required uint32 _stage = 2;
    if (has__stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_act_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_act_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_act_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_act_stage::MergeFrom(const enter_act_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_group()) {
      set__stage_group(from._stage_group());
    }
    if (from.has__stage()) {
      set__stage(from._stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_act_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_act_stage::CopyFrom(const enter_act_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_act_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void enter_act_stage::Swap(enter_act_stage* other) {
  if (other != this) {
    std::swap(_stage_group_, other->_stage_group_);
    std::swap(_stage_, other->_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_act_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_act_stage_descriptor_;
  metadata.reflection = enter_act_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ladder::kOpenPanelFieldNumber;
const int ladder::kApplyOpponentFieldNumber;
const int ladder::kStartBattleFieldNumber;
const int ladder::kEndBattleFieldNumber;
const int ladder::kSetLineupFieldNumber;
const int ladder::kQueryRecordsFieldNumber;
const int ladder::kQueryReplayFieldNumber;
const int ladder::kQueryRankboardFieldNumber;
const int ladder::kQueryOppoFieldNumber;
const int ladder::kClearBattleCdFieldNumber;
const int ladder::kDrawRankRewardFieldNumber;
const int ladder::kBuyBattleChanceFieldNumber;
#endif  // !_MSC_VER

ladder::ladder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ladder::InitAsDefaultInstance() {
  _open_panel_ = const_cast< ::up::open_panel*>(&::up::open_panel::default_instance());
  _apply_opponent_ = const_cast< ::up::apply_opponent*>(&::up::apply_opponent::default_instance());
  _start_battle_ = const_cast< ::up::start_battle*>(&::up::start_battle::default_instance());
  _end_battle_ = const_cast< ::up::end_battle*>(&::up::end_battle::default_instance());
  _set_lineup_ = const_cast< ::up::set_lineup*>(&::up::set_lineup::default_instance());
  _query_records_ = const_cast< ::up::query_records*>(&::up::query_records::default_instance());
  _query_replay_ = const_cast< ::up::query_replay*>(&::up::query_replay::default_instance());
  _query_rankboard_ = const_cast< ::up::query_rankboard*>(&::up::query_rankboard::default_instance());
  _query_oppo_ = const_cast< ::up::query_oppo_info*>(&::up::query_oppo_info::default_instance());
  _clear_battle_cd_ = const_cast< ::up::clear_battle_cd*>(&::up::clear_battle_cd::default_instance());
  _draw_rank_reward_ = const_cast< ::up::draw_rank_reward*>(&::up::draw_rank_reward::default_instance());
  _buy_battle_chance_ = const_cast< ::up::buy_battle_chance*>(&::up::buy_battle_chance::default_instance());
}

ladder::ladder(const ladder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ladder::SharedCtor() {
  _cached_size_ = 0;
  _open_panel_ = NULL;
  _apply_opponent_ = NULL;
  _start_battle_ = NULL;
  _end_battle_ = NULL;
  _set_lineup_ = NULL;
  _query_records_ = NULL;
  _query_replay_ = NULL;
  _query_rankboard_ = NULL;
  _query_oppo_ = NULL;
  _clear_battle_cd_ = NULL;
  _draw_rank_reward_ = NULL;
  _buy_battle_chance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ladder::~ladder() {
  SharedDtor();
}

void ladder::SharedDtor() {
  if (this != default_instance_) {
    delete _open_panel_;
    delete _apply_opponent_;
    delete _start_battle_;
    delete _end_battle_;
    delete _set_lineup_;
    delete _query_records_;
    delete _query_replay_;
    delete _query_rankboard_;
    delete _query_oppo_;
    delete _clear_battle_cd_;
    delete _draw_rank_reward_;
    delete _buy_battle_chance_;
  }
}

void ladder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ladder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ladder_descriptor_;
}

const ladder& ladder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

ladder* ladder::default_instance_ = NULL;

ladder* ladder::New() const {
  return new ladder;
}

void ladder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__open_panel()) {
      if (_open_panel_ != NULL) _open_panel_->::up::open_panel::Clear();
    }
    if (has__apply_opponent()) {
      if (_apply_opponent_ != NULL) _apply_opponent_->::up::apply_opponent::Clear();
    }
    if (has__start_battle()) {
      if (_start_battle_ != NULL) _start_battle_->::up::start_battle::Clear();
    }
    if (has__end_battle()) {
      if (_end_battle_ != NULL) _end_battle_->::up::end_battle::Clear();
    }
    if (has__set_lineup()) {
      if (_set_lineup_ != NULL) _set_lineup_->::up::set_lineup::Clear();
    }
    if (has__query_records()) {
      if (_query_records_ != NULL) _query_records_->::up::query_records::Clear();
    }
    if (has__query_replay()) {
      if (_query_replay_ != NULL) _query_replay_->::up::query_replay::Clear();
    }
    if (has__query_rankboard()) {
      if (_query_rankboard_ != NULL) _query_rankboard_->::up::query_rankboard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has__query_oppo()) {
      if (_query_oppo_ != NULL) _query_oppo_->::up::query_oppo_info::Clear();
    }
    if (has__clear_battle_cd()) {
      if (_clear_battle_cd_ != NULL) _clear_battle_cd_->::up::clear_battle_cd::Clear();
    }
    if (has__draw_rank_reward()) {
      if (_draw_rank_reward_ != NULL) _draw_rank_reward_->::up::draw_rank_reward::Clear();
    }
    if (has__buy_battle_chance()) {
      if (_buy_battle_chance_ != NULL) _buy_battle_chance_->::up::buy_battle_chance::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ladder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.open_panel _open_panel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_panel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__apply_opponent;
        break;
      }

      // optional .up.apply_opponent _apply_opponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__apply_opponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__apply_opponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__start_battle;
        break;
      }

      // optional .up.start_battle _start_battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__start_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__start_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__end_battle;
        break;
      }

      // optional .up.end_battle _end_battle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__end_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__end_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__set_lineup;
        break;
      }

      // optional .up.set_lineup _set_lineup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__query_records;
        break;
      }

      // optional .up.query_records _query_records = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__query_replay;
        break;
      }

      // optional .up.query_replay _query_replay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_replay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse__query_rankboard;
        break;
      }

      // optional .up.query_rankboard _query_rankboard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_rankboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_rankboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse__query_oppo;
        break;
      }

      // optional .up.query_oppo_info _query_oppo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_oppo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_oppo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse__clear_battle_cd;
        break;
      }

      // optional .up.clear_battle_cd _clear_battle_cd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__clear_battle_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__clear_battle_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse__draw_rank_reward;
        break;
      }

      // optional .up.draw_rank_reward _draw_rank_reward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__draw_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_rank_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse__buy_battle_chance;
        break;
      }

      // optional .up.buy_battle_chance _buy_battle_chance = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__buy_battle_chance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__buy_battle_chance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ladder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.open_panel _open_panel = 1;
  if (has__open_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_open_panel(), output);
  }

  // optional .up.apply_opponent _apply_opponent = 2;
  if (has__apply_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_apply_opponent(), output);
  }

  // optional .up.start_battle _start_battle = 3;
  if (has__start_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_start_battle(), output);
  }

  // optional .up.end_battle _end_battle = 4;
  if (has__end_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_end_battle(), output);
  }

  // optional .up.set_lineup _set_lineup = 5;
  if (has__set_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_set_lineup(), output);
  }

  // optional .up.query_records _query_records = 6;
  if (has__query_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_query_records(), output);
  }

  // optional .up.query_replay _query_replay = 7;
  if (has__query_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_query_replay(), output);
  }

  // optional .up.query_rankboard _query_rankboard = 8;
  if (has__query_rankboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_query_rankboard(), output);
  }

  // optional .up.query_oppo_info _query_oppo = 9;
  if (has__query_oppo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_query_oppo(), output);
  }

  // optional .up.clear_battle_cd _clear_battle_cd = 10;
  if (has__clear_battle_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_clear_battle_cd(), output);
  }

  // optional .up.draw_rank_reward _draw_rank_reward = 11;
  if (has__draw_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_draw_rank_reward(), output);
  }

  // optional .up.buy_battle_chance _buy_battle_chance = 12;
  if (has__buy_battle_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_buy_battle_chance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ladder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.open_panel _open_panel = 1;
  if (has__open_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_open_panel(), target);
  }

  // optional .up.apply_opponent _apply_opponent = 2;
  if (has__apply_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_apply_opponent(), target);
  }

  // optional .up.start_battle _start_battle = 3;
  if (has__start_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_start_battle(), target);
  }

  // optional .up.end_battle _end_battle = 4;
  if (has__end_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_end_battle(), target);
  }

  // optional .up.set_lineup _set_lineup = 5;
  if (has__set_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_set_lineup(), target);
  }

  // optional .up.query_records _query_records = 6;
  if (has__query_records()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_query_records(), target);
  }

  // optional .up.query_replay _query_replay = 7;
  if (has__query_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_query_replay(), target);
  }

  // optional .up.query_rankboard _query_rankboard = 8;
  if (has__query_rankboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_query_rankboard(), target);
  }

  // optional .up.query_oppo_info _query_oppo = 9;
  if (has__query_oppo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_query_oppo(), target);
  }

  // optional .up.clear_battle_cd _clear_battle_cd = 10;
  if (has__clear_battle_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_clear_battle_cd(), target);
  }

  // optional .up.draw_rank_reward _draw_rank_reward = 11;
  if (has__draw_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_draw_rank_reward(), target);
  }

  // optional .up.buy_battle_chance _buy_battle_chance = 12;
  if (has__buy_battle_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_buy_battle_chance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ladder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.open_panel _open_panel = 1;
    if (has__open_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_panel());
    }

    // optional .up.apply_opponent _apply_opponent = 2;
    if (has__apply_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_apply_opponent());
    }

    // optional .up.start_battle _start_battle = 3;
    if (has__start_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_start_battle());
    }

    // optional .up.end_battle _end_battle = 4;
    if (has__end_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_end_battle());
    }

    // optional .up.set_lineup _set_lineup = 5;
    if (has__set_lineup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_lineup());
    }

    // optional .up.query_records _query_records = 6;
    if (has__query_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_records());
    }

    // optional .up.query_replay _query_replay = 7;
    if (has__query_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_replay());
    }

    // optional .up.query_rankboard _query_rankboard = 8;
    if (has__query_rankboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_rankboard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .up.query_oppo_info _query_oppo = 9;
    if (has__query_oppo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_oppo());
    }

    // optional .up.clear_battle_cd _clear_battle_cd = 10;
    if (has__clear_battle_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_clear_battle_cd());
    }

    // optional .up.draw_rank_reward _draw_rank_reward = 11;
    if (has__draw_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_rank_reward());
    }

    // optional .up.buy_battle_chance _buy_battle_chance = 12;
    if (has__buy_battle_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_buy_battle_chance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ladder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ladder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ladder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ladder::MergeFrom(const ladder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__open_panel()) {
      mutable__open_panel()->::up::open_panel::MergeFrom(from._open_panel());
    }
    if (from.has__apply_opponent()) {
      mutable__apply_opponent()->::up::apply_opponent::MergeFrom(from._apply_opponent());
    }
    if (from.has__start_battle()) {
      mutable__start_battle()->::up::start_battle::MergeFrom(from._start_battle());
    }
    if (from.has__end_battle()) {
      mutable__end_battle()->::up::end_battle::MergeFrom(from._end_battle());
    }
    if (from.has__set_lineup()) {
      mutable__set_lineup()->::up::set_lineup::MergeFrom(from._set_lineup());
    }
    if (from.has__query_records()) {
      mutable__query_records()->::up::query_records::MergeFrom(from._query_records());
    }
    if (from.has__query_replay()) {
      mutable__query_replay()->::up::query_replay::MergeFrom(from._query_replay());
    }
    if (from.has__query_rankboard()) {
      mutable__query_rankboard()->::up::query_rankboard::MergeFrom(from._query_rankboard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__query_oppo()) {
      mutable__query_oppo()->::up::query_oppo_info::MergeFrom(from._query_oppo());
    }
    if (from.has__clear_battle_cd()) {
      mutable__clear_battle_cd()->::up::clear_battle_cd::MergeFrom(from._clear_battle_cd());
    }
    if (from.has__draw_rank_reward()) {
      mutable__draw_rank_reward()->::up::draw_rank_reward::MergeFrom(from._draw_rank_reward());
    }
    if (from.has__buy_battle_chance()) {
      mutable__buy_battle_chance()->::up::buy_battle_chance::MergeFrom(from._buy_battle_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ladder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ladder::CopyFrom(const ladder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ladder::IsInitialized() const {

  if (has__start_battle()) {
    if (!this->_start_battle().IsInitialized()) return false;
  }
  if (has__end_battle()) {
    if (!this->_end_battle().IsInitialized()) return false;
  }
  if (has__query_replay()) {
    if (!this->_query_replay().IsInitialized()) return false;
  }
  if (has__query_rankboard()) {
    if (!this->_query_rankboard().IsInitialized()) return false;
  }
  if (has__query_oppo()) {
    if (!this->_query_oppo().IsInitialized()) return false;
  }
  return true;
}

void ladder::Swap(ladder* other) {
  if (other != this) {
    std::swap(_open_panel_, other->_open_panel_);
    std::swap(_apply_opponent_, other->_apply_opponent_);
    std::swap(_start_battle_, other->_start_battle_);
    std::swap(_end_battle_, other->_end_battle_);
    std::swap(_set_lineup_, other->_set_lineup_);
    std::swap(_query_records_, other->_query_records_);
    std::swap(_query_replay_, other->_query_replay_);
    std::swap(_query_rankboard_, other->_query_rankboard_);
    std::swap(_query_oppo_, other->_query_oppo_);
    std::swap(_clear_battle_cd_, other->_clear_battle_cd_);
    std::swap(_draw_rank_reward_, other->_draw_rank_reward_);
    std::swap(_buy_battle_chance_, other->_buy_battle_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ladder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ladder_descriptor_;
  metadata.reflection = ladder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

open_panel::open_panel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void open_panel::InitAsDefaultInstance() {
}

open_panel::open_panel(const open_panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void open_panel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_panel::~open_panel() {
  SharedDtor();
}

void open_panel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void open_panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_panel_descriptor_;
}

const open_panel& open_panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

open_panel* open_panel::default_instance_ = NULL;

open_panel* open_panel::New() const {
  return new open_panel;
}

void open_panel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void open_panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* open_panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int open_panel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_panel::MergeFrom(const open_panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_panel::CopyFrom(const open_panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_panel::IsInitialized() const {

  return true;
}

void open_panel::Swap(open_panel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_panel_descriptor_;
  metadata.reflection = open_panel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

apply_opponent::apply_opponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void apply_opponent::InitAsDefaultInstance() {
}

apply_opponent::apply_opponent(const apply_opponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void apply_opponent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

apply_opponent::~apply_opponent() {
  SharedDtor();
}

void apply_opponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void apply_opponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* apply_opponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return apply_opponent_descriptor_;
}

const apply_opponent& apply_opponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

apply_opponent* apply_opponent::default_instance_ = NULL;

apply_opponent* apply_opponent::New() const {
  return new apply_opponent;
}

void apply_opponent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool apply_opponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void apply_opponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* apply_opponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int apply_opponent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void apply_opponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const apply_opponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const apply_opponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void apply_opponent::MergeFrom(const apply_opponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void apply_opponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_opponent::CopyFrom(const apply_opponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_opponent::IsInitialized() const {

  return true;
}

void apply_opponent::Swap(apply_opponent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata apply_opponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = apply_opponent_descriptor_;
  metadata.reflection = apply_opponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_battle::kOppoUserIdFieldNumber;
const int start_battle::kAttackLineupFieldNumber;
#endif  // !_MSC_VER

start_battle::start_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_battle::InitAsDefaultInstance() {
}

start_battle::start_battle(const start_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_battle::SharedCtor() {
  _cached_size_ = 0;
  _oppo_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_battle::~start_battle() {
  SharedDtor();
}

void start_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_battle_descriptor_;
}

const start_battle& start_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

start_battle* start_battle::default_instance_ = NULL;

start_battle* start_battle::New() const {
  return new start_battle;
}

void start_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _oppo_user_id_ = 0u;
  }
  _attack_lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _oppo_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_user_id_)));
          set_has__oppo_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__attack_lineup;
        break;
      }

      // repeated uint32 _attack_lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__attack_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__attack_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__attack_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__attack_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _oppo_user_id = 1;
  if (has__oppo_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_oppo_user_id(), output);
  }

  // repeated uint32 _attack_lineup = 2;
  for (int i = 0; i < this->_attack_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_attack_lineup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _oppo_user_id = 1;
  if (has__oppo_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_oppo_user_id(), target);
  }

  // repeated uint32 _attack_lineup = 2;
  for (int i = 0; i < this->_attack_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_attack_lineup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _oppo_user_id = 1;
    if (has__oppo_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_user_id());
    }

  }
  // repeated uint32 _attack_lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_attack_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_attack_lineup(i));
    }
    total_size += 1 * this->_attack_lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_battle::MergeFrom(const start_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _attack_lineup_.MergeFrom(from._attack_lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__oppo_user_id()) {
      set__oppo_user_id(from._oppo_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_battle::CopyFrom(const start_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void start_battle::Swap(start_battle* other) {
  if (other != this) {
    std::swap(_oppo_user_id_, other->_oppo_user_id_);
    _attack_lineup_.Swap(&other->_attack_lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_battle_descriptor_;
  metadata.reflection = start_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int end_battle::kResultFieldNumber;
#endif  // !_MSC_VER

end_battle::end_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void end_battle::InitAsDefaultInstance() {
}

end_battle::end_battle(const end_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void end_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

end_battle::~end_battle() {
  SharedDtor();
}

void end_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void end_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* end_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return end_battle_descriptor_;
}

const end_battle& end_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

end_battle* end_battle::default_instance_ = NULL;

end_battle* end_battle::New() const {
  return new end_battle;
}

void end_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool end_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.battle_result _result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::battle_result_IsValid(value)) {
            set__result(static_cast< ::up::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void end_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.battle_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* end_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.battle_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int end_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.battle_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void end_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const end_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const end_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void end_battle::MergeFrom(const end_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void end_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void end_battle::CopyFrom(const end_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool end_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void end_battle::Swap(end_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata end_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = end_battle_descriptor_;
  metadata.reflection = end_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_lineup::kLineupFieldNumber;
#endif  // !_MSC_VER

set_lineup::set_lineup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_lineup::InitAsDefaultInstance() {
}

set_lineup::set_lineup(const set_lineup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_lineup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_lineup::~set_lineup() {
  SharedDtor();
}

void set_lineup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_lineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_lineup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_lineup_descriptor_;
}

const set_lineup& set_lineup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

set_lineup* set_lineup::default_instance_ = NULL;

set_lineup* set_lineup::New() const {
  return new set_lineup;
}

void set_lineup::Clear() {
  _lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_lineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _lineup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_lineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _lineup = 1;
  for (int i = 0; i < this->_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_lineup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_lineup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _lineup = 1;
  for (int i = 0; i < this->_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_lineup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_lineup::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _lineup = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_lineup(i));
    }
    total_size += 1 * this->_lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_lineup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_lineup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_lineup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_lineup::MergeFrom(const set_lineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  _lineup_.MergeFrom(from._lineup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_lineup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_lineup::CopyFrom(const set_lineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_lineup::IsInitialized() const {

  return true;
}

void set_lineup::Swap(set_lineup* other) {
  if (other != this) {
    _lineup_.Swap(&other->_lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_lineup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_lineup_descriptor_;
  metadata.reflection = set_lineup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

query_records::query_records()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_records::InitAsDefaultInstance() {
}

query_records::query_records(const query_records& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_records::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_records::~query_records() {
  SharedDtor();
}

void query_records::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_records::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_records_descriptor_;
}

const query_records& query_records::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_records* query_records::default_instance_ = NULL;

query_records* query_records::New() const {
  return new query_records;
}

void query_records::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void query_records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_records::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_records::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_records::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_records* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_records*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_records::MergeFrom(const query_records& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_records::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_records::CopyFrom(const query_records& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_records::IsInitialized() const {

  return true;
}

void query_records::Swap(query_records* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_records::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_records_descriptor_;
  metadata.reflection = query_records_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_replay::kRecordIndexFieldNumber;
const int query_replay::kRecordSvridFieldNumber;
#endif  // !_MSC_VER

query_replay::query_replay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_replay::InitAsDefaultInstance() {
}

query_replay::query_replay(const query_replay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_replay::SharedCtor() {
  _cached_size_ = 0;
  _record_index_ = 0u;
  _record_svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_replay::~query_replay() {
  SharedDtor();
}

void query_replay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_replay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_replay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_replay_descriptor_;
}

const query_replay& query_replay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_replay* query_replay::default_instance_ = NULL;

query_replay* query_replay::New() const {
  return new query_replay;
}

void query_replay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _record_index_ = 0u;
    _record_svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_replay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _record_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_record_index_)));
          set_has__record_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__record_svrid;
        break;
      }

      // optional uint32 _record_svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__record_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_record_svrid_)));
          set_has__record_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_replay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _record_index = 1;
  if (has__record_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_record_index(), output);
  }

  // optional uint32 _record_svrid = 2;
  if (has__record_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_record_svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_replay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _record_index = 1;
  if (has__record_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_record_index(), target);
  }

  // optional uint32 _record_svrid = 2;
  if (has__record_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_record_svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_replay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _record_index = 1;
    if (has__record_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_record_index());
    }

    // optional uint32 _record_svrid = 2;
    if (has__record_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_record_svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_replay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_replay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_replay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_replay::MergeFrom(const query_replay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__record_index()) {
      set__record_index(from._record_index());
    }
    if (from.has__record_svrid()) {
      set__record_svrid(from._record_svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_replay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_replay::CopyFrom(const query_replay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_replay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_replay::Swap(query_replay* other) {
  if (other != this) {
    std::swap(_record_index_, other->_record_index_);
    std::swap(_record_svrid_, other->_record_svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_replay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_replay_descriptor_;
  metadata.reflection = query_replay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

sync_skill_stren::sync_skill_stren()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_skill_stren::InitAsDefaultInstance() {
}

sync_skill_stren::sync_skill_stren(const sync_skill_stren& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_skill_stren::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_skill_stren::~sync_skill_stren() {
  SharedDtor();
}

void sync_skill_stren::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_skill_stren::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_skill_stren::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_skill_stren_descriptor_;
}

const sync_skill_stren& sync_skill_stren::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

sync_skill_stren* sync_skill_stren::default_instance_ = NULL;

sync_skill_stren* sync_skill_stren::New() const {
  return new sync_skill_stren;
}

void sync_skill_stren::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_skill_stren::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void sync_skill_stren::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_skill_stren::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_skill_stren::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_skill_stren::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_skill_stren* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_skill_stren*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_skill_stren::MergeFrom(const sync_skill_stren& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_skill_stren::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_skill_stren::CopyFrom(const sync_skill_stren& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_skill_stren::IsInitialized() const {

  return true;
}

void sync_skill_stren::Swap(sync_skill_stren* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_skill_stren::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_skill_stren_descriptor_;
  metadata.reflection = sync_skill_stren_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* query_rankboard_rankboard_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_rankboard_rankboard_type_descriptor_;
}
bool query_rankboard_rankboard_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const query_rankboard_rankboard_type query_rankboard::static_c;
const query_rankboard_rankboard_type query_rankboard::dynamic;
const query_rankboard_rankboard_type query_rankboard::rankboard_type_MIN;
const query_rankboard_rankboard_type query_rankboard::rankboard_type_MAX;
const int query_rankboard::rankboard_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int query_rankboard::kTypeFieldNumber;
#endif  // !_MSC_VER

query_rankboard::query_rankboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_rankboard::InitAsDefaultInstance() {
}

query_rankboard::query_rankboard(const query_rankboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_rankboard::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_rankboard::~query_rankboard() {
  SharedDtor();
}

void query_rankboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_rankboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_rankboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_rankboard_descriptor_;
}

const query_rankboard& query_rankboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_rankboard* query_rankboard::default_instance_ = NULL;

query_rankboard* query_rankboard::New() const {
  return new query_rankboard;
}

void query_rankboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_rankboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.query_rankboard.rankboard_type _type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::query_rankboard_rankboard_type_IsValid(value)) {
            set__type(static_cast< ::up::query_rankboard_rankboard_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_rankboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.query_rankboard.rankboard_type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_rankboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.query_rankboard.rankboard_type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_rankboard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.query_rankboard.rankboard_type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_rankboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_rankboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_rankboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_rankboard::MergeFrom(const query_rankboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_rankboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_rankboard::CopyFrom(const query_rankboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_rankboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_rankboard::Swap(query_rankboard* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_rankboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_rankboard_descriptor_;
  metadata.reflection = query_rankboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_oppo_info::kOppoUserIdFieldNumber;
#endif  // !_MSC_VER

query_oppo_info::query_oppo_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_oppo_info::InitAsDefaultInstance() {
}

query_oppo_info::query_oppo_info(const query_oppo_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_oppo_info::SharedCtor() {
  _cached_size_ = 0;
  _oppo_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_oppo_info::~query_oppo_info() {
  SharedDtor();
}

void query_oppo_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_oppo_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_oppo_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_oppo_info_descriptor_;
}

const query_oppo_info& query_oppo_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_oppo_info* query_oppo_info::default_instance_ = NULL;

query_oppo_info* query_oppo_info::New() const {
  return new query_oppo_info;
}

void query_oppo_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _oppo_user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_oppo_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _oppo_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_oppo_user_id_)));
          set_has__oppo_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_oppo_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _oppo_user_id = 1;
  if (has__oppo_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_oppo_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_oppo_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _oppo_user_id = 1;
  if (has__oppo_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_oppo_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_oppo_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _oppo_user_id = 1;
    if (has__oppo_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_oppo_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_oppo_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_oppo_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_oppo_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_oppo_info::MergeFrom(const query_oppo_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__oppo_user_id()) {
      set__oppo_user_id(from._oppo_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_oppo_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_oppo_info::CopyFrom(const query_oppo_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_oppo_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_oppo_info::Swap(query_oppo_info* other) {
  if (other != this) {
    std::swap(_oppo_user_id_, other->_oppo_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_oppo_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_oppo_info_descriptor_;
  metadata.reflection = query_oppo_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

clear_battle_cd::clear_battle_cd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clear_battle_cd::InitAsDefaultInstance() {
}

clear_battle_cd::clear_battle_cd(const clear_battle_cd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clear_battle_cd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clear_battle_cd::~clear_battle_cd() {
  SharedDtor();
}

void clear_battle_cd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clear_battle_cd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clear_battle_cd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clear_battle_cd_descriptor_;
}

const clear_battle_cd& clear_battle_cd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

clear_battle_cd* clear_battle_cd::default_instance_ = NULL;

clear_battle_cd* clear_battle_cd::New() const {
  return new clear_battle_cd;
}

void clear_battle_cd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clear_battle_cd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void clear_battle_cd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clear_battle_cd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clear_battle_cd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clear_battle_cd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clear_battle_cd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clear_battle_cd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clear_battle_cd::MergeFrom(const clear_battle_cd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clear_battle_cd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clear_battle_cd::CopyFrom(const clear_battle_cd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clear_battle_cd::IsInitialized() const {

  return true;
}

void clear_battle_cd::Swap(clear_battle_cd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clear_battle_cd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clear_battle_cd_descriptor_;
  metadata.reflection = clear_battle_cd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

draw_rank_reward::draw_rank_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void draw_rank_reward::InitAsDefaultInstance() {
}

draw_rank_reward::draw_rank_reward(const draw_rank_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void draw_rank_reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_rank_reward::~draw_rank_reward() {
  SharedDtor();
}

void draw_rank_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void draw_rank_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_rank_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_rank_reward_descriptor_;
}

const draw_rank_reward& draw_rank_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

draw_rank_reward* draw_rank_reward::default_instance_ = NULL;

draw_rank_reward* draw_rank_reward::New() const {
  return new draw_rank_reward;
}

void draw_rank_reward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_rank_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void draw_rank_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* draw_rank_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int draw_rank_reward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_rank_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_rank_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_rank_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_rank_reward::MergeFrom(const draw_rank_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_rank_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_rank_reward::CopyFrom(const draw_rank_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_rank_reward::IsInitialized() const {

  return true;
}

void draw_rank_reward::Swap(draw_rank_reward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_rank_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_rank_reward_descriptor_;
  metadata.reflection = draw_rank_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

buy_battle_chance::buy_battle_chance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_battle_chance::InitAsDefaultInstance() {
}

buy_battle_chance::buy_battle_chance(const buy_battle_chance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_battle_chance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_battle_chance::~buy_battle_chance() {
  SharedDtor();
}

void buy_battle_chance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_battle_chance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_battle_chance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_battle_chance_descriptor_;
}

const buy_battle_chance& buy_battle_chance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

buy_battle_chance* buy_battle_chance::default_instance_ = NULL;

buy_battle_chance* buy_battle_chance::New() const {
  return new buy_battle_chance;
}

void buy_battle_chance::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_battle_chance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void buy_battle_chance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_battle_chance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_battle_chance::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_battle_chance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_battle_chance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_battle_chance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_battle_chance::MergeFrom(const buy_battle_chance& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_battle_chance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_battle_chance::CopyFrom(const buy_battle_chance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_battle_chance::IsInitialized() const {

  return true;
}

void buy_battle_chance::Swap(buy_battle_chance* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_battle_chance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_battle_chance_descriptor_;
  metadata.reflection = buy_battle_chance_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* set_name_set_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_name_set_type_descriptor_;
}
bool set_name_set_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const set_name_set_type set_name::free;
const set_name_set_type set_name::rmb;
const set_name_set_type set_name::set_type_MIN;
const set_name_set_type set_name::set_type_MAX;
const int set_name::set_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int set_name::kTypeFieldNumber;
const int set_name::kNameFieldNumber;
#endif  // !_MSC_VER

set_name::set_name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_name::InitAsDefaultInstance() {
}

set_name::set_name(const set_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_name::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 0;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_name::~set_name() {
  SharedDtor();
}

void set_name::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::kEmptyString) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void set_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_name_descriptor_;
}

const set_name& set_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

set_name* set_name::default_instance_ = NULL;

set_name* set_name::New() const {
  return new set_name;
}

void set_name::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 0;
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::kEmptyString) {
        _name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.set_name.set_type _type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::set_name_set_type_IsValid(value)) {
            set__type(static_cast< ::up::set_name_set_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__name;
        break;
      }

      // required string _name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.set_name.set_type _type = 1;
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.set_name.set_type _type = 1;
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // required string _name = 2;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.set_name.set_type _type = 1;
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // required string _name = 2;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_name::MergeFrom(const set_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__name()) {
      set__name(from._name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_name::CopyFrom(const set_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void set_name::Swap(set_name* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_name_, other->_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_name_descriptor_;
  metadata.reflection = set_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_avatar::kAvatarFieldNumber;
#endif  // !_MSC_VER

set_avatar::set_avatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_avatar::InitAsDefaultInstance() {
}

set_avatar::set_avatar(const set_avatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_avatar::SharedCtor() {
  _cached_size_ = 0;
  _avatar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_avatar::~set_avatar() {
  SharedDtor();
}

void set_avatar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_avatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_avatar_descriptor_;
}

const set_avatar& set_avatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

set_avatar* set_avatar::default_instance_ = NULL;

set_avatar* set_avatar::New() const {
  return new set_avatar;
}

void set_avatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _avatar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _avatar = 1;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_avatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _avatar = 1;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_avatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _avatar = 1;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_avatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_avatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_avatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_avatar::MergeFrom(const set_avatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_avatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_avatar::CopyFrom(const set_avatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_avatar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_avatar::Swap(set_avatar* other) {
  if (other != this) {
    std::swap(_avatar_, other->_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_avatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_avatar_descriptor_;
  metadata.reflection = set_avatar_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* query_data_query_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_data_query_type_descriptor_;
}
bool query_data_query_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const query_data_query_type query_data::rmb;
const query_data_query_type query_data::hero;
const query_data_query_type query_data::recharge;
const query_data_query_type query_data::monthcard;
const query_data_query_type query_data::query_type_MIN;
const query_data_query_type query_data::query_type_MAX;
const int query_data::query_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int query_data::kTypeFieldNumber;
const int query_data::kQueryHeroesFieldNumber;
const int query_data::kMonthCardIdFieldNumber;
#endif  // !_MSC_VER

query_data::query_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_data::InitAsDefaultInstance() {
}

query_data::query_data(const query_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_data::~query_data() {
  SharedDtor();
}

void query_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_data_descriptor_;
}

const query_data& query_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_data* query_data::default_instance_ = NULL;

query_data* query_data::New() const {
  return new query_data;
}

void query_data::Clear() {
  _type_.Clear();
  _query_heroes_.Clear();
  _month_card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .up.query_data.query_type _type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::query_data_query_type_IsValid(value)) {
            add__type(static_cast< ::up::query_data_query_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::up::query_data_query_type_IsValid,
                 this->mutable__type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__type;
        if (input->ExpectTag(16)) goto parse__query_heroes;
        break;
      }

      // repeated uint32 _query_heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__query_heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__query_heroes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__query_heroes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__query_heroes;
        if (input->ExpectTag(24)) goto parse__month_card_id;
        break;
      }

      // repeated uint32 _month_card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__month_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable__month_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__month_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__month_card_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .up.query_data.query_type _type = 1;
  for (int i = 0; i < this->_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(i), output);
  }

  // repeated uint32 _query_heroes = 2;
  for (int i = 0; i < this->_query_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_query_heroes(i), output);
  }

  // repeated uint32 _month_card_id = 3;
  for (int i = 0; i < this->_month_card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->_month_card_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .up.query_data.query_type _type = 1;
  for (int i = 0; i < this->_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(i), target);
  }

  // repeated uint32 _query_heroes = 2;
  for (int i = 0; i < this->_query_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_query_heroes(i), target);
  }

  // repeated uint32 _month_card_id = 3;
  for (int i = 0; i < this->_month_card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->_month_card_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_data::ByteSize() const {
  int total_size = 0;

  // repeated .up.query_data.query_type _type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->_type(i));
    }
    total_size += 1 * this->_type_size() + data_size;
  }

  // repeated uint32 _query_heroes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_query_heroes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_query_heroes(i));
    }
    total_size += 1 * this->_query_heroes_size() + data_size;
  }

  // repeated uint32 _month_card_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->_month_card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_month_card_id(i));
    }
    total_size += 1 * this->_month_card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_data::MergeFrom(const query_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  _type_.MergeFrom(from._type_);
  _query_heroes_.MergeFrom(from._query_heroes_);
  _month_card_id_.MergeFrom(from._month_card_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_data::CopyFrom(const query_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_data::IsInitialized() const {

  return true;
}

void query_data::Swap(query_data* other) {
  if (other != this) {
    _type_.Swap(&other->_type_);
    _query_heroes_.Swap(&other->_query_heroes_);
    _month_card_id_.Swap(&other->_month_card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_data_descriptor_;
  metadata.reflection = query_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int midas::kTimesFieldNumber;
#endif  // !_MSC_VER

midas::midas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void midas::InitAsDefaultInstance() {
}

midas::midas(const midas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void midas::SharedCtor() {
  _cached_size_ = 0;
  _times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

midas::~midas() {
  SharedDtor();
}

void midas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void midas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* midas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return midas_descriptor_;
}

const midas& midas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

midas* midas::default_instance_ = NULL;

midas* midas::New() const {
  return new midas;
}

void midas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool midas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_times_)));
          set_has__times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void midas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _times = 1;
  if (has__times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* midas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _times = 1;
  if (has__times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int midas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _times = 1;
    if (has__times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void midas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const midas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const midas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void midas::MergeFrom(const midas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__times()) {
      set__times(from._times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void midas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void midas::CopyFrom(const midas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool midas::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void midas::Swap(midas* other) {
  if (other != this) {
    std::swap(_times_, other->_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata midas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = midas_descriptor_;
  metadata.reflection = midas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int open_shop::kShopidFieldNumber;
#endif  // !_MSC_VER

open_shop::open_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void open_shop::InitAsDefaultInstance() {
}

open_shop::open_shop(const open_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void open_shop::SharedCtor() {
  _cached_size_ = 0;
  _shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_shop::~open_shop() {
  SharedDtor();
}

void open_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void open_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_shop_descriptor_;
}

const open_shop& open_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

open_shop* open_shop::default_instance_ = NULL;

open_shop* open_shop::New() const {
  return new open_shop;
}

void open_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _shopid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_shopid_)));
          set_has__shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void open_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _shopid = 1;
  if (has__shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* open_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _shopid = 1;
  if (has__shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int open_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _shopid = 1;
    if (has__shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_shop::MergeFrom(const open_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__shopid()) {
      set__shopid(from._shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_shop::CopyFrom(const open_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void open_shop::Swap(open_shop* other) {
  if (other != this) {
    std::swap(_shopid_, other->_shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_shop_descriptor_;
  metadata.reflection = open_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int charge::kPlatidFieldNumber;
const int charge::kChargeidFieldNumber;
const int charge::kExtradataFieldNumber;
#endif  // !_MSC_VER

charge::charge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void charge::InitAsDefaultInstance() {
}

charge::charge(const charge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void charge::SharedCtor() {
  _cached_size_ = 0;
  _platid_ = 0;
  _chargeid_ = 0u;
  _extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

charge::~charge() {
  SharedDtor();
}

void charge::SharedDtor() {
  if (_extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete _extradata_;
  }
  if (this != default_instance_) {
  }
}

void charge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* charge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return charge_descriptor_;
}

const charge& charge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

charge* charge::default_instance_ = NULL;

charge* charge::New() const {
  return new charge;
}

void charge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _platid_ = 0;
    _chargeid_ = 0u;
    if (has__extradata()) {
      if (_extradata_ != &::google::protobuf::internal::kEmptyString) {
        _extradata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool charge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.platform_type _platid = 1 [default = self];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::platform_type_IsValid(value)) {
            set__platid(static_cast< ::up::platform_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__chargeid;
        break;
      }

      // required uint32 _chargeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__chargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chargeid_)));
          set_has__chargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__extradata;
        break;
      }

      // optional string _extradata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__extradata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_extradata().data(), this->_extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void charge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.platform_type _platid = 1 [default = self];
  if (has__platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_platid(), output);
  }

  // required uint32 _chargeid = 2;
  if (has__chargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_chargeid(), output);
  }

  // optional string _extradata = 3;
  if (has__extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_extradata().data(), this->_extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->_extradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* charge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.platform_type _platid = 1 [default = self];
  if (has__platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_platid(), target);
  }

  // required uint32 _chargeid = 2;
  if (has__chargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_chargeid(), target);
  }

  // optional string _extradata = 3;
  if (has__extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_extradata().data(), this->_extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->_extradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int charge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.platform_type _platid = 1 [default = self];
    if (has__platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_platid());
    }

    // required uint32 _chargeid = 2;
    if (has__chargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chargeid());
    }

    // optional string _extradata = 3;
    if (has__extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_extradata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void charge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const charge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const charge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void charge::MergeFrom(const charge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__platid()) {
      set__platid(from._platid());
    }
    if (from.has__chargeid()) {
      set__chargeid(from._chargeid());
    }
    if (from.has__extradata()) {
      set__extradata(from._extradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void charge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void charge::CopyFrom(const charge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void charge::Swap(charge* other) {
  if (other != this) {
    std::swap(_platid_, other->_platid_);
    std::swap(_chargeid_, other->_chargeid_);
    std::swap(_extradata_, other->_extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata charge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = charge_descriptor_;
  metadata.reflection = charge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ask_daily_login_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_daily_login_status_descriptor_;
}
bool ask_daily_login_status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ask_daily_login_status ask_daily_login::all;
const ask_daily_login_status ask_daily_login::common;
const ask_daily_login_status ask_daily_login::vip;
const ask_daily_login_status ask_daily_login::status_MIN;
const ask_daily_login_status ask_daily_login::status_MAX;
const int ask_daily_login::status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ask_daily_login::kStatusFieldNumber;
#endif  // !_MSC_VER

ask_daily_login::ask_daily_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ask_daily_login::InitAsDefaultInstance() {
}

ask_daily_login::ask_daily_login(const ask_daily_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ask_daily_login::SharedCtor() {
  _cached_size_ = 0;
  _status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_daily_login::~ask_daily_login() {
  SharedDtor();
}

void ask_daily_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ask_daily_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_daily_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_daily_login_descriptor_;
}

const ask_daily_login& ask_daily_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

ask_daily_login* ask_daily_login::default_instance_ = NULL;

ask_daily_login* ask_daily_login::New() const {
  return new ask_daily_login;
}

void ask_daily_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_daily_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.ask_daily_login.status _status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::ask_daily_login_status_IsValid(value)) {
            set__status(static_cast< ::up::ask_daily_login_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ask_daily_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.ask_daily_login.status _status = 1;
  if (has__status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ask_daily_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.ask_daily_login.status _status = 1;
  if (has__status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ask_daily_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.ask_daily_login.status _status = 1;
    if (has__status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_daily_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_daily_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_daily_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_daily_login::MergeFrom(const ask_daily_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__status()) {
      set__status(from._status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_daily_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_daily_login::CopyFrom(const ask_daily_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_daily_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ask_daily_login::Swap(ask_daily_login* other) {
  if (other != this) {
    std::swap(_status_, other->_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_daily_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_daily_login_descriptor_;
  metadata.reflection = ask_daily_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc::kOpenPanelFieldNumber;
const int tbc::kQueryOppoFieldNumber;
const int tbc::kStartBatFieldNumber;
const int tbc::kEndBatFieldNumber;
const int tbc::kResetFieldNumber;
const int tbc::kDrawRewardFieldNumber;
#endif  // !_MSC_VER

tbc::tbc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc::InitAsDefaultInstance() {
  _open_panel_ = const_cast< ::up::tbc_open_panel*>(&::up::tbc_open_panel::default_instance());
  _query_oppo_ = const_cast< ::up::tbc_query_oppo*>(&::up::tbc_query_oppo::default_instance());
  _start_bat_ = const_cast< ::up::tbc_start_battle*>(&::up::tbc_start_battle::default_instance());
  _end_bat_ = const_cast< ::up::tbc_end_battle*>(&::up::tbc_end_battle::default_instance());
  _reset_ = const_cast< ::up::tbc_reset*>(&::up::tbc_reset::default_instance());
  _draw_reward_ = const_cast< ::up::tbc_draw_reward*>(&::up::tbc_draw_reward::default_instance());
}

tbc::tbc(const tbc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc::SharedCtor() {
  _cached_size_ = 0;
  _open_panel_ = NULL;
  _query_oppo_ = NULL;
  _start_bat_ = NULL;
  _end_bat_ = NULL;
  _reset_ = NULL;
  _draw_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc::~tbc() {
  SharedDtor();
}

void tbc::SharedDtor() {
  if (this != default_instance_) {
    delete _open_panel_;
    delete _query_oppo_;
    delete _start_bat_;
    delete _end_bat_;
    delete _reset_;
    delete _draw_reward_;
  }
}

void tbc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_descriptor_;
}

const tbc& tbc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc* tbc::default_instance_ = NULL;

tbc* tbc::New() const {
  return new tbc;
}

void tbc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__open_panel()) {
      if (_open_panel_ != NULL) _open_panel_->::up::tbc_open_panel::Clear();
    }
    if (has__query_oppo()) {
      if (_query_oppo_ != NULL) _query_oppo_->::up::tbc_query_oppo::Clear();
    }
    if (has__start_bat()) {
      if (_start_bat_ != NULL) _start_bat_->::up::tbc_start_battle::Clear();
    }
    if (has__end_bat()) {
      if (_end_bat_ != NULL) _end_bat_->::up::tbc_end_battle::Clear();
    }
    if (has__reset()) {
      if (_reset_ != NULL) _reset_->::up::tbc_reset::Clear();
    }
    if (has__draw_reward()) {
      if (_draw_reward_ != NULL) _draw_reward_->::up::tbc_draw_reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.tbc_open_panel _open_panel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_panel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__query_oppo;
        break;
      }

      // optional .up.tbc_query_oppo _query_oppo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_oppo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_oppo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__start_bat;
        break;
      }

      // optional .up.tbc_start_battle _start_bat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__start_bat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__start_bat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__end_bat;
        break;
      }

      // optional .up.tbc_end_battle _end_bat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__end_bat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__end_bat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__reset;
        break;
      }

      // optional .up.tbc_reset _reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__reset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__reset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__draw_reward;
        break;
      }

      // optional .up.tbc_draw_reward _draw_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__draw_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.tbc_open_panel _open_panel = 1;
  if (has__open_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_open_panel(), output);
  }

  // optional .up.tbc_query_oppo _query_oppo = 2;
  if (has__query_oppo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_query_oppo(), output);
  }

  // optional .up.tbc_start_battle _start_bat = 3;
  if (has__start_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_start_bat(), output);
  }

  // optional .up.tbc_end_battle _end_bat = 4;
  if (has__end_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_end_bat(), output);
  }

  // optional .up.tbc_reset _reset = 5;
  if (has__reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_reset(), output);
  }

  // optional .up.tbc_draw_reward _draw_reward = 6;
  if (has__draw_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_draw_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.tbc_open_panel _open_panel = 1;
  if (has__open_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_open_panel(), target);
  }

  // optional .up.tbc_query_oppo _query_oppo = 2;
  if (has__query_oppo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_query_oppo(), target);
  }

  // optional .up.tbc_start_battle _start_bat = 3;
  if (has__start_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_start_bat(), target);
  }

  // optional .up.tbc_end_battle _end_bat = 4;
  if (has__end_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_end_bat(), target);
  }

  // optional .up.tbc_reset _reset = 5;
  if (has__reset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_reset(), target);
  }

  // optional .up.tbc_draw_reward _draw_reward = 6;
  if (has__draw_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_draw_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.tbc_open_panel _open_panel = 1;
    if (has__open_panel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_panel());
    }

    // optional .up.tbc_query_oppo _query_oppo = 2;
    if (has__query_oppo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_oppo());
    }

    // optional .up.tbc_start_battle _start_bat = 3;
    if (has__start_bat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_start_bat());
    }

    // optional .up.tbc_end_battle _end_bat = 4;
    if (has__end_bat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_end_bat());
    }

    // optional .up.tbc_reset _reset = 5;
    if (has__reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_reset());
    }

    // optional .up.tbc_draw_reward _draw_reward = 6;
    if (has__draw_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc::MergeFrom(const tbc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__open_panel()) {
      mutable__open_panel()->::up::tbc_open_panel::MergeFrom(from._open_panel());
    }
    if (from.has__query_oppo()) {
      mutable__query_oppo()->::up::tbc_query_oppo::MergeFrom(from._query_oppo());
    }
    if (from.has__start_bat()) {
      mutable__start_bat()->::up::tbc_start_battle::MergeFrom(from._start_bat());
    }
    if (from.has__end_bat()) {
      mutable__end_bat()->::up::tbc_end_battle::MergeFrom(from._end_bat());
    }
    if (from.has__reset()) {
      mutable__reset()->::up::tbc_reset::MergeFrom(from._reset());
    }
    if (from.has__draw_reward()) {
      mutable__draw_reward()->::up::tbc_draw_reward::MergeFrom(from._draw_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc::CopyFrom(const tbc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc::IsInitialized() const {

  if (has__query_oppo()) {
    if (!this->_query_oppo().IsInitialized()) return false;
  }
  if (has__end_bat()) {
    if (!this->_end_bat().IsInitialized()) return false;
  }
  if (has__draw_reward()) {
    if (!this->_draw_reward().IsInitialized()) return false;
  }
  return true;
}

void tbc::Swap(tbc* other) {
  if (other != this) {
    std::swap(_open_panel_, other->_open_panel_);
    std::swap(_query_oppo_, other->_query_oppo_);
    std::swap(_start_bat_, other->_start_bat_);
    std::swap(_end_bat_, other->_end_bat_);
    std::swap(_reset_, other->_reset_);
    std::swap(_draw_reward_, other->_draw_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_descriptor_;
  metadata.reflection = tbc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

tbc_open_panel::tbc_open_panel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_open_panel::InitAsDefaultInstance() {
}

tbc_open_panel::tbc_open_panel(const tbc_open_panel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_open_panel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_open_panel::~tbc_open_panel() {
  SharedDtor();
}

void tbc_open_panel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_open_panel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_open_panel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_open_panel_descriptor_;
}

const tbc_open_panel& tbc_open_panel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_open_panel* tbc_open_panel::default_instance_ = NULL;

tbc_open_panel* tbc_open_panel::New() const {
  return new tbc_open_panel;
}

void tbc_open_panel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_open_panel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void tbc_open_panel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_open_panel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_open_panel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_open_panel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_open_panel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_open_panel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_open_panel::MergeFrom(const tbc_open_panel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_open_panel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_open_panel::CopyFrom(const tbc_open_panel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_open_panel::IsInitialized() const {

  return true;
}

void tbc_open_panel::Swap(tbc_open_panel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_open_panel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_open_panel_descriptor_;
  metadata.reflection = tbc_open_panel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_query_oppo::kStageIdFieldNumber;
#endif  // !_MSC_VER

tbc_query_oppo::tbc_query_oppo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_query_oppo::InitAsDefaultInstance() {
}

tbc_query_oppo::tbc_query_oppo(const tbc_query_oppo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_query_oppo::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_query_oppo::~tbc_query_oppo() {
  SharedDtor();
}

void tbc_query_oppo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_query_oppo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_query_oppo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_query_oppo_descriptor_;
}

const tbc_query_oppo& tbc_query_oppo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_query_oppo* tbc_query_oppo::default_instance_ = NULL;

tbc_query_oppo* tbc_query_oppo::New() const {
  return new tbc_query_oppo;
}

void tbc_query_oppo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_query_oppo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc_query_oppo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_query_oppo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_query_oppo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_query_oppo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_query_oppo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_query_oppo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_query_oppo::MergeFrom(const tbc_query_oppo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_query_oppo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_query_oppo::CopyFrom(const tbc_query_oppo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_query_oppo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbc_query_oppo::Swap(tbc_query_oppo* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_query_oppo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_query_oppo_descriptor_;
  metadata.reflection = tbc_query_oppo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_start_battle::kHeroidsFieldNumber;
const int tbc_start_battle::kUseHireFieldNumber;
#endif  // !_MSC_VER

tbc_start_battle::tbc_start_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_start_battle::InitAsDefaultInstance() {
}

tbc_start_battle::tbc_start_battle(const tbc_start_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_start_battle::SharedCtor() {
  _cached_size_ = 0;
  _use_hire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_start_battle::~tbc_start_battle() {
  SharedDtor();
}

void tbc_start_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_start_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_start_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_start_battle_descriptor_;
}

const tbc_start_battle& tbc_start_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_start_battle* tbc_start_battle::default_instance_ = NULL;

tbc_start_battle* tbc_start_battle::New() const {
  return new tbc_start_battle;
}

void tbc_start_battle::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    _use_hire_ = 0u;
  }
  _heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_start_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _heroids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__heroids;
        if (input->ExpectTag(16)) goto parse__use_hire;
        break;
      }

      // optional uint32 _use_hire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__use_hire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_use_hire_)));
          set_has__use_hire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc_start_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _heroids = 1;
  for (int i = 0; i < this->_heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_heroids(i), output);
  }

  // optional uint32 _use_hire = 2;
  if (has__use_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_use_hire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_start_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _heroids = 1;
  for (int i = 0; i < this->_heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_heroids(i), target);
  }

  // optional uint32 _use_hire = 2;
  if (has__use_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_use_hire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_start_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 _use_hire = 2;
    if (has__use_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_use_hire());
    }

  }
  // repeated uint32 _heroids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_heroids(i));
    }
    total_size += 1 * this->_heroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_start_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_start_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_start_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_start_battle::MergeFrom(const tbc_start_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroids_.MergeFrom(from._heroids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__use_hire()) {
      set__use_hire(from._use_hire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_start_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_start_battle::CopyFrom(const tbc_start_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_start_battle::IsInitialized() const {

  return true;
}

void tbc_start_battle::Swap(tbc_start_battle* other) {
  if (other != this) {
    _heroids_.Swap(&other->_heroids_);
    std::swap(_use_hire_, other->_use_hire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_start_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_start_battle_descriptor_;
  metadata.reflection = tbc_start_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_hero::kHeroidFieldNumber;
const int tbc_hero::kHpPercFieldNumber;
const int tbc_hero::kMpPercFieldNumber;
const int tbc_hero::kCustomDataFieldNumber;
#endif  // !_MSC_VER

tbc_hero::tbc_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_hero::InitAsDefaultInstance() {
}

tbc_hero::tbc_hero(const tbc_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_hero::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  _hp_perc_ = 0u;
  _mp_perc_ = 0u;
  _custom_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_hero::~tbc_hero() {
  SharedDtor();
}

void tbc_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_hero_descriptor_;
}

const tbc_hero& tbc_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_hero* tbc_hero::default_instance_ = NULL;

tbc_hero* tbc_hero::New() const {
  return new tbc_hero;
}

void tbc_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
    _hp_perc_ = 0u;
    _mp_perc_ = 0u;
    _custom_data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__hp_perc;
        break;
      }

      // required uint32 _hp_perc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__hp_perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hp_perc_)));
          set_has__hp_perc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__mp_perc;
        break;
      }

      // required uint32 _mp_perc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__mp_perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mp_perc_)));
          set_has__mp_perc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__custom_data;
        break;
      }

      // optional uint32 _custom_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__custom_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_custom_data_)));
          set_has__custom_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_heroid(), output);
  }

  // required uint32 _hp_perc = 2;
  if (has__hp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_hp_perc(), output);
  }

  // required uint32 _mp_perc = 3;
  if (has__mp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_mp_perc(), output);
  }

  // optional uint32 _custom_data = 4;
  if (has__custom_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_custom_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_heroid(), target);
  }

  // required uint32 _hp_perc = 2;
  if (has__hp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_hp_perc(), target);
  }

  // required uint32 _mp_perc = 3;
  if (has__mp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_mp_perc(), target);
  }

  // optional uint32 _custom_data = 4;
  if (has__custom_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_custom_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 1;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

    // required uint32 _hp_perc = 2;
    if (has__hp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hp_perc());
    }

    // required uint32 _mp_perc = 3;
    if (has__mp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mp_perc());
    }

    // optional uint32 _custom_data = 4;
    if (has__custom_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_custom_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_hero::MergeFrom(const tbc_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
    if (from.has__hp_perc()) {
      set__hp_perc(from._hp_perc());
    }
    if (from.has__mp_perc()) {
      set__mp_perc(from._mp_perc());
    }
    if (from.has__custom_data()) {
      set__custom_data(from._custom_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_hero::CopyFrom(const tbc_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tbc_hero::Swap(tbc_hero* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    std::swap(_hp_perc_, other->_hp_perc_);
    std::swap(_mp_perc_, other->_mp_perc_);
    std::swap(_custom_data_, other->_custom_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_hero_descriptor_;
  metadata.reflection = tbc_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_end_battle::kResultFieldNumber;
const int tbc_end_battle::kSelfHeroesFieldNumber;
const int tbc_end_battle::kOppoHeroesFieldNumber;
const int tbc_end_battle::kOprationsFieldNumber;
#endif  // !_MSC_VER

tbc_end_battle::tbc_end_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_end_battle::InitAsDefaultInstance() {
}

tbc_end_battle::tbc_end_battle(const tbc_end_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_end_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_end_battle::~tbc_end_battle() {
  SharedDtor();
}

void tbc_end_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_end_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_end_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_end_battle_descriptor_;
}

const tbc_end_battle& tbc_end_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_end_battle* tbc_end_battle::default_instance_ = NULL;

tbc_end_battle* tbc_end_battle::New() const {
  return new tbc_end_battle;
}

void tbc_end_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _result_ = 0;
  }
  _self_heroes_.Clear();
  _oppo_heroes_.Clear();
  _oprations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_end_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.battle_result _result = 1 [default = victory];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::battle_result_IsValid(value)) {
            set__result(static_cast< ::up::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__self_heroes;
        break;
      }

      // repeated .up.tbc_hero _self_heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__self_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__self_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__self_heroes;
        if (input->ExpectTag(26)) goto parse__oppo_heroes;
        break;
      }

      // repeated .up.tbc_hero _oppo_heroes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__oppo_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppo_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__oppo_heroes;
        if (input->ExpectTag(32)) goto parse__oprations;
        break;
      }

      // repeated uint32 _oprations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__oprations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__oprations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__oprations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__oprations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc_end_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated .up.tbc_hero _self_heroes = 2;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_self_heroes(i), output);
  }

  // repeated .up.tbc_hero _oppo_heroes = 3;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_oppo_heroes(i), output);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_oprations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_end_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated .up.tbc_hero _self_heroes = 2;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_self_heroes(i), target);
  }

  // repeated .up.tbc_hero _oppo_heroes = 3;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_oppo_heroes(i), target);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_oprations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_end_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.battle_result _result = 1 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

  }
  // repeated .up.tbc_hero _self_heroes = 2;
  total_size += 1 * this->_self_heroes_size();
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_self_heroes(i));
  }

  // repeated .up.tbc_hero _oppo_heroes = 3;
  total_size += 1 * this->_oppo_heroes_size();
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppo_heroes(i));
  }

  // repeated uint32 _oprations = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_oprations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_oprations(i));
    }
    total_size += 1 * this->_oprations_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_end_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_end_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_end_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_end_battle::MergeFrom(const tbc_end_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _self_heroes_.MergeFrom(from._self_heroes_);
  _oppo_heroes_.MergeFrom(from._oppo_heroes_);
  _oprations_.MergeFrom(from._oprations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_end_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_end_battle::CopyFrom(const tbc_end_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_end_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < _self_heroes_size(); i++) {
    if (!this->_self_heroes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < _oppo_heroes_size(); i++) {
    if (!this->_oppo_heroes(i).IsInitialized()) return false;
  }
  return true;
}

void tbc_end_battle::Swap(tbc_end_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _self_heroes_.Swap(&other->_self_heroes_);
    _oppo_heroes_.Swap(&other->_oppo_heroes_);
    _oprations_.Swap(&other->_oprations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_end_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_end_battle_descriptor_;
  metadata.reflection = tbc_end_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

tbc_reset::tbc_reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_reset::InitAsDefaultInstance() {
}

tbc_reset::tbc_reset(const tbc_reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_reset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_reset::~tbc_reset() {
  SharedDtor();
}

void tbc_reset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_reset_descriptor_;
}

const tbc_reset& tbc_reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_reset* tbc_reset::default_instance_ = NULL;

tbc_reset* tbc_reset::New() const {
  return new tbc_reset;
}

void tbc_reset::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void tbc_reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_reset::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_reset::MergeFrom(const tbc_reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_reset::CopyFrom(const tbc_reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_reset::IsInitialized() const {

  return true;
}

void tbc_reset::Swap(tbc_reset* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_reset_descriptor_;
  metadata.reflection = tbc_reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbc_draw_reward::kStageIdFieldNumber;
#endif  // !_MSC_VER

tbc_draw_reward::tbc_draw_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbc_draw_reward::InitAsDefaultInstance() {
}

tbc_draw_reward::tbc_draw_reward(const tbc_draw_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbc_draw_reward::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbc_draw_reward::~tbc_draw_reward() {
  SharedDtor();
}

void tbc_draw_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tbc_draw_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbc_draw_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbc_draw_reward_descriptor_;
}

const tbc_draw_reward& tbc_draw_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

tbc_draw_reward* tbc_draw_reward::default_instance_ = NULL;

tbc_draw_reward* tbc_draw_reward::New() const {
  return new tbc_draw_reward;
}

void tbc_draw_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbc_draw_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbc_draw_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbc_draw_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbc_draw_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbc_draw_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbc_draw_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbc_draw_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbc_draw_reward::MergeFrom(const tbc_draw_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbc_draw_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbc_draw_reward::CopyFrom(const tbc_draw_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbc_draw_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbc_draw_reward::Swap(tbc_draw_reward* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbc_draw_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbc_draw_reward_descriptor_;
  metadata.reflection = tbc_draw_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_maillist::get_maillist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_maillist::InitAsDefaultInstance() {
}

get_maillist::get_maillist(const get_maillist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_maillist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_maillist::~get_maillist() {
  SharedDtor();
}

void get_maillist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_maillist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_maillist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_maillist_descriptor_;
}

const get_maillist& get_maillist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

get_maillist* get_maillist::default_instance_ = NULL;

get_maillist* get_maillist::New() const {
  return new get_maillist;
}

void get_maillist::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_maillist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_maillist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_maillist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_maillist::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_maillist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_maillist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_maillist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_maillist::MergeFrom(const get_maillist& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_maillist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_maillist::CopyFrom(const get_maillist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_maillist::IsInitialized() const {

  return true;
}

void get_maillist::Swap(get_maillist* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_maillist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_maillist_descriptor_;
  metadata.reflection = get_maillist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int read_mail::kIdFieldNumber;
#endif  // !_MSC_VER

read_mail::read_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void read_mail::InitAsDefaultInstance() {
}

read_mail::read_mail(const read_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void read_mail::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

read_mail::~read_mail() {
  SharedDtor();
}

void read_mail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void read_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* read_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return read_mail_descriptor_;
}

const read_mail& read_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

read_mail* read_mail::default_instance_ = NULL;

read_mail* read_mail::New() const {
  return new read_mail;
}

void read_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool read_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void read_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* read_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int read_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void read_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const read_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const read_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void read_mail::MergeFrom(const read_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void read_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_mail::CopyFrom(const read_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void read_mail::Swap(read_mail* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata read_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = read_mail_descriptor_;
  metadata.reflection = read_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_svr_time::get_svr_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_svr_time::InitAsDefaultInstance() {
}

get_svr_time::get_svr_time(const get_svr_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_svr_time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_svr_time::~get_svr_time() {
  SharedDtor();
}

void get_svr_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_svr_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_svr_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_svr_time_descriptor_;
}

const get_svr_time& get_svr_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

get_svr_time* get_svr_time::default_instance_ = NULL;

get_svr_time* get_svr_time::New() const {
  return new get_svr_time;
}

void get_svr_time::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_svr_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_svr_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_svr_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_svr_time::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_svr_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_svr_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_svr_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_svr_time::MergeFrom(const get_svr_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_svr_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_svr_time::CopyFrom(const get_svr_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_svr_time::IsInitialized() const {

  return true;
}

void get_svr_time::Swap(get_svr_time* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_svr_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_svr_time_descriptor_;
  metadata.reflection = get_svr_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_vip_gift::kVipFieldNumber;
#endif  // !_MSC_VER

get_vip_gift::get_vip_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_vip_gift::InitAsDefaultInstance() {
}

get_vip_gift::get_vip_gift(const get_vip_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_vip_gift::SharedCtor() {
  _cached_size_ = 0;
  _vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_vip_gift::~get_vip_gift() {
  SharedDtor();
}

void get_vip_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_vip_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_vip_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_vip_gift_descriptor_;
}

const get_vip_gift& get_vip_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

get_vip_gift* get_vip_gift::default_instance_ = NULL;

get_vip_gift* get_vip_gift::New() const {
  return new get_vip_gift;
}

void get_vip_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _vip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_vip_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _vip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_vip_)));
          set_has__vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_vip_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _vip = 1;
  if (has__vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_vip_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _vip = 1;
  if (has__vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_vip_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _vip = 1;
    if (has__vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_vip_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_vip_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_vip_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_vip_gift::MergeFrom(const get_vip_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__vip()) {
      set__vip(from._vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_vip_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_vip_gift::CopyFrom(const get_vip_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_vip_gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_vip_gift::Swap(get_vip_gift* other) {
  if (other != this) {
    std::swap(_vip_, other->_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_vip_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_vip_gift_descriptor_;
  metadata.reflection = get_vip_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat::kSayFieldNumber;
const int chat::kFreshFieldNumber;
const int chat::kFetchFieldNumber;
const int chat::kChatAddBlFieldNumber;
const int chat::kChatDelBlFieldNumber;
const int chat::kChatFetchBlFieldNumber;
const int chat::kChatBroadSayFieldNumber;
#endif  // !_MSC_VER

chat::chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat::InitAsDefaultInstance() {
  _say_ = const_cast< ::up::chat_say*>(&::up::chat_say::default_instance());
  _fresh_ = const_cast< ::up::chat_fresh*>(&::up::chat_fresh::default_instance());
  _fetch_ = const_cast< ::up::chat_fetch*>(&::up::chat_fetch::default_instance());
  _chat_add_bl_ = const_cast< ::up::chat_add_bl*>(&::up::chat_add_bl::default_instance());
  _chat_del_bl_ = const_cast< ::up::chat_del_bl*>(&::up::chat_del_bl::default_instance());
  _chat_fetch_bl_ = const_cast< ::up::chat_fetch_bl*>(&::up::chat_fetch_bl::default_instance());
  _chat_broad_say_ = const_cast< ::up::chat_broad_say*>(&::up::chat_broad_say::default_instance());
}

chat::chat(const chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat::SharedCtor() {
  _cached_size_ = 0;
  _say_ = NULL;
  _fresh_ = NULL;
  _fetch_ = NULL;
  _chat_add_bl_ = NULL;
  _chat_del_bl_ = NULL;
  _chat_fetch_bl_ = NULL;
  _chat_broad_say_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat::~chat() {
  SharedDtor();
}

void chat::SharedDtor() {
  if (this != default_instance_) {
    delete _say_;
    delete _fresh_;
    delete _fetch_;
    delete _chat_add_bl_;
    delete _chat_del_bl_;
    delete _chat_fetch_bl_;
    delete _chat_broad_say_;
  }
}

void chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_descriptor_;
}

const chat& chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat* chat::default_instance_ = NULL;

chat* chat::New() const {
  return new chat;
}

void chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__say()) {
      if (_say_ != NULL) _say_->::up::chat_say::Clear();
    }
    if (has__fresh()) {
      if (_fresh_ != NULL) _fresh_->::up::chat_fresh::Clear();
    }
    if (has__fetch()) {
      if (_fetch_ != NULL) _fetch_->::up::chat_fetch::Clear();
    }
    if (has__chat_add_bl()) {
      if (_chat_add_bl_ != NULL) _chat_add_bl_->::up::chat_add_bl::Clear();
    }
    if (has__chat_del_bl()) {
      if (_chat_del_bl_ != NULL) _chat_del_bl_->::up::chat_del_bl::Clear();
    }
    if (has__chat_fetch_bl()) {
      if (_chat_fetch_bl_ != NULL) _chat_fetch_bl_->::up::chat_fetch_bl::Clear();
    }
    if (has__chat_broad_say()) {
      if (_chat_broad_say_ != NULL) _chat_broad_say_->::up::chat_broad_say::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.chat_say _say = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__say()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__fresh;
        break;
      }

      // optional .up.chat_fresh _fresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__fresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fresh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__fetch;
        break;
      }

      // optional .up.chat_fetch _fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__chat_add_bl;
        break;
      }

      // optional .up.chat_add_bl _chat_add_bl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__chat_add_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_add_bl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__chat_del_bl;
        break;
      }

      // optional .up.chat_del_bl _chat_del_bl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__chat_del_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_del_bl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__chat_fetch_bl;
        break;
      }

      // optional .up.chat_fetch_bl _chat_fetch_bl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__chat_fetch_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_fetch_bl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__chat_broad_say;
        break;
      }

      // optional .up.chat_broad_say _chat_broad_say = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__chat_broad_say:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__chat_broad_say()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.chat_say _say = 1;
  if (has__say()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_say(), output);
  }

  // optional .up.chat_fresh _fresh = 2;
  if (has__fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_fresh(), output);
  }

  // optional .up.chat_fetch _fetch = 3;
  if (has__fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_fetch(), output);
  }

  // optional .up.chat_add_bl _chat_add_bl = 4;
  if (has__chat_add_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_chat_add_bl(), output);
  }

  // optional .up.chat_del_bl _chat_del_bl = 5;
  if (has__chat_del_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_chat_del_bl(), output);
  }

  // optional .up.chat_fetch_bl _chat_fetch_bl = 6;
  if (has__chat_fetch_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_chat_fetch_bl(), output);
  }

  // optional .up.chat_broad_say _chat_broad_say = 7;
  if (has__chat_broad_say()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_chat_broad_say(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.chat_say _say = 1;
  if (has__say()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_say(), target);
  }

  // optional .up.chat_fresh _fresh = 2;
  if (has__fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_fresh(), target);
  }

  // optional .up.chat_fetch _fetch = 3;
  if (has__fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_fetch(), target);
  }

  // optional .up.chat_add_bl _chat_add_bl = 4;
  if (has__chat_add_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_chat_add_bl(), target);
  }

  // optional .up.chat_del_bl _chat_del_bl = 5;
  if (has__chat_del_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_chat_del_bl(), target);
  }

  // optional .up.chat_fetch_bl _chat_fetch_bl = 6;
  if (has__chat_fetch_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_chat_fetch_bl(), target);
  }

  // optional .up.chat_broad_say _chat_broad_say = 7;
  if (has__chat_broad_say()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_chat_broad_say(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.chat_say _say = 1;
    if (has__say()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_say());
    }

    // optional .up.chat_fresh _fresh = 2;
    if (has__fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fresh());
    }

    // optional .up.chat_fetch _fetch = 3;
    if (has__fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_fetch());
    }

    // optional .up.chat_add_bl _chat_add_bl = 4;
    if (has__chat_add_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_add_bl());
    }

    // optional .up.chat_del_bl _chat_del_bl = 5;
    if (has__chat_del_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_del_bl());
    }

    // optional .up.chat_fetch_bl _chat_fetch_bl = 6;
    if (has__chat_fetch_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_fetch_bl());
    }

    // optional .up.chat_broad_say _chat_broad_say = 7;
    if (has__chat_broad_say()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_chat_broad_say());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat::MergeFrom(const chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__say()) {
      mutable__say()->::up::chat_say::MergeFrom(from._say());
    }
    if (from.has__fresh()) {
      mutable__fresh()->::up::chat_fresh::MergeFrom(from._fresh());
    }
    if (from.has__fetch()) {
      mutable__fetch()->::up::chat_fetch::MergeFrom(from._fetch());
    }
    if (from.has__chat_add_bl()) {
      mutable__chat_add_bl()->::up::chat_add_bl::MergeFrom(from._chat_add_bl());
    }
    if (from.has__chat_del_bl()) {
      mutable__chat_del_bl()->::up::chat_del_bl::MergeFrom(from._chat_del_bl());
    }
    if (from.has__chat_fetch_bl()) {
      mutable__chat_fetch_bl()->::up::chat_fetch_bl::MergeFrom(from._chat_fetch_bl());
    }
    if (from.has__chat_broad_say()) {
      mutable__chat_broad_say()->::up::chat_broad_say::MergeFrom(from._chat_broad_say());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat::CopyFrom(const chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat::IsInitialized() const {

  if (has__say()) {
    if (!this->_say().IsInitialized()) return false;
  }
  if (has__fresh()) {
    if (!this->_fresh().IsInitialized()) return false;
  }
  if (has__fetch()) {
    if (!this->_fetch().IsInitialized()) return false;
  }
  if (has__chat_add_bl()) {
    if (!this->_chat_add_bl().IsInitialized()) return false;
  }
  if (has__chat_del_bl()) {
    if (!this->_chat_del_bl().IsInitialized()) return false;
  }
  if (has__chat_broad_say()) {
    if (!this->_chat_broad_say().IsInitialized()) return false;
  }
  return true;
}

void chat::Swap(chat* other) {
  if (other != this) {
    std::swap(_say_, other->_say_);
    std::swap(_fresh_, other->_fresh_);
    std::swap(_fetch_, other->_fetch_);
    std::swap(_chat_add_bl_, other->_chat_add_bl_);
    std::swap(_chat_del_bl_, other->_chat_del_bl_);
    std::swap(_chat_fetch_bl_, other->_chat_fetch_bl_);
    std::swap(_chat_broad_say_, other->_chat_broad_say_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_descriptor_;
  metadata.reflection = chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broad_say::kChannelFieldNumber;
const int chat_broad_say::kTargetIdsFieldNumber;
const int chat_broad_say::kContentTypeFieldNumber;
const int chat_broad_say::kContentFieldNumber;
const int chat_broad_say::kAccessoryFieldNumber;
#endif  // !_MSC_VER

chat_broad_say::chat_broad_say()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_broad_say::InitAsDefaultInstance() {
  _accessory_ = const_cast< ::up::chat_acc*>(&::up::chat_acc::default_instance());
}

chat_broad_say::chat_broad_say(const chat_broad_say& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_broad_say::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  _content_type_ = 0u;
  _content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _accessory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broad_say::~chat_broad_say() {
  SharedDtor();
}

void chat_broad_say::SharedDtor() {
  if (_content_ != &::google::protobuf::internal::kEmptyString) {
    delete _content_;
  }
  if (this != default_instance_) {
    delete _accessory_;
  }
}

void chat_broad_say::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broad_say::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broad_say_descriptor_;
}

const chat_broad_say& chat_broad_say::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_broad_say* chat_broad_say::default_instance_ = NULL;

chat_broad_say* chat_broad_say::New() const {
  return new chat_broad_say;
}

void chat_broad_say::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _channel_ = 1;
    _content_type_ = 0u;
    if (has__content()) {
      if (_content_ != &::google::protobuf::internal::kEmptyString) {
        _content_->clear();
      }
    }
    if (has__accessory()) {
      if (_accessory_ != NULL) _accessory_->::up::chat_acc::Clear();
    }
  }
  _target_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broad_say::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.chat_channel _channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::up::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__target_ids;
        break;
      }

      // repeated uint32 _target_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__target_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__target_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__target_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__target_ids;
        if (input->ExpectTag(24)) goto parse__content_type;
        break;
      }

      // optional uint32 _content_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_content_type_)));
          set_has__content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__content;
        break;
      }

      // optional string _content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__accessory;
        break;
      }

      // optional .up.chat_acc _accessory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__accessory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_broad_say::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.chat_channel _channel = 1;
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  // repeated uint32 _target_ids = 2;
  for (int i = 0; i < this->_target_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_target_ids(i), output);
  }

  // optional uint32 _content_type = 3;
  if (has__content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_content_type(), output);
  }

  // optional string _content = 4;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->_content(), output);
  }

  // optional .up.chat_acc _accessory = 5;
  if (has__accessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_accessory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_broad_say::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.chat_channel _channel = 1;
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  // repeated uint32 _target_ids = 2;
  for (int i = 0; i < this->_target_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_target_ids(i), target);
  }

  // optional uint32 _content_type = 3;
  if (has__content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_content_type(), target);
  }

  // optional string _content = 4;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_content(), target);
  }

  // optional .up.chat_acc _accessory = 5;
  if (has__accessory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_accessory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_broad_say::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.chat_channel _channel = 1;
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

    // optional uint32 _content_type = 3;
    if (has__content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_content_type());
    }

    // optional string _content = 4;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

    // optional .up.chat_acc _accessory = 5;
    if (has__accessory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_accessory());
    }

  }
  // repeated uint32 _target_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_target_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_target_ids(i));
    }
    total_size += 1 * this->_target_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broad_say::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broad_say* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broad_say*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broad_say::MergeFrom(const chat_broad_say& from) {
  GOOGLE_CHECK_NE(&from, this);
  _target_ids_.MergeFrom(from._target_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
    if (from.has__content_type()) {
      set__content_type(from._content_type());
    }
    if (from.has__content()) {
      set__content(from._content());
    }
    if (from.has__accessory()) {
      mutable__accessory()->::up::chat_acc::MergeFrom(from._accessory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broad_say::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broad_say::CopyFrom(const chat_broad_say& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broad_say::IsInitialized() const {

  if (has__accessory()) {
    if (!this->_accessory().IsInitialized()) return false;
  }
  return true;
}

void chat_broad_say::Swap(chat_broad_say* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    _target_ids_.Swap(&other->_target_ids_);
    std::swap(_content_type_, other->_content_type_);
    std::swap(_content_, other->_content_);
    std::swap(_accessory_, other->_accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broad_say::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broad_say_descriptor_;
  metadata.reflection = chat_broad_say_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

chat_fetch_bl::chat_fetch_bl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_fetch_bl::InitAsDefaultInstance() {
}

chat_fetch_bl::chat_fetch_bl(const chat_fetch_bl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_fetch_bl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_fetch_bl::~chat_fetch_bl() {
  SharedDtor();
}

void chat_fetch_bl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_fetch_bl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_fetch_bl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_fetch_bl_descriptor_;
}

const chat_fetch_bl& chat_fetch_bl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_fetch_bl* chat_fetch_bl::default_instance_ = NULL;

chat_fetch_bl* chat_fetch_bl::New() const {
  return new chat_fetch_bl;
}

void chat_fetch_bl::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_fetch_bl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void chat_fetch_bl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_fetch_bl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_fetch_bl::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_fetch_bl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_fetch_bl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_fetch_bl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_fetch_bl::MergeFrom(const chat_fetch_bl& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_fetch_bl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_fetch_bl::CopyFrom(const chat_fetch_bl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_fetch_bl::IsInitialized() const {

  return true;
}

void chat_fetch_bl::Swap(chat_fetch_bl* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_fetch_bl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_fetch_bl_descriptor_;
  metadata.reflection = chat_fetch_bl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_say::kChannelFieldNumber;
const int chat_say::kTargetIdFieldNumber;
const int chat_say::kContentTypeFieldNumber;
const int chat_say::kContentFieldNumber;
const int chat_say::kAccessoryFieldNumber;
#endif  // !_MSC_VER

chat_say::chat_say()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_say::InitAsDefaultInstance() {
  _accessory_ = const_cast< ::up::chat_acc*>(&::up::chat_acc::default_instance());
}

chat_say::chat_say(const chat_say& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_say::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  _target_id_ = 0u;
  _content_type_ = 0u;
  _content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _accessory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_say::~chat_say() {
  SharedDtor();
}

void chat_say::SharedDtor() {
  if (_content_ != &::google::protobuf::internal::kEmptyString) {
    delete _content_;
  }
  if (this != default_instance_) {
    delete _accessory_;
  }
}

void chat_say::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_say::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_say_descriptor_;
}

const chat_say& chat_say::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_say* chat_say::default_instance_ = NULL;

chat_say* chat_say::New() const {
  return new chat_say;
}

void chat_say::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _channel_ = 1;
    _target_id_ = 0u;
    _content_type_ = 0u;
    if (has__content()) {
      if (_content_ != &::google::protobuf::internal::kEmptyString) {
        _content_->clear();
      }
    }
    if (has__accessory()) {
      if (_accessory_ != NULL) _accessory_->::up::chat_acc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_say::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.chat_channel _channel = 1 [default = world_channel];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::up::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__target_id;
        break;
      }

      // optional uint32 _target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_target_id_)));
          set_has__target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__content_type;
        break;
      }

      // required uint32 _content_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_content_type_)));
          set_has__content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__content;
        break;
      }

      // required string _content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_content().data(), this->_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__accessory;
        break;
      }

      // optional .up.chat_acc _accessory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__accessory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_say::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  // optional uint32 _target_id = 2;
  if (has__target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_target_id(), output);
  }

  // required uint32 _content_type = 3;
  if (has__content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_content_type(), output);
  }

  // required string _content = 4;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->_content(), output);
  }

  // optional .up.chat_acc _accessory = 5;
  if (has__accessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_accessory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_say::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  // optional uint32 _target_id = 2;
  if (has__target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_target_id(), target);
  }

  // required uint32 _content_type = 3;
  if (has__content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_content_type(), target);
  }

  // required string _content = 4;
  if (has__content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_content().data(), this->_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_content(), target);
  }

  // optional .up.chat_acc _accessory = 5;
  if (has__accessory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_accessory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_say::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.chat_channel _channel = 1 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

    // optional uint32 _target_id = 2;
    if (has__target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_target_id());
    }

    // required uint32 _content_type = 3;
    if (has__content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_content_type());
    }

    // required string _content = 4;
    if (has__content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_content());
    }

    // optional .up.chat_acc _accessory = 5;
    if (has__accessory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_accessory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_say::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_say* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_say*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_say::MergeFrom(const chat_say& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
    if (from.has__target_id()) {
      set__target_id(from._target_id());
    }
    if (from.has__content_type()) {
      set__content_type(from._content_type());
    }
    if (from.has__content()) {
      set__content(from._content());
    }
    if (from.has__accessory()) {
      mutable__accessory()->::up::chat_acc::MergeFrom(from._accessory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_say::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_say::CopyFrom(const chat_say& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_say::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has__accessory()) {
    if (!this->_accessory().IsInitialized()) return false;
  }
  return true;
}

void chat_say::Swap(chat_say* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    std::swap(_target_id_, other->_target_id_);
    std::swap(_content_type_, other->_content_type_);
    std::swap(_content_, other->_content_);
    std::swap(_accessory_, other->_accessory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_say::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_say_descriptor_;
  metadata.reflection = chat_say_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* chat_acc_chat_acc_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_acc_chat_acc_t_descriptor_;
}
bool chat_acc_chat_acc_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const chat_acc_chat_acc_t chat_acc::binary;
const chat_acc_chat_acc_t chat_acc::pvp_replay;
const chat_acc_chat_acc_t chat_acc::chat_acc_t_MIN;
const chat_acc_chat_acc_t chat_acc::chat_acc_t_MAX;
const int chat_acc::chat_acc_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int chat_acc::kTypeFieldNumber;
const int chat_acc::kBinaryFieldNumber;
const int chat_acc::kRecordIdFieldNumber;
#endif  // !_MSC_VER

chat_acc::chat_acc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_acc::InitAsDefaultInstance() {
}

chat_acc::chat_acc(const chat_acc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_acc::SharedCtor() {
  _cached_size_ = 0;
  _type_ = 1;
  _binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _record_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_acc::~chat_acc() {
  SharedDtor();
}

void chat_acc::SharedDtor() {
  if (_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete _binary_;
  }
  if (this != default_instance_) {
  }
}

void chat_acc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_acc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_acc_descriptor_;
}

const chat_acc& chat_acc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_acc* chat_acc::default_instance_ = NULL;

chat_acc* chat_acc::New() const {
  return new chat_acc;
}

void chat_acc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _type_ = 1;
    if (has__binary()) {
      if (_binary_ != &::google::protobuf::internal::kEmptyString) {
        _binary_->clear();
      }
    }
    _record_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_acc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.chat_acc.chat_acc_t _type = 1 [default = binary];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::chat_acc_chat_acc_t_IsValid(value)) {
            set__type(static_cast< ::up::chat_acc_chat_acc_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__binary;
        break;
      }

      // optional string _binary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_binary().data(), this->_binary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__record_id;
        break;
      }

      // optional uint32 _record_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_record_id_)));
          set_has__record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_acc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.chat_acc.chat_acc_t _type = 1 [default = binary];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_type(), output);
  }

  // optional string _binary = 2;
  if (has__binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_binary().data(), this->_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->_binary(), output);
  }

  // optional uint32 _record_id = 3;
  if (has__record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_acc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.chat_acc.chat_acc_t _type = 1 [default = binary];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_type(), target);
  }

  // optional string _binary = 2;
  if (has__binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_binary().data(), this->_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->_binary(), target);
  }

  // optional uint32 _record_id = 3;
  if (has__record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_acc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.chat_acc.chat_acc_t _type = 1 [default = binary];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

    // optional string _binary = 2;
    if (has__binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_binary());
    }

    // optional uint32 _record_id = 3;
    if (has__record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_record_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_acc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_acc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_acc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_acc::MergeFrom(const chat_acc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__type()) {
      set__type(from._type());
    }
    if (from.has__binary()) {
      set__binary(from._binary());
    }
    if (from.has__record_id()) {
      set__record_id(from._record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_acc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_acc::CopyFrom(const chat_acc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_acc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_acc::Swap(chat_acc* other) {
  if (other != this) {
    std::swap(_type_, other->_type_);
    std::swap(_binary_, other->_binary_);
    std::swap(_record_id_, other->_record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_acc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_acc_descriptor_;
  metadata.reflection = chat_acc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_fresh::kChannelFieldNumber;
#endif  // !_MSC_VER

chat_fresh::chat_fresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_fresh::InitAsDefaultInstance() {
}

chat_fresh::chat_fresh(const chat_fresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_fresh::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_fresh::~chat_fresh() {
  SharedDtor();
}

void chat_fresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_fresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_fresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_fresh_descriptor_;
}

const chat_fresh& chat_fresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_fresh* chat_fresh::default_instance_ = NULL;

chat_fresh* chat_fresh::New() const {
  return new chat_fresh;
}

void chat_fresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _channel_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_fresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.chat_channel _channel = 1 [default = world_channel];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::up::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_fresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_fresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_fresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.chat_channel _channel = 1 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_fresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_fresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_fresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_fresh::MergeFrom(const chat_fresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_fresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_fresh::CopyFrom(const chat_fresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_fresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_fresh::Swap(chat_fresh* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_fresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_fresh_descriptor_;
  metadata.reflection = chat_fresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_fetch::kChannelFieldNumber;
const int chat_fetch::kChatIdFieldNumber;
#endif  // !_MSC_VER

chat_fetch::chat_fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_fetch::InitAsDefaultInstance() {
}

chat_fetch::chat_fetch(const chat_fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_fetch::SharedCtor() {
  _cached_size_ = 0;
  _channel_ = 1;
  _chat_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_fetch::~chat_fetch() {
  SharedDtor();
}

void chat_fetch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_fetch_descriptor_;
}

const chat_fetch& chat_fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_fetch* chat_fetch::default_instance_ = NULL;

chat_fetch* chat_fetch::New() const {
  return new chat_fetch;
}

void chat_fetch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _channel_ = 1;
    _chat_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.chat_channel _channel = 1 [default = world_channel];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::chat_channel_IsValid(value)) {
            set__channel(static_cast< ::up::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__chat_id;
        break;
      }

      // required uint32 _chat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__chat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_chat_id_)));
          set_has__chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_channel(), output);
  }

  // required uint32 _chat_id = 2;
  if (has__chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_chat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.chat_channel _channel = 1 [default = world_channel];
  if (has__channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_channel(), target);
  }

  // required uint32 _chat_id = 2;
  if (has__chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_chat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_fetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.chat_channel _channel = 1 [default = world_channel];
    if (has__channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_channel());
    }

    // required uint32 _chat_id = 2;
    if (has__chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_chat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_fetch::MergeFrom(const chat_fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__channel()) {
      set__channel(from._channel());
    }
    if (from.has__chat_id()) {
      set__chat_id(from._chat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_fetch::CopyFrom(const chat_fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void chat_fetch::Swap(chat_fetch* other) {
  if (other != this) {
    std::swap(_channel_, other->_channel_);
    std::swap(_chat_id_, other->_chat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_fetch_descriptor_;
  metadata.reflection = chat_fetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_add_bl::kUidFieldNumber;
#endif  // !_MSC_VER

chat_add_bl::chat_add_bl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_add_bl::InitAsDefaultInstance() {
}

chat_add_bl::chat_add_bl(const chat_add_bl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_add_bl::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_add_bl::~chat_add_bl() {
  SharedDtor();
}

void chat_add_bl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_add_bl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_add_bl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_add_bl_descriptor_;
}

const chat_add_bl& chat_add_bl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_add_bl* chat_add_bl::default_instance_ = NULL;

chat_add_bl* chat_add_bl::New() const {
  return new chat_add_bl;
}

void chat_add_bl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_add_bl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_add_bl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_add_bl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_add_bl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_add_bl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_add_bl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_add_bl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_add_bl::MergeFrom(const chat_add_bl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_add_bl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_add_bl::CopyFrom(const chat_add_bl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_add_bl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_add_bl::Swap(chat_add_bl* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_add_bl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_add_bl_descriptor_;
  metadata.reflection = chat_add_bl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_del_bl::kUidFieldNumber;
#endif  // !_MSC_VER

chat_del_bl::chat_del_bl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_del_bl::InitAsDefaultInstance() {
}

chat_del_bl::chat_del_bl(const chat_del_bl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_del_bl::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_del_bl::~chat_del_bl() {
  SharedDtor();
}

void chat_del_bl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_del_bl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_del_bl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_del_bl_descriptor_;
}

const chat_del_bl& chat_del_bl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

chat_del_bl* chat_del_bl::default_instance_ = NULL;

chat_del_bl* chat_del_bl::New() const {
  return new chat_del_bl;
}

void chat_del_bl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_del_bl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_del_bl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_del_bl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_del_bl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_del_bl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_del_bl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_del_bl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_del_bl::MergeFrom(const chat_del_bl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_del_bl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_del_bl::CopyFrom(const chat_del_bl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_del_bl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void chat_del_bl::Swap(chat_del_bl* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_del_bl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_del_bl_descriptor_;
  metadata.reflection = chat_del_bl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild::kCreateFieldNumber;
const int guild::kDismissFieldNumber;
const int guild::kListFieldNumber;
const int guild::kSearchFieldNumber;
const int guild::kJoinFieldNumber;
const int guild::kJoinConfirmFieldNumber;
const int guild::kGuildLeaveFieldNumber;
const int guild::kKickFieldNumber;
const int guild::kSetFieldNumber;
const int guild::kQueryFieldNumber;
const int guild::kOpenPannelFieldNumber;
const int guild::kSetJobFieldNumber;
const int guild::kAddHireFieldNumber;
const int guild::kDelHireFieldNumber;
const int guild::kQueryHiresFieldNumber;
const int guild::kHireHeroFieldNumber;
const int guild::kWorshipReqFieldNumber;
const int guild::kWorshipWithdrawFieldNumber;
const int guild::kQueryHhDetailFieldNumber;
const int guild::kInstanceQueryFieldNumber;
const int guild::kInstanceDetailFieldNumber;
const int guild::kInstanceStartFieldNumber;
const int guild::kInstanceEndFieldNumber;
const int guild::kInstanceDropFieldNumber;
const int guild::kInstanceOpenFieldNumber;
const int guild::kInstanceApplyFieldNumber;
const int guild::kDropInfoFieldNumber;
const int guild::kDropGiveFieldNumber;
const int guild::kInstanceDamageFieldNumber;
const int guild::kItemsHistoryFieldNumber;
const int guild::kGuildJumpFieldNumber;
const int guild::kGuildAppQueueFieldNumber;
const int guild::kInstancePrepareFieldNumber;
const int guild::kGuildQueryMemberFieldNumber;
const int guild::kGuildStageRankFieldNumber;
const int guild::kSetJumpFieldNumber;
#endif  // !_MSC_VER

guild::guild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild::InitAsDefaultInstance() {
  _create_ = const_cast< ::up::guild_create*>(&::up::guild_create::default_instance());
  _dismiss_ = const_cast< ::up::guild_dismiss*>(&::up::guild_dismiss::default_instance());
  _list_ = const_cast< ::up::guild_list*>(&::up::guild_list::default_instance());
  _search_ = const_cast< ::up::guild_search*>(&::up::guild_search::default_instance());
  _join_ = const_cast< ::up::guild_join*>(&::up::guild_join::default_instance());
  _join_confirm_ = const_cast< ::up::guild_join_confirm*>(&::up::guild_join_confirm::default_instance());
  _guild_leave_ = const_cast< ::up::guild_leave*>(&::up::guild_leave::default_instance());
  _kick_ = const_cast< ::up::guild_kick*>(&::up::guild_kick::default_instance());
  _set_ = const_cast< ::up::guild_set*>(&::up::guild_set::default_instance());
  _query_ = const_cast< ::up::guild_query*>(&::up::guild_query::default_instance());
  _open_pannel_ = const_cast< ::up::guild_open_pannel*>(&::up::guild_open_pannel::default_instance());
  _set_job_ = const_cast< ::up::guild_set_job*>(&::up::guild_set_job::default_instance());
  _add_hire_ = const_cast< ::up::guild_add_hire*>(&::up::guild_add_hire::default_instance());
  _del_hire_ = const_cast< ::up::guild_del_hire*>(&::up::guild_del_hire::default_instance());
  _query_hires_ = const_cast< ::up::guild_query_hires*>(&::up::guild_query_hires::default_instance());
  _hire_hero_ = const_cast< ::up::guild_hire_hero*>(&::up::guild_hire_hero::default_instance());
  _worship_req_ = const_cast< ::up::guild_worship_req*>(&::up::guild_worship_req::default_instance());
  _worship_withdraw_ = const_cast< ::up::guild_worship_withdraw*>(&::up::guild_worship_withdraw::default_instance());
  _query_hh_detail_ = const_cast< ::up::guild_qurey_hh_detail*>(&::up::guild_qurey_hh_detail::default_instance());
  _instance_query_ = const_cast< ::up::guild_instance_query*>(&::up::guild_instance_query::default_instance());
  _instance_detail_ = const_cast< ::up::guild_instance_detail*>(&::up::guild_instance_detail::default_instance());
  _instance_start_ = const_cast< ::up::guild_instance_start*>(&::up::guild_instance_start::default_instance());
  _instance_end_ = const_cast< ::up::guild_instance_end*>(&::up::guild_instance_end::default_instance());
  _instance_drop_ = const_cast< ::up::guild_instance_drop*>(&::up::guild_instance_drop::default_instance());
  _instance_open_ = const_cast< ::up::guild_instance_open*>(&::up::guild_instance_open::default_instance());
  _instance_apply_ = const_cast< ::up::guild_instance_apply*>(&::up::guild_instance_apply::default_instance());
  _drop_info_ = const_cast< ::up::guild_drop_info*>(&::up::guild_drop_info::default_instance());
  _drop_give_ = const_cast< ::up::guild_drop_give*>(&::up::guild_drop_give::default_instance());
  _instance_damage_ = const_cast< ::up::guild_instance_damage*>(&::up::guild_instance_damage::default_instance());
  _items_history_ = const_cast< ::up::guild_items_history*>(&::up::guild_items_history::default_instance());
  _guild_jump_ = const_cast< ::up::guild_jump*>(&::up::guild_jump::default_instance());
  _guild_app_queue_ = const_cast< ::up::guild_app_queue*>(&::up::guild_app_queue::default_instance());
  _instance_prepare_ = const_cast< ::up::guild_prepare_instance*>(&::up::guild_prepare_instance::default_instance());
  _guild_query_member_ = const_cast< ::up::guild_query_member*>(&::up::guild_query_member::default_instance());
  _guild_stage_rank_ = const_cast< ::up::guild_stage_rank*>(&::up::guild_stage_rank::default_instance());
  _set_jump_ = const_cast< ::up::guild_set_jump*>(&::up::guild_set_jump::default_instance());
}

guild::guild(const guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild::SharedCtor() {
  _cached_size_ = 0;
  _create_ = NULL;
  _dismiss_ = NULL;
  _list_ = NULL;
  _search_ = NULL;
  _join_ = NULL;
  _join_confirm_ = NULL;
  _guild_leave_ = NULL;
  _kick_ = NULL;
  _set_ = NULL;
  _query_ = NULL;
  _open_pannel_ = NULL;
  _set_job_ = NULL;
  _add_hire_ = NULL;
  _del_hire_ = NULL;
  _query_hires_ = NULL;
  _hire_hero_ = NULL;
  _worship_req_ = NULL;
  _worship_withdraw_ = NULL;
  _query_hh_detail_ = NULL;
  _instance_query_ = NULL;
  _instance_detail_ = NULL;
  _instance_start_ = NULL;
  _instance_end_ = NULL;
  _instance_drop_ = NULL;
  _instance_open_ = NULL;
  _instance_apply_ = NULL;
  _drop_info_ = NULL;
  _drop_give_ = NULL;
  _instance_damage_ = NULL;
  _items_history_ = NULL;
  _guild_jump_ = NULL;
  _guild_app_queue_ = NULL;
  _instance_prepare_ = NULL;
  _guild_query_member_ = NULL;
  _guild_stage_rank_ = NULL;
  _set_jump_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild::~guild() {
  SharedDtor();
}

void guild::SharedDtor() {
  if (this != default_instance_) {
    delete _create_;
    delete _dismiss_;
    delete _list_;
    delete _search_;
    delete _join_;
    delete _join_confirm_;
    delete _guild_leave_;
    delete _kick_;
    delete _set_;
    delete _query_;
    delete _open_pannel_;
    delete _set_job_;
    delete _add_hire_;
    delete _del_hire_;
    delete _query_hires_;
    delete _hire_hero_;
    delete _worship_req_;
    delete _worship_withdraw_;
    delete _query_hh_detail_;
    delete _instance_query_;
    delete _instance_detail_;
    delete _instance_start_;
    delete _instance_end_;
    delete _instance_drop_;
    delete _instance_open_;
    delete _instance_apply_;
    delete _drop_info_;
    delete _drop_give_;
    delete _instance_damage_;
    delete _items_history_;
    delete _guild_jump_;
    delete _guild_app_queue_;
    delete _instance_prepare_;
    delete _guild_query_member_;
    delete _guild_stage_rank_;
    delete _set_jump_;
  }
}

void guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_descriptor_;
}

const guild& guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild* guild::default_instance_ = NULL;

guild* guild::New() const {
  return new guild;
}

void guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__create()) {
      if (_create_ != NULL) _create_->::up::guild_create::Clear();
    }
    if (has__dismiss()) {
      if (_dismiss_ != NULL) _dismiss_->::up::guild_dismiss::Clear();
    }
    if (has__list()) {
      if (_list_ != NULL) _list_->::up::guild_list::Clear();
    }
    if (has__search()) {
      if (_search_ != NULL) _search_->::up::guild_search::Clear();
    }
    if (has__join()) {
      if (_join_ != NULL) _join_->::up::guild_join::Clear();
    }
    if (has__join_confirm()) {
      if (_join_confirm_ != NULL) _join_confirm_->::up::guild_join_confirm::Clear();
    }
    if (has__guild_leave()) {
      if (_guild_leave_ != NULL) _guild_leave_->::up::guild_leave::Clear();
    }
    if (has__kick()) {
      if (_kick_ != NULL) _kick_->::up::guild_kick::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has__set()) {
      if (_set_ != NULL) _set_->::up::guild_set::Clear();
    }
    if (has__query()) {
      if (_query_ != NULL) _query_->::up::guild_query::Clear();
    }
    if (has__open_pannel()) {
      if (_open_pannel_ != NULL) _open_pannel_->::up::guild_open_pannel::Clear();
    }
    if (has__set_job()) {
      if (_set_job_ != NULL) _set_job_->::up::guild_set_job::Clear();
    }
    if (has__add_hire()) {
      if (_add_hire_ != NULL) _add_hire_->::up::guild_add_hire::Clear();
    }
    if (has__del_hire()) {
      if (_del_hire_ != NULL) _del_hire_->::up::guild_del_hire::Clear();
    }
    if (has__query_hires()) {
      if (_query_hires_ != NULL) _query_hires_->::up::guild_query_hires::Clear();
    }
    if (has__hire_hero()) {
      if (_hire_hero_ != NULL) _hire_hero_->::up::guild_hire_hero::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has__worship_req()) {
      if (_worship_req_ != NULL) _worship_req_->::up::guild_worship_req::Clear();
    }
    if (has__worship_withdraw()) {
      if (_worship_withdraw_ != NULL) _worship_withdraw_->::up::guild_worship_withdraw::Clear();
    }
    if (has__query_hh_detail()) {
      if (_query_hh_detail_ != NULL) _query_hh_detail_->::up::guild_qurey_hh_detail::Clear();
    }
    if (has__instance_query()) {
      if (_instance_query_ != NULL) _instance_query_->::up::guild_instance_query::Clear();
    }
    if (has__instance_detail()) {
      if (_instance_detail_ != NULL) _instance_detail_->::up::guild_instance_detail::Clear();
    }
    if (has__instance_start()) {
      if (_instance_start_ != NULL) _instance_start_->::up::guild_instance_start::Clear();
    }
    if (has__instance_end()) {
      if (_instance_end_ != NULL) _instance_end_->::up::guild_instance_end::Clear();
    }
    if (has__instance_drop()) {
      if (_instance_drop_ != NULL) _instance_drop_->::up::guild_instance_drop::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has__instance_open()) {
      if (_instance_open_ != NULL) _instance_open_->::up::guild_instance_open::Clear();
    }
    if (has__instance_apply()) {
      if (_instance_apply_ != NULL) _instance_apply_->::up::guild_instance_apply::Clear();
    }
    if (has__drop_info()) {
      if (_drop_info_ != NULL) _drop_info_->::up::guild_drop_info::Clear();
    }
    if (has__drop_give()) {
      if (_drop_give_ != NULL) _drop_give_->::up::guild_drop_give::Clear();
    }
    if (has__instance_damage()) {
      if (_instance_damage_ != NULL) _instance_damage_->::up::guild_instance_damage::Clear();
    }
    if (has__items_history()) {
      if (_items_history_ != NULL) _items_history_->::up::guild_items_history::Clear();
    }
    if (has__guild_jump()) {
      if (_guild_jump_ != NULL) _guild_jump_->::up::guild_jump::Clear();
    }
    if (has__guild_app_queue()) {
      if (_guild_app_queue_ != NULL) _guild_app_queue_->::up::guild_app_queue::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has__instance_prepare()) {
      if (_instance_prepare_ != NULL) _instance_prepare_->::up::guild_prepare_instance::Clear();
    }
    if (has__guild_query_member()) {
      if (_guild_query_member_ != NULL) _guild_query_member_->::up::guild_query_member::Clear();
    }
    if (has__guild_stage_rank()) {
      if (_guild_stage_rank_ != NULL) _guild_stage_rank_->::up::guild_stage_rank::Clear();
    }
    if (has__set_jump()) {
      if (_set_jump_ != NULL) _set_jump_->::up::guild_set_jump::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.guild_create _create = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__create()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__dismiss;
        break;
      }

      // optional .up.guild_dismiss _dismiss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__dismiss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__dismiss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__list;
        break;
      }

      // optional .up.guild_list _list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__search;
        break;
      }

      // optional .up.guild_search _search = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__search()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__join;
        break;
      }

      // optional .up.guild_join _join = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__join:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__join()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__join_confirm;
        break;
      }

      // optional .up.guild_join_confirm _join_confirm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__join_confirm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__join_confirm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__guild_leave;
        break;
      }

      // optional .up.guild_leave _guild_leave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild_leave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_leave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse__kick;
        break;
      }

      // optional .up.guild_kick _kick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__kick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__kick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse__set;
        break;
      }

      // optional .up.guild_set _set = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse__query;
        break;
      }

      // optional .up.guild_query _query = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse__open_pannel;
        break;
      }

      // optional .up.guild_open_pannel _open_pannel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__open_pannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__open_pannel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse__set_job;
        break;
      }

      // optional .up.guild_set_job _set_job = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_job()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse__add_hire;
        break;
      }

      // optional .up.guild_add_hire _add_hire = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__add_hire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__add_hire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse__del_hire;
        break;
      }

      // optional .up.guild_del_hire _del_hire = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__del_hire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__del_hire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse__query_hires;
        break;
      }

      // optional .up.guild_query_hires _query_hires = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_hires:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_hires()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse__hire_hero;
        break;
      }

      // optional .up.guild_hire_hero _hire_hero = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__hire_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__hire_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse__worship_req;
        break;
      }

      // optional .up.guild_worship_req _worship_req = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__worship_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worship_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse__worship_withdraw;
        break;
      }

      // optional .up.guild_worship_withdraw _worship_withdraw = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__worship_withdraw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worship_withdraw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse__query_hh_detail;
        break;
      }

      // optional .up.guild_qurey_hh_detail _query_hh_detail = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_hh_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_hh_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse__instance_query;
        break;
      }

      // optional .up.guild_instance_query _instance_query = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse__instance_detail;
        break;
      }

      // optional .up.guild_instance_detail _instance_detail = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse__instance_start;
        break;
      }

      // optional .up.guild_instance_start _instance_start = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse__instance_end;
        break;
      }

      // optional .up.guild_instance_end _instance_end = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse__instance_drop;
        break;
      }

      // optional .up.guild_instance_drop _instance_drop = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse__instance_open;
        break;
      }

      // optional .up.guild_instance_open _instance_open = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_open()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse__instance_apply;
        break;
      }

      // optional .up.guild_instance_apply _instance_apply = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse__drop_info;
        break;
      }

      // optional .up.guild_drop_info _drop_info = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__drop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse__drop_give;
        break;
      }

      // optional .up.guild_drop_give _drop_give = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__drop_give:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__drop_give()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse__instance_damage;
        break;
      }

      // optional .up.guild_instance_damage _instance_damage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_damage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse__items_history;
        break;
      }

      // optional .up.guild_items_history _items_history = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__items_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__items_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse__guild_jump;
        break;
      }

      // optional .up.guild_jump _guild_jump = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild_jump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_jump()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse__guild_app_queue;
        break;
      }

      // optional .up.guild_app_queue _guild_app_queue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild_app_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_app_queue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse__instance_prepare;
        break;
      }

      // optional .up.guild_prepare_instance _instance_prepare = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__instance_prepare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__instance_prepare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse__guild_query_member;
        break;
      }

      // optional .up.guild_query_member _guild_query_member = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild_query_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_query_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse__guild_stage_rank;
        break;
      }

      // optional .up.guild_stage_rank _guild_stage_rank = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__guild_stage_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__guild_stage_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse__set_jump;
        break;
      }

      // optional .up.guild_set_jump _set_jump = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_jump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_jump()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.guild_create _create = 1;
  if (has__create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_create(), output);
  }

  // optional .up.guild_dismiss _dismiss = 2;
  if (has__dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_dismiss(), output);
  }

  // optional .up.guild_list _list = 3;
  if (has__list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_list(), output);
  }

  // optional .up.guild_search _search = 4;
  if (has__search()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_search(), output);
  }

  // optional .up.guild_join _join = 5;
  if (has__join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_join(), output);
  }

  // optional .up.guild_join_confirm _join_confirm = 6;
  if (has__join_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_join_confirm(), output);
  }

  // optional .up.guild_leave _guild_leave = 7;
  if (has__guild_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_guild_leave(), output);
  }

  // optional .up.guild_kick _kick = 8;
  if (has__kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_kick(), output);
  }

  // optional .up.guild_set _set = 9;
  if (has__set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_set(), output);
  }

  // optional .up.guild_query _query = 10;
  if (has__query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_query(), output);
  }

  // optional .up.guild_open_pannel _open_pannel = 11;
  if (has__open_pannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_open_pannel(), output);
  }

  // optional .up.guild_set_job _set_job = 12;
  if (has__set_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_set_job(), output);
  }

  // optional .up.guild_add_hire _add_hire = 13;
  if (has__add_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_add_hire(), output);
  }

  // optional .up.guild_del_hire _del_hire = 14;
  if (has__del_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_del_hire(), output);
  }

  // optional .up.guild_query_hires _query_hires = 15;
  if (has__query_hires()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_query_hires(), output);
  }

  // optional .up.guild_hire_hero _hire_hero = 16;
  if (has__hire_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_hire_hero(), output);
  }

  // optional .up.guild_worship_req _worship_req = 17;
  if (has__worship_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_worship_req(), output);
  }

  // optional .up.guild_worship_withdraw _worship_withdraw = 18;
  if (has__worship_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_worship_withdraw(), output);
  }

  // optional .up.guild_qurey_hh_detail _query_hh_detail = 19;
  if (has__query_hh_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_query_hh_detail(), output);
  }

  // optional .up.guild_instance_query _instance_query = 20;
  if (has__instance_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_instance_query(), output);
  }

  // optional .up.guild_instance_detail _instance_detail = 21;
  if (has__instance_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_instance_detail(), output);
  }

  // optional .up.guild_instance_start _instance_start = 22;
  if (has__instance_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_instance_start(), output);
  }

  // optional .up.guild_instance_end _instance_end = 23;
  if (has__instance_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_instance_end(), output);
  }

  // optional .up.guild_instance_drop _instance_drop = 24;
  if (has__instance_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_instance_drop(), output);
  }

  // optional .up.guild_instance_open _instance_open = 25;
  if (has__instance_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_instance_open(), output);
  }

  // optional .up.guild_instance_apply _instance_apply = 26;
  if (has__instance_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_instance_apply(), output);
  }

  // optional .up.guild_drop_info _drop_info = 27;
  if (has__drop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_drop_info(), output);
  }

  // optional .up.guild_drop_give _drop_give = 28;
  if (has__drop_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_drop_give(), output);
  }

  // optional .up.guild_instance_damage _instance_damage = 29;
  if (has__instance_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_instance_damage(), output);
  }

  // optional .up.guild_items_history _items_history = 30;
  if (has__items_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_items_history(), output);
  }

  // optional .up.guild_jump _guild_jump = 31;
  if (has__guild_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_guild_jump(), output);
  }

  // optional .up.guild_app_queue _guild_app_queue = 32;
  if (has__guild_app_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_guild_app_queue(), output);
  }

  // optional .up.guild_prepare_instance _instance_prepare = 33;
  if (has__instance_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_instance_prepare(), output);
  }

  // optional .up.guild_query_member _guild_query_member = 34;
  if (has__guild_query_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_guild_query_member(), output);
  }

  // optional .up.guild_stage_rank _guild_stage_rank = 35;
  if (has__guild_stage_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_guild_stage_rank(), output);
  }

  // optional .up.guild_set_jump _set_jump = 36;
  if (has__set_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_set_jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.guild_create _create = 1;
  if (has__create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_create(), target);
  }

  // optional .up.guild_dismiss _dismiss = 2;
  if (has__dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_dismiss(), target);
  }

  // optional .up.guild_list _list = 3;
  if (has__list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_list(), target);
  }

  // optional .up.guild_search _search = 4;
  if (has__search()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_search(), target);
  }

  // optional .up.guild_join _join = 5;
  if (has__join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_join(), target);
  }

  // optional .up.guild_join_confirm _join_confirm = 6;
  if (has__join_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_join_confirm(), target);
  }

  // optional .up.guild_leave _guild_leave = 7;
  if (has__guild_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_guild_leave(), target);
  }

  // optional .up.guild_kick _kick = 8;
  if (has__kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_kick(), target);
  }

  // optional .up.guild_set _set = 9;
  if (has__set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_set(), target);
  }

  // optional .up.guild_query _query = 10;
  if (has__query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_query(), target);
  }

  // optional .up.guild_open_pannel _open_pannel = 11;
  if (has__open_pannel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_open_pannel(), target);
  }

  // optional .up.guild_set_job _set_job = 12;
  if (has__set_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_set_job(), target);
  }

  // optional .up.guild_add_hire _add_hire = 13;
  if (has__add_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_add_hire(), target);
  }

  // optional .up.guild_del_hire _del_hire = 14;
  if (has__del_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->_del_hire(), target);
  }

  // optional .up.guild_query_hires _query_hires = 15;
  if (has__query_hires()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->_query_hires(), target);
  }

  // optional .up.guild_hire_hero _hire_hero = 16;
  if (has__hire_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->_hire_hero(), target);
  }

  // optional .up.guild_worship_req _worship_req = 17;
  if (has__worship_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->_worship_req(), target);
  }

  // optional .up.guild_worship_withdraw _worship_withdraw = 18;
  if (has__worship_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->_worship_withdraw(), target);
  }

  // optional .up.guild_qurey_hh_detail _query_hh_detail = 19;
  if (has__query_hh_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->_query_hh_detail(), target);
  }

  // optional .up.guild_instance_query _instance_query = 20;
  if (has__instance_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->_instance_query(), target);
  }

  // optional .up.guild_instance_detail _instance_detail = 21;
  if (has__instance_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->_instance_detail(), target);
  }

  // optional .up.guild_instance_start _instance_start = 22;
  if (has__instance_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->_instance_start(), target);
  }

  // optional .up.guild_instance_end _instance_end = 23;
  if (has__instance_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->_instance_end(), target);
  }

  // optional .up.guild_instance_drop _instance_drop = 24;
  if (has__instance_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->_instance_drop(), target);
  }

  // optional .up.guild_instance_open _instance_open = 25;
  if (has__instance_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->_instance_open(), target);
  }

  // optional .up.guild_instance_apply _instance_apply = 26;
  if (has__instance_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->_instance_apply(), target);
  }

  // optional .up.guild_drop_info _drop_info = 27;
  if (has__drop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->_drop_info(), target);
  }

  // optional .up.guild_drop_give _drop_give = 28;
  if (has__drop_give()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->_drop_give(), target);
  }

  // optional .up.guild_instance_damage _instance_damage = 29;
  if (has__instance_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->_instance_damage(), target);
  }

  // optional .up.guild_items_history _items_history = 30;
  if (has__items_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->_items_history(), target);
  }

  // optional .up.guild_jump _guild_jump = 31;
  if (has__guild_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->_guild_jump(), target);
  }

  // optional .up.guild_app_queue _guild_app_queue = 32;
  if (has__guild_app_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->_guild_app_queue(), target);
  }

  // optional .up.guild_prepare_instance _instance_prepare = 33;
  if (has__instance_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->_instance_prepare(), target);
  }

  // optional .up.guild_query_member _guild_query_member = 34;
  if (has__guild_query_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->_guild_query_member(), target);
  }

  // optional .up.guild_stage_rank _guild_stage_rank = 35;
  if (has__guild_stage_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->_guild_stage_rank(), target);
  }

  // optional .up.guild_set_jump _set_jump = 36;
  if (has__set_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->_set_jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.guild_create _create = 1;
    if (has__create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_create());
    }

    // optional .up.guild_dismiss _dismiss = 2;
    if (has__dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_dismiss());
    }

    // optional .up.guild_list _list = 3;
    if (has__list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_list());
    }

    // optional .up.guild_search _search = 4;
    if (has__search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_search());
    }

    // optional .up.guild_join _join = 5;
    if (has__join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_join());
    }

    // optional .up.guild_join_confirm _join_confirm = 6;
    if (has__join_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_join_confirm());
    }

    // optional .up.guild_leave _guild_leave = 7;
    if (has__guild_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_leave());
    }

    // optional .up.guild_kick _kick = 8;
    if (has__kick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_kick());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .up.guild_set _set = 9;
    if (has__set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set());
    }

    // optional .up.guild_query _query = 10;
    if (has__query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query());
    }

    // optional .up.guild_open_pannel _open_pannel = 11;
    if (has__open_pannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_open_pannel());
    }

    // optional .up.guild_set_job _set_job = 12;
    if (has__set_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_job());
    }

    // optional .up.guild_add_hire _add_hire = 13;
    if (has__add_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_add_hire());
    }

    // optional .up.guild_del_hire _del_hire = 14;
    if (has__del_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_del_hire());
    }

    // optional .up.guild_query_hires _query_hires = 15;
    if (has__query_hires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_hires());
    }

    // optional .up.guild_hire_hero _hire_hero = 16;
    if (has__hire_hero()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_hire_hero());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .up.guild_worship_req _worship_req = 17;
    if (has__worship_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worship_req());
    }

    // optional .up.guild_worship_withdraw _worship_withdraw = 18;
    if (has__worship_withdraw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worship_withdraw());
    }

    // optional .up.guild_qurey_hh_detail _query_hh_detail = 19;
    if (has__query_hh_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_hh_detail());
    }

    // optional .up.guild_instance_query _instance_query = 20;
    if (has__instance_query()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_query());
    }

    // optional .up.guild_instance_detail _instance_detail = 21;
    if (has__instance_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_detail());
    }

    // optional .up.guild_instance_start _instance_start = 22;
    if (has__instance_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_start());
    }

    // optional .up.guild_instance_end _instance_end = 23;
    if (has__instance_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_end());
    }

    // optional .up.guild_instance_drop _instance_drop = 24;
    if (has__instance_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_drop());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .up.guild_instance_open _instance_open = 25;
    if (has__instance_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_open());
    }

    // optional .up.guild_instance_apply _instance_apply = 26;
    if (has__instance_apply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_apply());
    }

    // optional .up.guild_drop_info _drop_info = 27;
    if (has__drop_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_drop_info());
    }

    // optional .up.guild_drop_give _drop_give = 28;
    if (has__drop_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_drop_give());
    }

    // optional .up.guild_instance_damage _instance_damage = 29;
    if (has__instance_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_damage());
    }

    // optional .up.guild_items_history _items_history = 30;
    if (has__items_history()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_items_history());
    }

    // optional .up.guild_jump _guild_jump = 31;
    if (has__guild_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_jump());
    }

    // optional .up.guild_app_queue _guild_app_queue = 32;
    if (has__guild_app_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_app_queue());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .up.guild_prepare_instance _instance_prepare = 33;
    if (has__instance_prepare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_instance_prepare());
    }

    // optional .up.guild_query_member _guild_query_member = 34;
    if (has__guild_query_member()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_query_member());
    }

    // optional .up.guild_stage_rank _guild_stage_rank = 35;
    if (has__guild_stage_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_guild_stage_rank());
    }

    // optional .up.guild_set_jump _set_jump = 36;
    if (has__set_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_jump());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild::MergeFrom(const guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__create()) {
      mutable__create()->::up::guild_create::MergeFrom(from._create());
    }
    if (from.has__dismiss()) {
      mutable__dismiss()->::up::guild_dismiss::MergeFrom(from._dismiss());
    }
    if (from.has__list()) {
      mutable__list()->::up::guild_list::MergeFrom(from._list());
    }
    if (from.has__search()) {
      mutable__search()->::up::guild_search::MergeFrom(from._search());
    }
    if (from.has__join()) {
      mutable__join()->::up::guild_join::MergeFrom(from._join());
    }
    if (from.has__join_confirm()) {
      mutable__join_confirm()->::up::guild_join_confirm::MergeFrom(from._join_confirm());
    }
    if (from.has__guild_leave()) {
      mutable__guild_leave()->::up::guild_leave::MergeFrom(from._guild_leave());
    }
    if (from.has__kick()) {
      mutable__kick()->::up::guild_kick::MergeFrom(from._kick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__set()) {
      mutable__set()->::up::guild_set::MergeFrom(from._set());
    }
    if (from.has__query()) {
      mutable__query()->::up::guild_query::MergeFrom(from._query());
    }
    if (from.has__open_pannel()) {
      mutable__open_pannel()->::up::guild_open_pannel::MergeFrom(from._open_pannel());
    }
    if (from.has__set_job()) {
      mutable__set_job()->::up::guild_set_job::MergeFrom(from._set_job());
    }
    if (from.has__add_hire()) {
      mutable__add_hire()->::up::guild_add_hire::MergeFrom(from._add_hire());
    }
    if (from.has__del_hire()) {
      mutable__del_hire()->::up::guild_del_hire::MergeFrom(from._del_hire());
    }
    if (from.has__query_hires()) {
      mutable__query_hires()->::up::guild_query_hires::MergeFrom(from._query_hires());
    }
    if (from.has__hire_hero()) {
      mutable__hire_hero()->::up::guild_hire_hero::MergeFrom(from._hire_hero());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has__worship_req()) {
      mutable__worship_req()->::up::guild_worship_req::MergeFrom(from._worship_req());
    }
    if (from.has__worship_withdraw()) {
      mutable__worship_withdraw()->::up::guild_worship_withdraw::MergeFrom(from._worship_withdraw());
    }
    if (from.has__query_hh_detail()) {
      mutable__query_hh_detail()->::up::guild_qurey_hh_detail::MergeFrom(from._query_hh_detail());
    }
    if (from.has__instance_query()) {
      mutable__instance_query()->::up::guild_instance_query::MergeFrom(from._instance_query());
    }
    if (from.has__instance_detail()) {
      mutable__instance_detail()->::up::guild_instance_detail::MergeFrom(from._instance_detail());
    }
    if (from.has__instance_start()) {
      mutable__instance_start()->::up::guild_instance_start::MergeFrom(from._instance_start());
    }
    if (from.has__instance_end()) {
      mutable__instance_end()->::up::guild_instance_end::MergeFrom(from._instance_end());
    }
    if (from.has__instance_drop()) {
      mutable__instance_drop()->::up::guild_instance_drop::MergeFrom(from._instance_drop());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has__instance_open()) {
      mutable__instance_open()->::up::guild_instance_open::MergeFrom(from._instance_open());
    }
    if (from.has__instance_apply()) {
      mutable__instance_apply()->::up::guild_instance_apply::MergeFrom(from._instance_apply());
    }
    if (from.has__drop_info()) {
      mutable__drop_info()->::up::guild_drop_info::MergeFrom(from._drop_info());
    }
    if (from.has__drop_give()) {
      mutable__drop_give()->::up::guild_drop_give::MergeFrom(from._drop_give());
    }
    if (from.has__instance_damage()) {
      mutable__instance_damage()->::up::guild_instance_damage::MergeFrom(from._instance_damage());
    }
    if (from.has__items_history()) {
      mutable__items_history()->::up::guild_items_history::MergeFrom(from._items_history());
    }
    if (from.has__guild_jump()) {
      mutable__guild_jump()->::up::guild_jump::MergeFrom(from._guild_jump());
    }
    if (from.has__guild_app_queue()) {
      mutable__guild_app_queue()->::up::guild_app_queue::MergeFrom(from._guild_app_queue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has__instance_prepare()) {
      mutable__instance_prepare()->::up::guild_prepare_instance::MergeFrom(from._instance_prepare());
    }
    if (from.has__guild_query_member()) {
      mutable__guild_query_member()->::up::guild_query_member::MergeFrom(from._guild_query_member());
    }
    if (from.has__guild_stage_rank()) {
      mutable__guild_stage_rank()->::up::guild_stage_rank::MergeFrom(from._guild_stage_rank());
    }
    if (from.has__set_jump()) {
      mutable__set_jump()->::up::guild_set_jump::MergeFrom(from._set_jump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild::CopyFrom(const guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild::IsInitialized() const {

  if (has__create()) {
    if (!this->_create().IsInitialized()) return false;
  }
  if (has__search()) {
    if (!this->_search().IsInitialized()) return false;
  }
  if (has__join()) {
    if (!this->_join().IsInitialized()) return false;
  }
  if (has__join_confirm()) {
    if (!this->_join_confirm().IsInitialized()) return false;
  }
  if (has__kick()) {
    if (!this->_kick().IsInitialized()) return false;
  }
  if (has__set_job()) {
    if (!this->_set_job().IsInitialized()) return false;
  }
  if (has__add_hire()) {
    if (!this->_add_hire().IsInitialized()) return false;
  }
  if (has__del_hire()) {
    if (!this->_del_hire().IsInitialized()) return false;
  }
  if (has__query_hires()) {
    if (!this->_query_hires().IsInitialized()) return false;
  }
  if (has__hire_hero()) {
    if (!this->_hire_hero().IsInitialized()) return false;
  }
  if (has__worship_req()) {
    if (!this->_worship_req().IsInitialized()) return false;
  }
  if (has__query_hh_detail()) {
    if (!this->_query_hh_detail().IsInitialized()) return false;
  }
  if (has__instance_detail()) {
    if (!this->_instance_detail().IsInitialized()) return false;
  }
  if (has__instance_start()) {
    if (!this->_instance_start().IsInitialized()) return false;
  }
  if (has__instance_end()) {
    if (!this->_instance_end().IsInitialized()) return false;
  }
  if (has__instance_drop()) {
    if (!this->_instance_drop().IsInitialized()) return false;
  }
  if (has__instance_open()) {
    if (!this->_instance_open().IsInitialized()) return false;
  }
  if (has__instance_apply()) {
    if (!this->_instance_apply().IsInitialized()) return false;
  }
  if (has__drop_give()) {
    if (!this->_drop_give().IsInitialized()) return false;
  }
  if (has__instance_damage()) {
    if (!this->_instance_damage().IsInitialized()) return false;
  }
  if (has__guild_app_queue()) {
    if (!this->_guild_app_queue().IsInitialized()) return false;
  }
  if (has__instance_prepare()) {
    if (!this->_instance_prepare().IsInitialized()) return false;
  }
  if (has__guild_stage_rank()) {
    if (!this->_guild_stage_rank().IsInitialized()) return false;
  }
  if (has__set_jump()) {
    if (!this->_set_jump().IsInitialized()) return false;
  }
  return true;
}

void guild::Swap(guild* other) {
  if (other != this) {
    std::swap(_create_, other->_create_);
    std::swap(_dismiss_, other->_dismiss_);
    std::swap(_list_, other->_list_);
    std::swap(_search_, other->_search_);
    std::swap(_join_, other->_join_);
    std::swap(_join_confirm_, other->_join_confirm_);
    std::swap(_guild_leave_, other->_guild_leave_);
    std::swap(_kick_, other->_kick_);
    std::swap(_set_, other->_set_);
    std::swap(_query_, other->_query_);
    std::swap(_open_pannel_, other->_open_pannel_);
    std::swap(_set_job_, other->_set_job_);
    std::swap(_add_hire_, other->_add_hire_);
    std::swap(_del_hire_, other->_del_hire_);
    std::swap(_query_hires_, other->_query_hires_);
    std::swap(_hire_hero_, other->_hire_hero_);
    std::swap(_worship_req_, other->_worship_req_);
    std::swap(_worship_withdraw_, other->_worship_withdraw_);
    std::swap(_query_hh_detail_, other->_query_hh_detail_);
    std::swap(_instance_query_, other->_instance_query_);
    std::swap(_instance_detail_, other->_instance_detail_);
    std::swap(_instance_start_, other->_instance_start_);
    std::swap(_instance_end_, other->_instance_end_);
    std::swap(_instance_drop_, other->_instance_drop_);
    std::swap(_instance_open_, other->_instance_open_);
    std::swap(_instance_apply_, other->_instance_apply_);
    std::swap(_drop_info_, other->_drop_info_);
    std::swap(_drop_give_, other->_drop_give_);
    std::swap(_instance_damage_, other->_instance_damage_);
    std::swap(_items_history_, other->_items_history_);
    std::swap(_guild_jump_, other->_guild_jump_);
    std::swap(_guild_app_queue_, other->_guild_app_queue_);
    std::swap(_instance_prepare_, other->_instance_prepare_);
    std::swap(_guild_query_member_, other->_guild_query_member_);
    std::swap(_guild_stage_rank_, other->_guild_stage_rank_);
    std::swap(_set_jump_, other->_set_jump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_descriptor_;
  metadata.reflection = guild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_set_jump_is_can_jump_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_jump_is_can_jump_descriptor_;
}
bool guild_set_jump_is_can_jump_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_set_jump_is_can_jump guild_set_jump::_true;
const guild_set_jump_is_can_jump guild_set_jump::_false;
const guild_set_jump_is_can_jump guild_set_jump::is_can_jump_MIN;
const guild_set_jump_is_can_jump guild_set_jump::is_can_jump_MAX;
const int guild_set_jump::is_can_jump_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_set_jump::kIsCanJumpFieldNumber;
#endif  // !_MSC_VER

guild_set_jump::guild_set_jump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_set_jump::InitAsDefaultInstance() {
}

guild_set_jump::guild_set_jump(const guild_set_jump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_set_jump::SharedCtor() {
  _cached_size_ = 0;
  _is_can_jump_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set_jump::~guild_set_jump() {
  SharedDtor();
}

void guild_set_jump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_set_jump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set_jump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_jump_descriptor_;
}

const guild_set_jump& guild_set_jump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_set_jump* guild_set_jump::default_instance_ = NULL;

guild_set_jump* guild_set_jump::New() const {
  return new guild_set_jump;
}

void guild_set_jump::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _is_can_jump_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set_jump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.guild_set_jump.is_can_jump _is_can_jump = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::guild_set_jump_is_can_jump_IsValid(value)) {
            set__is_can_jump(static_cast< ::up::guild_set_jump_is_can_jump >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_set_jump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.guild_set_jump.is_can_jump _is_can_jump = 1;
  if (has__is_can_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_is_can_jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_set_jump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.guild_set_jump.is_can_jump _is_can_jump = 1;
  if (has__is_can_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_is_can_jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_set_jump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.guild_set_jump.is_can_jump _is_can_jump = 1;
    if (has__is_can_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_is_can_jump());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set_jump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set_jump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set_jump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set_jump::MergeFrom(const guild_set_jump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__is_can_jump()) {
      set__is_can_jump(from._is_can_jump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set_jump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set_jump::CopyFrom(const guild_set_jump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set_jump::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_set_jump::Swap(guild_set_jump* other) {
  if (other != this) {
    std::swap(_is_can_jump_, other->_is_can_jump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set_jump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_jump_descriptor_;
  metadata.reflection = guild_set_jump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_stage_rank::kStageIdFieldNumber;
#endif  // !_MSC_VER

guild_stage_rank::guild_stage_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_stage_rank::InitAsDefaultInstance() {
}

guild_stage_rank::guild_stage_rank(const guild_stage_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_stage_rank::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_stage_rank::~guild_stage_rank() {
  SharedDtor();
}

void guild_stage_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_stage_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_stage_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_stage_rank_descriptor_;
}

const guild_stage_rank& guild_stage_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_stage_rank* guild_stage_rank::default_instance_ = NULL;

guild_stage_rank* guild_stage_rank::New() const {
  return new guild_stage_rank;
}

void guild_stage_rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_stage_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_stage_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_stage_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_stage_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_stage_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_stage_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_stage_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_stage_rank::MergeFrom(const guild_stage_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_stage_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_stage_rank::CopyFrom(const guild_stage_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_stage_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_stage_rank::Swap(guild_stage_rank* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_stage_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_stage_rank_descriptor_;
  metadata.reflection = guild_stage_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_query_member::guild_query_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_query_member::InitAsDefaultInstance() {
}

guild_query_member::guild_query_member(const guild_query_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_query_member::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_query_member::~guild_query_member() {
  SharedDtor();
}

void guild_query_member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_query_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_query_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_query_member_descriptor_;
}

const guild_query_member& guild_query_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_query_member* guild_query_member::default_instance_ = NULL;

guild_query_member* guild_query_member::New() const {
  return new guild_query_member;
}

void guild_query_member::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_query_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_query_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_query_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_query_member::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_query_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_query_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_query_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_query_member::MergeFrom(const guild_query_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_query_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_query_member::CopyFrom(const guild_query_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_query_member::IsInitialized() const {

  return true;
}

void guild_query_member::Swap(guild_query_member* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_query_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_query_member_descriptor_;
  metadata.reflection = guild_query_member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_prepare_instance::kStageIdFieldNumber;
#endif  // !_MSC_VER

guild_prepare_instance::guild_prepare_instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_prepare_instance::InitAsDefaultInstance() {
}

guild_prepare_instance::guild_prepare_instance(const guild_prepare_instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_prepare_instance::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_prepare_instance::~guild_prepare_instance() {
  SharedDtor();
}

void guild_prepare_instance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_prepare_instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_prepare_instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_prepare_instance_descriptor_;
}

const guild_prepare_instance& guild_prepare_instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_prepare_instance* guild_prepare_instance::default_instance_ = NULL;

guild_prepare_instance* guild_prepare_instance::New() const {
  return new guild_prepare_instance;
}

void guild_prepare_instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_prepare_instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_prepare_instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_prepare_instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_prepare_instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_prepare_instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_prepare_instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_prepare_instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_prepare_instance::MergeFrom(const guild_prepare_instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_prepare_instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_prepare_instance::CopyFrom(const guild_prepare_instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_prepare_instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_prepare_instance::Swap(guild_prepare_instance* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_prepare_instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_prepare_instance_descriptor_;
  metadata.reflection = guild_prepare_instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_app_queue::kItemIdFieldNumber;
#endif  // !_MSC_VER

guild_app_queue::guild_app_queue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_app_queue::InitAsDefaultInstance() {
}

guild_app_queue::guild_app_queue(const guild_app_queue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_app_queue::SharedCtor() {
  _cached_size_ = 0;
  _item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_app_queue::~guild_app_queue() {
  SharedDtor();
}

void guild_app_queue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_app_queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_app_queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_app_queue_descriptor_;
}

const guild_app_queue& guild_app_queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_app_queue* guild_app_queue::default_instance_ = NULL;

guild_app_queue* guild_app_queue::New() const {
  return new guild_app_queue;
}

void guild_app_queue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_app_queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_app_queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_app_queue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_app_queue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _item_id = 1;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_app_queue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_app_queue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_app_queue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_app_queue::MergeFrom(const guild_app_queue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_app_queue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_app_queue::CopyFrom(const guild_app_queue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_app_queue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_app_queue::Swap(guild_app_queue* other) {
  if (other != this) {
    std::swap(_item_id_, other->_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_app_queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_app_queue_descriptor_;
  metadata.reflection = guild_app_queue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_jump::guild_jump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_jump::InitAsDefaultInstance() {
}

guild_jump::guild_jump(const guild_jump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_jump::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_jump::~guild_jump() {
  SharedDtor();
}

void guild_jump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_jump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_jump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_jump_descriptor_;
}

const guild_jump& guild_jump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_jump* guild_jump::default_instance_ = NULL;

guild_jump* guild_jump::New() const {
  return new guild_jump;
}

void guild_jump::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_jump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_jump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_jump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_jump::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_jump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_jump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_jump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_jump::MergeFrom(const guild_jump& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_jump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_jump::CopyFrom(const guild_jump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_jump::IsInitialized() const {

  return true;
}

void guild_jump::Swap(guild_jump* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_jump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_jump_descriptor_;
  metadata.reflection = guild_jump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_items_history::guild_items_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_items_history::InitAsDefaultInstance() {
}

guild_items_history::guild_items_history(const guild_items_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_items_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_items_history::~guild_items_history() {
  SharedDtor();
}

void guild_items_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_items_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_items_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_items_history_descriptor_;
}

const guild_items_history& guild_items_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_items_history* guild_items_history::default_instance_ = NULL;

guild_items_history* guild_items_history::New() const {
  return new guild_items_history;
}

void guild_items_history::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_items_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_items_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_items_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_items_history::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_items_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_items_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_items_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_items_history::MergeFrom(const guild_items_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_items_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_items_history::CopyFrom(const guild_items_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_items_history::IsInitialized() const {

  return true;
}

void guild_items_history::Swap(guild_items_history* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_items_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_items_history_descriptor_;
  metadata.reflection = guild_items_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_drop_give::kItemIdFieldNumber;
const int guild_drop_give::kRaidIdFieldNumber;
const int guild_drop_give::kUserIdFieldNumber;
const int guild_drop_give::kTimeOutEndFieldNumber;
#endif  // !_MSC_VER

guild_drop_give::guild_drop_give()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_drop_give::InitAsDefaultInstance() {
}

guild_drop_give::guild_drop_give(const guild_drop_give& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_drop_give::SharedCtor() {
  _cached_size_ = 0;
  _item_id_ = 0u;
  _raid_id_ = 0u;
  _user_id_ = 0u;
  _time_out_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_give::~guild_drop_give() {
  SharedDtor();
}

void guild_drop_give::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_give::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_give::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_give_descriptor_;
}

const guild_drop_give& guild_drop_give::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_drop_give* guild_drop_give::default_instance_ = NULL;

guild_drop_give* guild_drop_give::New() const {
  return new guild_drop_give;
}

void guild_drop_give::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _item_id_ = 0u;
    _raid_id_ = 0u;
    _user_id_ = 0u;
    _time_out_end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_give::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__raid_id;
        break;
      }

      // required uint32 _raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__user_id;
        break;
      }

      // required uint32 _user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_user_id_)));
          set_has__user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__time_out_end;
        break;
      }

      // required uint32 _time_out_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__time_out_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_time_out_end_)));
          set_has__time_out_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_drop_give::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_item_id(), output);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_raid_id(), output);
  }

  // required uint32 _user_id = 3;
  if (has__user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_user_id(), output);
  }

  // required uint32 _time_out_end = 4;
  if (has__time_out_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_time_out_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_drop_give::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _item_id = 1;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_item_id(), target);
  }

  // required uint32 _raid_id = 2;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_raid_id(), target);
  }

  // required uint32 _user_id = 3;
  if (has__user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_user_id(), target);
  }

  // required uint32 _time_out_end = 4;
  if (has__time_out_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_time_out_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_drop_give::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _item_id = 1;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

    // required uint32 _raid_id = 2;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

    // required uint32 _user_id = 3;
    if (has__user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_user_id());
    }

    // required uint32 _time_out_end = 4;
    if (has__time_out_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_time_out_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_give::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_give* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_give*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_give::MergeFrom(const guild_drop_give& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
    if (from.has__user_id()) {
      set__user_id(from._user_id());
    }
    if (from.has__time_out_end()) {
      set__time_out_end(from._time_out_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_give::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_give::CopyFrom(const guild_drop_give& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_give::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void guild_drop_give::Swap(guild_drop_give* other) {
  if (other != this) {
    std::swap(_item_id_, other->_item_id_);
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_user_id_, other->_user_id_);
    std::swap(_time_out_end_, other->_time_out_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_give::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_give_descriptor_;
  metadata.reflection = guild_drop_give_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_damage::kRaidIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_damage::guild_instance_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_damage::InitAsDefaultInstance() {
}

guild_instance_damage::guild_instance_damage(const guild_instance_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_damage::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_damage::~guild_instance_damage() {
  SharedDtor();
}

void guild_instance_damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_damage_descriptor_;
}

const guild_instance_damage& guild_instance_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_damage* guild_instance_damage::default_instance_ = NULL;

guild_instance_damage* guild_instance_damage::New() const {
  return new guild_instance_damage;
}

void guild_instance_damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_damage::MergeFrom(const guild_instance_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_damage::CopyFrom(const guild_instance_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_instance_damage::Swap(guild_instance_damage* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_damage_descriptor_;
  metadata.reflection = guild_instance_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_drop_info::guild_drop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_drop_info::InitAsDefaultInstance() {
}

guild_drop_info::guild_drop_info(const guild_drop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_drop_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_drop_info::~guild_drop_info() {
  SharedDtor();
}

void guild_drop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_drop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_drop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_drop_info_descriptor_;
}

const guild_drop_info& guild_drop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_drop_info* guild_drop_info::default_instance_ = NULL;

guild_drop_info* guild_drop_info::New() const {
  return new guild_drop_info;
}

void guild_drop_info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_drop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_drop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_drop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_drop_info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_drop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_drop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_drop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_drop_info::MergeFrom(const guild_drop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_drop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_drop_info::CopyFrom(const guild_drop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_drop_info::IsInitialized() const {

  return true;
}

void guild_drop_info::Swap(guild_drop_info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_drop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_drop_info_descriptor_;
  metadata.reflection = guild_drop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_apply::kRaidIdFieldNumber;
const int guild_instance_apply::kItemIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_apply::guild_instance_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_apply::InitAsDefaultInstance() {
}

guild_instance_apply::guild_instance_apply(const guild_instance_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_apply::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  _item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_apply::~guild_instance_apply() {
  SharedDtor();
}

void guild_instance_apply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_apply_descriptor_;
}

const guild_instance_apply& guild_instance_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_apply* guild_instance_apply::default_instance_ = NULL;

guild_instance_apply* guild_instance_apply::New() const {
  return new guild_instance_apply;
}

void guild_instance_apply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _raid_id_ = 0u;
    _item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__item_id;
        break;
      }

      // required uint32 _item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_item_id_)));
          set_has__item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  // required uint32 _item_id = 2;
  if (has__item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_apply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

    // required uint32 _item_id = 2;
    if (has__item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_apply::MergeFrom(const guild_instance_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
    if (from.has__item_id()) {
      set__item_id(from._item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_apply::CopyFrom(const guild_instance_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_instance_apply::Swap(guild_instance_apply* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_item_id_, other->_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_apply_descriptor_;
  metadata.reflection = guild_instance_apply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_start::kStageIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_start::guild_instance_start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_start::InitAsDefaultInstance() {
}

guild_instance_start::guild_instance_start(const guild_instance_start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_start::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_start::~guild_instance_start() {
  SharedDtor();
}

void guild_instance_start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_start_descriptor_;
}

const guild_instance_start& guild_instance_start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_start* guild_instance_start::default_instance_ = NULL;

guild_instance_start* guild_instance_start::New() const {
  return new guild_instance_start;
}

void guild_instance_start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_start::MergeFrom(const guild_instance_start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_start::CopyFrom(const guild_instance_start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_instance_start::Swap(guild_instance_start* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_start_descriptor_;
  metadata.reflection = guild_instance_start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_end::kResultFieldNumber;
const int guild_instance_end::kHpInfoFieldNumber;
const int guild_instance_end::kWaveFieldNumber;
const int guild_instance_end::kDamageFieldNumber;
const int guild_instance_end::kProgressFieldNumber;
const int guild_instance_end::kStageProgressFieldNumber;
const int guild_instance_end::kOprationsFieldNumber;
const int guild_instance_end::kHeroesFieldNumber;
#endif  // !_MSC_VER

guild_instance_end::guild_instance_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_end::InitAsDefaultInstance() {
}

guild_instance_end::guild_instance_end(const guild_instance_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_end::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _wave_ = 0u;
  _damage_ = 0u;
  _progress_ = 0u;
  _stage_progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_end::~guild_instance_end() {
  SharedDtor();
}

void guild_instance_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_end_descriptor_;
}

const guild_instance_end& guild_instance_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_end* guild_instance_end::default_instance_ = NULL;

guild_instance_end* guild_instance_end::New() const {
  return new guild_instance_end;
}

void guild_instance_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _result_ = 0;
    _wave_ = 0u;
    _damage_ = 0u;
    _progress_ = 0u;
    _stage_progress_ = 0u;
  }
  _hp_info_.Clear();
  _oprations_.Clear();
  _heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.battle_result _result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::battle_result_IsValid(value)) {
            set__result(static_cast< ::up::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__hp_info;
        break;
      }

      // repeated uint32 _hp_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__hp_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__hp_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__hp_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__hp_info;
        if (input->ExpectTag(24)) goto parse__wave;
        break;
      }

      // required uint32 _wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_wave_)));
          set_has__wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__damage;
        break;
      }

      // required uint32 _damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_damage_)));
          set_has__damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse__progress;
        break;
      }

      // required uint32 _progress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_progress_)));
          set_has__progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse__stage_progress;
        break;
      }

      // required uint32 _stage_progress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stage_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_progress_)));
          set_has__stage_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse__oprations;
        break;
      }

      // repeated uint32 _oprations = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__oprations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable__oprations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__oprations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse__oprations;
        if (input->ExpectTag(64)) goto parse__heroes;
        break;
      }

      // repeated uint32 _heroes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable__heroes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__heroes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse__heroes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.battle_result _result = 1;
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated uint32 _hp_info = 2;
  for (int i = 0; i < this->_hp_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_hp_info(i), output);
  }

  // required uint32 _wave = 3;
  if (has__wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_wave(), output);
  }

  // required uint32 _damage = 4;
  if (has__damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_damage(), output);
  }

  // required uint32 _progress = 5;
  if (has__progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_progress(), output);
  }

  // required uint32 _stage_progress = 6;
  if (has__stage_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->_stage_progress(), output);
  }

  // repeated uint32 _oprations = 7;
  for (int i = 0; i < this->_oprations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->_oprations(i), output);
  }

  // repeated uint32 _heroes = 8;
  for (int i = 0; i < this->_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->_heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.battle_result _result = 1;
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated uint32 _hp_info = 2;
  for (int i = 0; i < this->_hp_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_hp_info(i), target);
  }

  // required uint32 _wave = 3;
  if (has__wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_wave(), target);
  }

  // required uint32 _damage = 4;
  if (has__damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_damage(), target);
  }

  // required uint32 _progress = 5;
  if (has__progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_progress(), target);
  }

  // required uint32 _stage_progress = 6;
  if (has__stage_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->_stage_progress(), target);
  }

  // repeated uint32 _oprations = 7;
  for (int i = 0; i < this->_oprations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->_oprations(i), target);
  }

  // repeated uint32 _heroes = 8;
  for (int i = 0; i < this->_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->_heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.battle_result _result = 1;
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _wave = 3;
    if (has__wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_wave());
    }

    // required uint32 _damage = 4;
    if (has__damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_damage());
    }

    // required uint32 _progress = 5;
    if (has__progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_progress());
    }

    // required uint32 _stage_progress = 6;
    if (has__stage_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_progress());
    }

  }
  // repeated uint32 _hp_info = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_hp_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_hp_info(i));
    }
    total_size += 1 * this->_hp_info_size() + data_size;
  }

  // repeated uint32 _oprations = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->_oprations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_oprations(i));
    }
    total_size += 1 * this->_oprations_size() + data_size;
  }

  // repeated uint32 _heroes = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->_heroes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_heroes(i));
    }
    total_size += 1 * this->_heroes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_end::MergeFrom(const guild_instance_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  _hp_info_.MergeFrom(from._hp_info_);
  _oprations_.MergeFrom(from._oprations_);
  _heroes_.MergeFrom(from._heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__wave()) {
      set__wave(from._wave());
    }
    if (from.has__damage()) {
      set__damage(from._damage());
    }
    if (from.has__progress()) {
      set__progress(from._progress());
    }
    if (from.has__stage_progress()) {
      set__stage_progress(from._stage_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_end::CopyFrom(const guild_instance_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_end::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void guild_instance_end::Swap(guild_instance_end* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _hp_info_.Swap(&other->_hp_info_);
    std::swap(_wave_, other->_wave_);
    std::swap(_damage_, other->_damage_);
    std::swap(_progress_, other->_progress_);
    std::swap(_stage_progress_, other->_stage_progress_);
    _oprations_.Swap(&other->_oprations_);
    _heroes_.Swap(&other->_heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_end_descriptor_;
  metadata.reflection = guild_instance_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_drop::kRaidIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_drop::guild_instance_drop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_drop::InitAsDefaultInstance() {
}

guild_instance_drop::guild_instance_drop(const guild_instance_drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_drop::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_drop::~guild_instance_drop() {
  SharedDtor();
}

void guild_instance_drop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_drop_descriptor_;
}

const guild_instance_drop& guild_instance_drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_drop* guild_instance_drop::default_instance_ = NULL;

guild_instance_drop* guild_instance_drop::New() const {
  return new guild_instance_drop;
}

void guild_instance_drop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_drop::MergeFrom(const guild_instance_drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_drop::CopyFrom(const guild_instance_drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_instance_drop::Swap(guild_instance_drop* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_drop_descriptor_;
  metadata.reflection = guild_instance_drop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_open::kRaidIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_open::guild_instance_open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_open::InitAsDefaultInstance() {
}

guild_instance_open::guild_instance_open(const guild_instance_open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_open::SharedCtor() {
  _cached_size_ = 0;
  _raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_open::~guild_instance_open() {
  SharedDtor();
}

void guild_instance_open::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_open_descriptor_;
}

const guild_instance_open& guild_instance_open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_open* guild_instance_open::default_instance_ = NULL;

guild_instance_open* guild_instance_open::New() const {
  return new guild_instance_open;
}

void guild_instance_open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_raid_id_)));
          set_has__raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _raid_id = 1;
  if (has__raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _raid_id = 1;
    if (has__raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_open::MergeFrom(const guild_instance_open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__raid_id()) {
      set__raid_id(from._raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_open::CopyFrom(const guild_instance_open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_instance_open::Swap(guild_instance_open* other) {
  if (other != this) {
    std::swap(_raid_id_, other->_raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_open_descriptor_;
  metadata.reflection = guild_instance_open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_instance_query::guild_instance_query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_query::InitAsDefaultInstance() {
}

guild_instance_query::guild_instance_query(const guild_instance_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_query::~guild_instance_query() {
  SharedDtor();
}

void guild_instance_query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_query_descriptor_;
}

const guild_instance_query& guild_instance_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_query* guild_instance_query::default_instance_ = NULL;

guild_instance_query* guild_instance_query::New() const {
  return new guild_instance_query;
}

void guild_instance_query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_instance_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_query::MergeFrom(const guild_instance_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_query::CopyFrom(const guild_instance_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_query::IsInitialized() const {

  return true;
}

void guild_instance_query::Swap(guild_instance_query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_query_descriptor_;
  metadata.reflection = guild_instance_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_instance_detail::kStageIdFieldNumber;
#endif  // !_MSC_VER

guild_instance_detail::guild_instance_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_instance_detail::InitAsDefaultInstance() {
}

guild_instance_detail::guild_instance_detail(const guild_instance_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_instance_detail::SharedCtor() {
  _cached_size_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_instance_detail::~guild_instance_detail() {
  SharedDtor();
}

void guild_instance_detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_instance_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_instance_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_instance_detail_descriptor_;
}

const guild_instance_detail& guild_instance_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_instance_detail* guild_instance_detail::default_instance_ = NULL;

guild_instance_detail* guild_instance_detail::New() const {
  return new guild_instance_detail;
}

void guild_instance_detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_instance_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_instance_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_instance_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _stage_id = 1;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_instance_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _stage_id = 1;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_instance_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_instance_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_instance_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_instance_detail::MergeFrom(const guild_instance_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_instance_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_instance_detail::CopyFrom(const guild_instance_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_instance_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_instance_detail::Swap(guild_instance_detail* other) {
  if (other != this) {
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_instance_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_instance_detail_descriptor_;
  metadata.reflection = guild_instance_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_create::kNameFieldNumber;
const int guild_create::kAvatarFieldNumber;
#endif  // !_MSC_VER

guild_create::guild_create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_create::InitAsDefaultInstance() {
}

guild_create::guild_create(const guild_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_create::SharedCtor() {
  _cached_size_ = 0;
  _name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _avatar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_create::~guild_create() {
  SharedDtor();
}

void guild_create::SharedDtor() {
  if (_name_ != &::google::protobuf::internal::kEmptyString) {
    delete _name_;
  }
  if (this != default_instance_) {
  }
}

void guild_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_create_descriptor_;
}

const guild_create& guild_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_create* guild_create::default_instance_ = NULL;

guild_create* guild_create::New() const {
  return new guild_create;
}

void guild_create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__name()) {
      if (_name_ != &::google::protobuf::internal::kEmptyString) {
        _name_->clear();
      }
    }
    _avatar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_name().data(), this->_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__avatar;
        break;
      }

      // required uint32 _avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _name = 1;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_name(), output);
  }

  // required uint32 _avatar = 2;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _name = 1;
  if (has__name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_name().data(), this->_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_name(), target);
  }

  // required uint32 _avatar = 2;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _name = 1;
    if (has__name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_name());
    }

    // required uint32 _avatar = 2;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_create::MergeFrom(const guild_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__name()) {
      set__name(from._name());
    }
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_create::CopyFrom(const guild_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_create::Swap(guild_create* other) {
  if (other != this) {
    std::swap(_name_, other->_name_);
    std::swap(_avatar_, other->_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_create_descriptor_;
  metadata.reflection = guild_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_dismiss::guild_dismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_dismiss::InitAsDefaultInstance() {
}

guild_dismiss::guild_dismiss(const guild_dismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_dismiss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_dismiss::~guild_dismiss() {
  SharedDtor();
}

void guild_dismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_dismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_dismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_dismiss_descriptor_;
}

const guild_dismiss& guild_dismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_dismiss* guild_dismiss::default_instance_ = NULL;

guild_dismiss* guild_dismiss::New() const {
  return new guild_dismiss;
}

void guild_dismiss::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_dismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_dismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_dismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_dismiss::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_dismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_dismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_dismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_dismiss::MergeFrom(const guild_dismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_dismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_dismiss::CopyFrom(const guild_dismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_dismiss::IsInitialized() const {

  return true;
}

void guild_dismiss::Swap(guild_dismiss* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_dismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_dismiss_descriptor_;
  metadata.reflection = guild_dismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_list::guild_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_list::InitAsDefaultInstance() {
}

guild_list::guild_list(const guild_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_list::~guild_list() {
  SharedDtor();
}

void guild_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_list_descriptor_;
}

const guild_list& guild_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_list* guild_list::default_instance_ = NULL;

guild_list* guild_list::New() const {
  return new guild_list;
}

void guild_list::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_list::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_list::MergeFrom(const guild_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_list::CopyFrom(const guild_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_list::IsInitialized() const {

  return true;
}

void guild_list::Swap(guild_list* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_list_descriptor_;
  metadata.reflection = guild_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_search::kGuildIdFieldNumber;
#endif  // !_MSC_VER

guild_search::guild_search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_search::InitAsDefaultInstance() {
}

guild_search::guild_search(const guild_search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_search::SharedCtor() {
  _cached_size_ = 0;
  _guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_search::~guild_search() {
  SharedDtor();
}

void guild_search::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_search_descriptor_;
}

const guild_search& guild_search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_search* guild_search::default_instance_ = NULL;

guild_search* guild_search::New() const {
  return new guild_search;
}

void guild_search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guild_id_)));
          set_has__guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _guild_id = 1;
  if (has__guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _guild_id = 1;
  if (has__guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _guild_id = 1;
    if (has__guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_search::MergeFrom(const guild_search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__guild_id()) {
      set__guild_id(from._guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_search::CopyFrom(const guild_search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_search::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_search::Swap(guild_search* other) {
  if (other != this) {
    std::swap(_guild_id_, other->_guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_search_descriptor_;
  metadata.reflection = guild_search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_join::kGuildIdFieldNumber;
#endif  // !_MSC_VER

guild_join::guild_join()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_join::InitAsDefaultInstance() {
}

guild_join::guild_join(const guild_join& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_join::SharedCtor() {
  _cached_size_ = 0;
  _guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_join::~guild_join() {
  SharedDtor();
}

void guild_join::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_join::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_join::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_descriptor_;
}

const guild_join& guild_join::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_join* guild_join::default_instance_ = NULL;

guild_join* guild_join::New() const {
  return new guild_join;
}

void guild_join::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guild_id_)));
          set_has__guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _guild_id = 1;
  if (has__guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_join::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _guild_id = 1;
  if (has__guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_join::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _guild_id = 1;
    if (has__guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_join::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_join* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_join*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_join::MergeFrom(const guild_join& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__guild_id()) {
      set__guild_id(from._guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_join::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_join::CopyFrom(const guild_join& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_join::Swap(guild_join* other) {
  if (other != this) {
    std::swap(_guild_id_, other->_guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_join::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_join_descriptor_;
  metadata.reflection = guild_join_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_join_confirm_confirm_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_confirm_confirm_type_descriptor_;
}
bool guild_join_confirm_confirm_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_join_confirm_confirm_type guild_join_confirm::accept;
const guild_join_confirm_confirm_type guild_join_confirm::reject;
const guild_join_confirm_confirm_type guild_join_confirm::confirm_type_MIN;
const guild_join_confirm_confirm_type guild_join_confirm::confirm_type_MAX;
const int guild_join_confirm::confirm_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_join_confirm::kUidFieldNumber;
const int guild_join_confirm::kTypeFieldNumber;
#endif  // !_MSC_VER

guild_join_confirm::guild_join_confirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_join_confirm::InitAsDefaultInstance() {
}

guild_join_confirm::guild_join_confirm(const guild_join_confirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_join_confirm::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_join_confirm::~guild_join_confirm() {
  SharedDtor();
}

void guild_join_confirm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_join_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_join_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_join_confirm_descriptor_;
}

const guild_join_confirm& guild_join_confirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_join_confirm* guild_join_confirm::default_instance_ = NULL;

guild_join_confirm* guild_join_confirm::New() const {
  return new guild_join_confirm;
}

void guild_join_confirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
    _type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_join_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__type;
        break;
      }

      // required .up.guild_join_confirm.confirm_type _type = 2 [default = accept];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::guild_join_confirm_confirm_type_IsValid(value)) {
            set__type(static_cast< ::up::guild_join_confirm_confirm_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_join_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required .up.guild_join_confirm.confirm_type _type = 2 [default = accept];
  if (has__type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_join_confirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required .up.guild_join_confirm.confirm_type _type = 2 [default = accept];
  if (has__type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_join_confirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required .up.guild_join_confirm.confirm_type _type = 2 [default = accept];
    if (has__type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_join_confirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_join_confirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_join_confirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_join_confirm::MergeFrom(const guild_join_confirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__type()) {
      set__type(from._type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_join_confirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_join_confirm::CopyFrom(const guild_join_confirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_join_confirm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_join_confirm::Swap(guild_join_confirm* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_type_, other->_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_join_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_join_confirm_descriptor_;
  metadata.reflection = guild_join_confirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_leave::guild_leave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_leave::InitAsDefaultInstance() {
}

guild_leave::guild_leave(const guild_leave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_leave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_leave::~guild_leave() {
  SharedDtor();
}

void guild_leave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_leave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_leave_descriptor_;
}

const guild_leave& guild_leave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_leave* guild_leave::default_instance_ = NULL;

guild_leave* guild_leave::New() const {
  return new guild_leave;
}

void guild_leave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_leave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_leave::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_leave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_leave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_leave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_leave::MergeFrom(const guild_leave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_leave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_leave::CopyFrom(const guild_leave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_leave::IsInitialized() const {

  return true;
}

void guild_leave::Swap(guild_leave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_leave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_leave_descriptor_;
  metadata.reflection = guild_leave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_kick::kUidFieldNumber;
#endif  // !_MSC_VER

guild_kick::guild_kick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_kick::InitAsDefaultInstance() {
}

guild_kick::guild_kick(const guild_kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_kick::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_kick::~guild_kick() {
  SharedDtor();
}

void guild_kick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_kick_descriptor_;
}

const guild_kick& guild_kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_kick* guild_kick::default_instance_ = NULL;

guild_kick* guild_kick::New() const {
  return new guild_kick;
}

void guild_kick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_kick::MergeFrom(const guild_kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_kick::CopyFrom(const guild_kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_kick::Swap(guild_kick* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_kick_descriptor_;
  metadata.reflection = guild_kick_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* guild_set_guild_join_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_guild_join_t_descriptor_;
}
bool guild_set_guild_join_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const guild_set_guild_join_t guild_set::no_verify;
const guild_set_guild_join_t guild_set::verify;
const guild_set_guild_join_t guild_set::closed;
const guild_set_guild_join_t guild_set::guild_join_t_MIN;
const guild_set_guild_join_t guild_set::guild_join_t_MAX;
const int guild_set::guild_join_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int guild_set::kAvatarFieldNumber;
const int guild_set::kJoinTypeFieldNumber;
const int guild_set::kJoinLimitFieldNumber;
const int guild_set::kSloganFieldNumber;
const int guild_set::kCanJumpFieldNumber;
#endif  // !_MSC_VER

guild_set::guild_set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_set::InitAsDefaultInstance() {
}

guild_set::guild_set(const guild_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_set::SharedCtor() {
  _cached_size_ = 0;
  _avatar_ = 0u;
  _join_type_ = 1;
  _join_limit_ = 0u;
  _slogan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _can_jump_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set::~guild_set() {
  SharedDtor();
}

void guild_set::SharedDtor() {
  if (_slogan_ != &::google::protobuf::internal::kEmptyString) {
    delete _slogan_;
  }
  if (this != default_instance_) {
  }
}

void guild_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_descriptor_;
}

const guild_set& guild_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_set* guild_set::default_instance_ = NULL;

guild_set* guild_set::New() const {
  return new guild_set;
}

void guild_set::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _avatar_ = 0u;
    _join_type_ = 1;
    _join_limit_ = 0u;
    if (has__slogan()) {
      if (_slogan_ != &::google::protobuf::internal::kEmptyString) {
        _slogan_->clear();
      }
    }
    _can_jump_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 _avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_avatar_)));
          set_has__avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__join_type;
        break;
      }

      // optional .up.guild_set.guild_join_t _join_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__join_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::guild_set_guild_join_t_IsValid(value)) {
            set__join_type(static_cast< ::up::guild_set_guild_join_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__join_limit;
        break;
      }

      // optional uint32 _join_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__join_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_join_limit_)));
          set_has__join_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__slogan;
        break;
      }

      // optional string _slogan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__slogan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__slogan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_slogan().data(), this->_slogan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse__can_jump;
        break;
      }

      // optional uint32 _can_jump = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__can_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_can_jump_)));
          set_has__can_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 _avatar = 1;
  if (has__avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_avatar(), output);
  }

  // optional .up.guild_set.guild_join_t _join_type = 2;
  if (has__join_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_join_type(), output);
  }

  // optional uint32 _join_limit = 3;
  if (has__join_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_join_limit(), output);
  }

  // optional string _slogan = 4;
  if (has__slogan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_slogan().data(), this->_slogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->_slogan(), output);
  }

  // optional uint32 _can_jump = 5;
  if (has__can_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_can_jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 _avatar = 1;
  if (has__avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_avatar(), target);
  }

  // optional .up.guild_set.guild_join_t _join_type = 2;
  if (has__join_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_join_type(), target);
  }

  // optional uint32 _join_limit = 3;
  if (has__join_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_join_limit(), target);
  }

  // optional string _slogan = 4;
  if (has__slogan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_slogan().data(), this->_slogan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_slogan(), target);
  }

  // optional uint32 _can_jump = 5;
  if (has__can_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_can_jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 _avatar = 1;
    if (has__avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_avatar());
    }

    // optional .up.guild_set.guild_join_t _join_type = 2;
    if (has__join_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_join_type());
    }

    // optional uint32 _join_limit = 3;
    if (has__join_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_join_limit());
    }

    // optional string _slogan = 4;
    if (has__slogan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_slogan());
    }

    // optional uint32 _can_jump = 5;
    if (has__can_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_can_jump());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set::MergeFrom(const guild_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__avatar()) {
      set__avatar(from._avatar());
    }
    if (from.has__join_type()) {
      set__join_type(from._join_type());
    }
    if (from.has__join_limit()) {
      set__join_limit(from._join_limit());
    }
    if (from.has__slogan()) {
      set__slogan(from._slogan());
    }
    if (from.has__can_jump()) {
      set__can_jump(from._can_jump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set::CopyFrom(const guild_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set::IsInitialized() const {

  return true;
}

void guild_set::Swap(guild_set* other) {
  if (other != this) {
    std::swap(_avatar_, other->_avatar_);
    std::swap(_join_type_, other->_join_type_);
    std::swap(_join_limit_, other->_join_limit_);
    std::swap(_slogan_, other->_slogan_);
    std::swap(_can_jump_, other->_can_jump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_descriptor_;
  metadata.reflection = guild_set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_query::guild_query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_query::InitAsDefaultInstance() {
}

guild_query::guild_query(const guild_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_query::~guild_query() {
  SharedDtor();
}

void guild_query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_query_descriptor_;
}

const guild_query& guild_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_query* guild_query::default_instance_ = NULL;

guild_query* guild_query::New() const {
  return new guild_query;
}

void guild_query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_query::MergeFrom(const guild_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_query::CopyFrom(const guild_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_query::IsInitialized() const {

  return true;
}

void guild_query::Swap(guild_query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_query_descriptor_;
  metadata.reflection = guild_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_open_pannel::guild_open_pannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_open_pannel::InitAsDefaultInstance() {
}

guild_open_pannel::guild_open_pannel(const guild_open_pannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_open_pannel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_open_pannel::~guild_open_pannel() {
  SharedDtor();
}

void guild_open_pannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_open_pannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_open_pannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_open_pannel_descriptor_;
}

const guild_open_pannel& guild_open_pannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_open_pannel* guild_open_pannel::default_instance_ = NULL;

guild_open_pannel* guild_open_pannel::New() const {
  return new guild_open_pannel;
}

void guild_open_pannel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_open_pannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_open_pannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_open_pannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_open_pannel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_open_pannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_open_pannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_open_pannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_open_pannel::MergeFrom(const guild_open_pannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_open_pannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_open_pannel::CopyFrom(const guild_open_pannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_open_pannel::IsInitialized() const {

  return true;
}

void guild_open_pannel::Swap(guild_open_pannel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_open_pannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_open_pannel_descriptor_;
  metadata.reflection = guild_open_pannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_set_job::kUidFieldNumber;
const int guild_set_job::kJobFieldNumber;
#endif  // !_MSC_VER

guild_set_job::guild_set_job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_set_job::InitAsDefaultInstance() {
}

guild_set_job::guild_set_job(const guild_set_job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_set_job::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _job_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_set_job::~guild_set_job() {
  SharedDtor();
}

void guild_set_job::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_set_job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_set_job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_set_job_descriptor_;
}

const guild_set_job& guild_set_job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_set_job* guild_set_job::default_instance_ = NULL;

guild_set_job* guild_set_job::New() const {
  return new guild_set_job;
}

void guild_set_job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
    _job_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_set_job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__job;
        break;
      }

      // required .up.guild_job_t _job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::guild_job_t_IsValid(value)) {
            set__job(static_cast< ::up::guild_job_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_set_job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required .up.guild_job_t _job = 2;
  if (has__job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_set_job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required .up.guild_job_t _job = 2;
  if (has__job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_set_job::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required .up.guild_job_t _job = 2;
    if (has__job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_set_job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_set_job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_set_job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_set_job::MergeFrom(const guild_set_job& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__job()) {
      set__job(from._job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_set_job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_set_job::CopyFrom(const guild_set_job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_set_job::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_set_job::Swap(guild_set_job* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_job_, other->_job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_set_job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_set_job_descriptor_;
  metadata.reflection = guild_set_job_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_add_hire::kHeroidFieldNumber;
#endif  // !_MSC_VER

guild_add_hire::guild_add_hire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_add_hire::InitAsDefaultInstance() {
}

guild_add_hire::guild_add_hire(const guild_add_hire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_add_hire::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_add_hire::~guild_add_hire() {
  SharedDtor();
}

void guild_add_hire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_add_hire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_add_hire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_add_hire_descriptor_;
}

const guild_add_hire& guild_add_hire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_add_hire* guild_add_hire::default_instance_ = NULL;

guild_add_hire* guild_add_hire::New() const {
  return new guild_add_hire;
}

void guild_add_hire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_add_hire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_add_hire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_add_hire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_add_hire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 1;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_add_hire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_add_hire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_add_hire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_add_hire::MergeFrom(const guild_add_hire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_add_hire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_add_hire::CopyFrom(const guild_add_hire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_add_hire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_add_hire::Swap(guild_add_hire* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_add_hire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_add_hire_descriptor_;
  metadata.reflection = guild_add_hire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_del_hire::kHeroidFieldNumber;
#endif  // !_MSC_VER

guild_del_hire::guild_del_hire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_del_hire::InitAsDefaultInstance() {
}

guild_del_hire::guild_del_hire(const guild_del_hire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_del_hire::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_del_hire::~guild_del_hire() {
  SharedDtor();
}

void guild_del_hire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_del_hire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_del_hire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_del_hire_descriptor_;
}

const guild_del_hire& guild_del_hire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_del_hire* guild_del_hire::default_instance_ = NULL;

guild_del_hire* guild_del_hire::New() const {
  return new guild_del_hire;
}

void guild_del_hire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_del_hire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_del_hire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 2;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_del_hire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 2;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_del_hire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 2;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_del_hire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_del_hire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_del_hire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_del_hire::MergeFrom(const guild_del_hire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_del_hire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_del_hire::CopyFrom(const guild_del_hire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_del_hire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_del_hire::Swap(guild_del_hire* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_del_hire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_del_hire_descriptor_;
  metadata.reflection = guild_del_hire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_query_hires::kFromFieldNumber;
#endif  // !_MSC_VER

guild_query_hires::guild_query_hires()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_query_hires::InitAsDefaultInstance() {
}

guild_query_hires::guild_query_hires(const guild_query_hires& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_query_hires::SharedCtor() {
  _cached_size_ = 0;
  _from_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_query_hires::~guild_query_hires() {
  SharedDtor();
}

void guild_query_hires::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_query_hires::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_query_hires::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_query_hires_descriptor_;
}

const guild_query_hires& guild_query_hires::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_query_hires* guild_query_hires::default_instance_ = NULL;

guild_query_hires* guild_query_hires::New() const {
  return new guild_query_hires;
}

void guild_query_hires::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _from_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_query_hires::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.hire_from _from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::hire_from_IsValid(value)) {
            set__from(static_cast< ::up::hire_from >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_query_hires::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.hire_from _from = 1;
  if (has__from()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_query_hires::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.hire_from _from = 1;
  if (has__from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_query_hires::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.hire_from _from = 1;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_query_hires::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_query_hires* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_query_hires*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_query_hires::MergeFrom(const guild_query_hires& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__from()) {
      set__from(from._from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_query_hires::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_query_hires::CopyFrom(const guild_query_hires& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_query_hires::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void guild_query_hires::Swap(guild_query_hires* other) {
  if (other != this) {
    std::swap(_from_, other->_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_query_hires::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_query_hires_descriptor_;
  metadata.reflection = guild_query_hires_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_hire_hero::kUidFieldNumber;
const int guild_hire_hero::kHeroidFieldNumber;
const int guild_hire_hero::kFromFieldNumber;
const int guild_hire_hero::kStageIdFieldNumber;
#endif  // !_MSC_VER

guild_hire_hero::guild_hire_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_hire_hero::InitAsDefaultInstance() {
}

guild_hire_hero::guild_hire_hero(const guild_hire_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_hire_hero::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _heroid_ = 0u;
  _from_ = 0;
  _stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_hire_hero::~guild_hire_hero() {
  SharedDtor();
}

void guild_hire_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_hire_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_hire_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_hire_hero_descriptor_;
}

const guild_hire_hero& guild_hire_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_hire_hero* guild_hire_hero::default_instance_ = NULL;

guild_hire_hero* guild_hire_hero::New() const {
  return new guild_hire_hero;
}

void guild_hire_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
    _heroid_ = 0u;
    _from_ = 0;
    _stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_hire_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__heroid;
        break;
      }

      // required uint32 _heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__from;
        break;
      }

      // required .up.hire_from _from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__from:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::hire_from_IsValid(value)) {
            set__from(static_cast< ::up::hire_from >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__stage_id;
        break;
      }

      // optional uint32 _stage_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stage_id_)));
          set_has__stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_hire_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_heroid(), output);
  }

  // required .up.hire_from _from = 3;
  if (has__from()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_from(), output);
  }

  // optional uint32 _stage_id = 4;
  if (has__stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_hire_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_heroid(), target);
  }

  // required .up.hire_from _from = 3;
  if (has__from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_from(), target);
  }

  // optional uint32 _stage_id = 4;
  if (has__stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_hire_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required uint32 _heroid = 2;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

    // required .up.hire_from _from = 3;
    if (has__from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_from());
    }

    // optional uint32 _stage_id = 4;
    if (has__stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_hire_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_hire_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_hire_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_hire_hero::MergeFrom(const guild_hire_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
    if (from.has__from()) {
      set__from(from._from());
    }
    if (from.has__stage_id()) {
      set__stage_id(from._stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_hire_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_hire_hero::CopyFrom(const guild_hire_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_hire_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void guild_hire_hero::Swap(guild_hire_hero* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_heroid_, other->_heroid_);
    std::swap(_from_, other->_from_);
    std::swap(_stage_id_, other->_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_hire_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_hire_hero_descriptor_;
  metadata.reflection = guild_hire_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_worship_req::kIdFieldNumber;
const int guild_worship_req::kUidFieldNumber;
#endif  // !_MSC_VER

guild_worship_req::guild_worship_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_worship_req::InitAsDefaultInstance() {
}

guild_worship_req::guild_worship_req(const guild_worship_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_worship_req::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_worship_req::~guild_worship_req() {
  SharedDtor();
}

void guild_worship_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_worship_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_worship_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_worship_req_descriptor_;
}

const guild_worship_req& guild_worship_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_worship_req* guild_worship_req::default_instance_ = NULL;

guild_worship_req* guild_worship_req::New() const {
  return new guild_worship_req;
}

void guild_worship_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _id_ = 0u;
    _uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_worship_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__uid;
        break;
      }

      // required uint32 _uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_worship_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required uint32 _uid = 2;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_worship_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required uint32 _uid = 2;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_worship_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required uint32 _uid = 2;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_worship_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_worship_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_worship_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_worship_req::MergeFrom(const guild_worship_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__uid()) {
      set__uid(from._uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_worship_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_worship_req::CopyFrom(const guild_worship_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_worship_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_worship_req::Swap(guild_worship_req* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_uid_, other->_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_worship_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_worship_req_descriptor_;
  metadata.reflection = guild_worship_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guild_worship_withdraw::guild_worship_withdraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_worship_withdraw::InitAsDefaultInstance() {
}

guild_worship_withdraw::guild_worship_withdraw(const guild_worship_withdraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_worship_withdraw::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_worship_withdraw::~guild_worship_withdraw() {
  SharedDtor();
}

void guild_worship_withdraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_worship_withdraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_worship_withdraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_worship_withdraw_descriptor_;
}

const guild_worship_withdraw& guild_worship_withdraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_worship_withdraw* guild_worship_withdraw::default_instance_ = NULL;

guild_worship_withdraw* guild_worship_withdraw::New() const {
  return new guild_worship_withdraw;
}

void guild_worship_withdraw::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_worship_withdraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guild_worship_withdraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_worship_withdraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_worship_withdraw::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_worship_withdraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_worship_withdraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_worship_withdraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_worship_withdraw::MergeFrom(const guild_worship_withdraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_worship_withdraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_worship_withdraw::CopyFrom(const guild_worship_withdraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_worship_withdraw::IsInitialized() const {

  return true;
}

void guild_worship_withdraw::Swap(guild_worship_withdraw* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_worship_withdraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_worship_withdraw_descriptor_;
  metadata.reflection = guild_worship_withdraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_qurey_hh_detail::kUidFieldNumber;
const int guild_qurey_hh_detail::kHeroidFieldNumber;
#endif  // !_MSC_VER

guild_qurey_hh_detail::guild_qurey_hh_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_qurey_hh_detail::InitAsDefaultInstance() {
}

guild_qurey_hh_detail::guild_qurey_hh_detail(const guild_qurey_hh_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_qurey_hh_detail::SharedCtor() {
  _cached_size_ = 0;
  _uid_ = 0u;
  _heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_qurey_hh_detail::~guild_qurey_hh_detail() {
  SharedDtor();
}

void guild_qurey_hh_detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guild_qurey_hh_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_qurey_hh_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_qurey_hh_detail_descriptor_;
}

const guild_qurey_hh_detail& guild_qurey_hh_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

guild_qurey_hh_detail* guild_qurey_hh_detail::default_instance_ = NULL;

guild_qurey_hh_detail* guild_qurey_hh_detail::New() const {
  return new guild_qurey_hh_detail;
}

void guild_qurey_hh_detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _uid_ = 0u;
    _heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_qurey_hh_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_uid_)));
          set_has__uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__heroid;
        break;
      }

      // required uint32 _heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_qurey_hh_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_uid(), output);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_qurey_hh_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _uid = 1;
  if (has__uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_uid(), target);
  }

  // required uint32 _heroid = 2;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_qurey_hh_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _uid = 1;
    if (has__uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_uid());
    }

    // required uint32 _heroid = 2;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_qurey_hh_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_qurey_hh_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_qurey_hh_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_qurey_hh_detail::MergeFrom(const guild_qurey_hh_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__uid()) {
      set__uid(from._uid());
    }
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_qurey_hh_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_qurey_hh_detail::CopyFrom(const guild_qurey_hh_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_qurey_hh_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void guild_qurey_hh_detail::Swap(guild_qurey_hh_detail* other) {
  if (other != this) {
    std::swap(_uid_, other->_uid_);
    std::swap(_heroid_, other->_heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_qurey_hh_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_qurey_hh_detail_descriptor_;
  metadata.reflection = guild_qurey_hh_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ask_activity_info::ask_activity_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ask_activity_info::InitAsDefaultInstance() {
}

ask_activity_info::ask_activity_info(const ask_activity_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ask_activity_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ask_activity_info::~ask_activity_info() {
  SharedDtor();
}

void ask_activity_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ask_activity_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ask_activity_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_activity_info_descriptor_;
}

const ask_activity_info& ask_activity_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

ask_activity_info* ask_activity_info::default_instance_ = NULL;

ask_activity_info* ask_activity_info::New() const {
  return new ask_activity_info;
}

void ask_activity_info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ask_activity_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ask_activity_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ask_activity_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ask_activity_info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ask_activity_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ask_activity_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ask_activity_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ask_activity_info::MergeFrom(const ask_activity_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ask_activity_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ask_activity_info::CopyFrom(const ask_activity_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ask_activity_info::IsInitialized() const {

  return true;
}

void ask_activity_info::Swap(ask_activity_info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ask_activity_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ask_activity_info_descriptor_;
  metadata.reflection = ask_activity_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cdkey_gift::kCdkeyFieldNumber;
#endif  // !_MSC_VER

cdkey_gift::cdkey_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cdkey_gift::InitAsDefaultInstance() {
}

cdkey_gift::cdkey_gift(const cdkey_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cdkey_gift::SharedCtor() {
  _cached_size_ = 0;
  _cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cdkey_gift::~cdkey_gift() {
  SharedDtor();
}

void cdkey_gift::SharedDtor() {
  if (_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete _cdkey_;
  }
  if (this != default_instance_) {
  }
}

void cdkey_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cdkey_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cdkey_gift_descriptor_;
}

const cdkey_gift& cdkey_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

cdkey_gift* cdkey_gift::default_instance_ = NULL;

cdkey_gift* cdkey_gift::New() const {
  return new cdkey_gift;
}

void cdkey_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__cdkey()) {
      if (_cdkey_ != &::google::protobuf::internal::kEmptyString) {
        _cdkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cdkey_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _cdkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_cdkey().data(), this->_cdkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cdkey_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _cdkey = 1;
  if (has__cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_cdkey().data(), this->_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_cdkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cdkey_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _cdkey = 1;
  if (has__cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_cdkey().data(), this->_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_cdkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cdkey_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _cdkey = 1;
    if (has__cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_cdkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cdkey_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cdkey_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cdkey_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cdkey_gift::MergeFrom(const cdkey_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__cdkey()) {
      set__cdkey(from._cdkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cdkey_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cdkey_gift::CopyFrom(const cdkey_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cdkey_gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cdkey_gift::Swap(cdkey_gift* other) {
  if (other != this) {
    std::swap(_cdkey_, other->_cdkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cdkey_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cdkey_gift_descriptor_;
  metadata.reflection = cdkey_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate::kSearchExcavateFieldNumber;
const int excavate::kQueryExcavateDataFieldNumber;
const int excavate::kQueryExcavateHistoryFieldNumber;
const int excavate::kQueryExcavateBattleFieldNumber;
const int excavate::kSetExcavateTeamFieldNumber;
const int excavate::kExcavateStartBattleFieldNumber;
const int excavate::kExcavateEndBattleFieldNumber;
const int excavate::kQueryExcavateDefFieldNumber;
const int excavate::kClearExcavateBattleFieldNumber;
const int excavate::kWithdrawExcavateHeroFieldNumber;
const int excavate::kDrawExcavateDefRwdFieldNumber;
const int excavate::kDropExcavateFieldNumber;
const int excavate::kQueryReplayFieldNumber;
#endif  // !_MSC_VER

excavate::excavate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void excavate::InitAsDefaultInstance() {
  _search_excavate_ = const_cast< ::up::search_excavate*>(&::up::search_excavate::default_instance());
  _query_excavate_data_ = const_cast< ::up::query_excavate_data*>(&::up::query_excavate_data::default_instance());
  _query_excavate_history_ = const_cast< ::up::query_excavate_history*>(&::up::query_excavate_history::default_instance());
  _query_excavate_battle_ = const_cast< ::up::query_excavate_battle*>(&::up::query_excavate_battle::default_instance());
  _set_excavate_team_ = const_cast< ::up::set_excavate_team*>(&::up::set_excavate_team::default_instance());
  _excavate_start_battle_ = const_cast< ::up::excavate_start_battle*>(&::up::excavate_start_battle::default_instance());
  _excavate_end_battle_ = const_cast< ::up::excavate_end_battle*>(&::up::excavate_end_battle::default_instance());
  _query_excavate_def_ = const_cast< ::up::query_excavate_def*>(&::up::query_excavate_def::default_instance());
  _clear_excavate_battle_ = const_cast< ::up::clear_excavate_battle*>(&::up::clear_excavate_battle::default_instance());
  _withdraw_excavate_hero_ = const_cast< ::up::withdraw_excavate_hero*>(&::up::withdraw_excavate_hero::default_instance());
  _draw_excavate_def_rwd_ = const_cast< ::up::draw_excavate_def_rwd*>(&::up::draw_excavate_def_rwd::default_instance());
  _drop_excavate_ = const_cast< ::up::drop_excavate*>(&::up::drop_excavate::default_instance());
  _query_replay_ = const_cast< ::up::query_replay*>(&::up::query_replay::default_instance());
}

excavate::excavate(const excavate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void excavate::SharedCtor() {
  _cached_size_ = 0;
  _search_excavate_ = NULL;
  _query_excavate_data_ = NULL;
  _query_excavate_history_ = NULL;
  _query_excavate_battle_ = NULL;
  _set_excavate_team_ = NULL;
  _excavate_start_battle_ = NULL;
  _excavate_end_battle_ = NULL;
  _query_excavate_def_ = NULL;
  _clear_excavate_battle_ = NULL;
  _withdraw_excavate_hero_ = NULL;
  _draw_excavate_def_rwd_ = NULL;
  _drop_excavate_ = NULL;
  _query_replay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate::~excavate() {
  SharedDtor();
}

void excavate::SharedDtor() {
  if (this != default_instance_) {
    delete _search_excavate_;
    delete _query_excavate_data_;
    delete _query_excavate_history_;
    delete _query_excavate_battle_;
    delete _set_excavate_team_;
    delete _excavate_start_battle_;
    delete _excavate_end_battle_;
    delete _query_excavate_def_;
    delete _clear_excavate_battle_;
    delete _withdraw_excavate_hero_;
    delete _draw_excavate_def_rwd_;
    delete _drop_excavate_;
    delete _query_replay_;
  }
}

void excavate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_descriptor_;
}

const excavate& excavate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

excavate* excavate::default_instance_ = NULL;

excavate* excavate::New() const {
  return new excavate;
}

void excavate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__search_excavate()) {
      if (_search_excavate_ != NULL) _search_excavate_->::up::search_excavate::Clear();
    }
    if (has__query_excavate_data()) {
      if (_query_excavate_data_ != NULL) _query_excavate_data_->::up::query_excavate_data::Clear();
    }
    if (has__query_excavate_history()) {
      if (_query_excavate_history_ != NULL) _query_excavate_history_->::up::query_excavate_history::Clear();
    }
    if (has__query_excavate_battle()) {
      if (_query_excavate_battle_ != NULL) _query_excavate_battle_->::up::query_excavate_battle::Clear();
    }
    if (has__set_excavate_team()) {
      if (_set_excavate_team_ != NULL) _set_excavate_team_->::up::set_excavate_team::Clear();
    }
    if (has__excavate_start_battle()) {
      if (_excavate_start_battle_ != NULL) _excavate_start_battle_->::up::excavate_start_battle::Clear();
    }
    if (has__excavate_end_battle()) {
      if (_excavate_end_battle_ != NULL) _excavate_end_battle_->::up::excavate_end_battle::Clear();
    }
    if (has__query_excavate_def()) {
      if (_query_excavate_def_ != NULL) _query_excavate_def_->::up::query_excavate_def::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has__clear_excavate_battle()) {
      if (_clear_excavate_battle_ != NULL) _clear_excavate_battle_->::up::clear_excavate_battle::Clear();
    }
    if (has__withdraw_excavate_hero()) {
      if (_withdraw_excavate_hero_ != NULL) _withdraw_excavate_hero_->::up::withdraw_excavate_hero::Clear();
    }
    if (has__draw_excavate_def_rwd()) {
      if (_draw_excavate_def_rwd_ != NULL) _draw_excavate_def_rwd_->::up::draw_excavate_def_rwd::Clear();
    }
    if (has__drop_excavate()) {
      if (_drop_excavate_ != NULL) _drop_excavate_->::up::drop_excavate::Clear();
    }
    if (has__query_replay()) {
      if (_query_replay_ != NULL) _query_replay_->::up::query_replay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.search_excavate _search_excavate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__search_excavate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__query_excavate_data;
        break;
      }

      // optional .up.query_excavate_data _query_excavate_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_excavate_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__query_excavate_history;
        break;
      }

      // optional .up.query_excavate_history _query_excavate_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_excavate_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__query_excavate_battle;
        break;
      }

      // optional .up.query_excavate_battle _query_excavate_battle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_excavate_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__set_excavate_team;
        break;
      }

      // optional .up.set_excavate_team _set_excavate_team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__set_excavate_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__set_excavate_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__excavate_start_battle;
        break;
      }

      // optional .up.excavate_start_battle _excavate_start_battle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__excavate_start_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate_start_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__excavate_end_battle;
        break;
      }

      // optional .up.excavate_end_battle _excavate_end_battle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__excavate_end_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__excavate_end_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse__query_excavate_def;
        break;
      }

      // optional .up.query_excavate_def _query_excavate_def = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_excavate_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_excavate_def()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse__clear_excavate_battle;
        break;
      }

      // optional .up.clear_excavate_battle _clear_excavate_battle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__clear_excavate_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__clear_excavate_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse__withdraw_excavate_hero;
        break;
      }

      // optional .up.withdraw_excavate_hero _withdraw_excavate_hero = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__withdraw_excavate_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__withdraw_excavate_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse__draw_excavate_def_rwd;
        break;
      }

      // optional .up.draw_excavate_def_rwd _draw_excavate_def_rwd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__draw_excavate_def_rwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__draw_excavate_def_rwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse__drop_excavate;
        break;
      }

      // optional .up.drop_excavate _drop_excavate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__drop_excavate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__drop_excavate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse__query_replay;
        break;
      }

      // optional .up.query_replay _query_replay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__query_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__query_replay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void excavate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.search_excavate _search_excavate = 1;
  if (has__search_excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_search_excavate(), output);
  }

  // optional .up.query_excavate_data _query_excavate_data = 2;
  if (has__query_excavate_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_query_excavate_data(), output);
  }

  // optional .up.query_excavate_history _query_excavate_history = 3;
  if (has__query_excavate_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_query_excavate_history(), output);
  }

  // optional .up.query_excavate_battle _query_excavate_battle = 4;
  if (has__query_excavate_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_query_excavate_battle(), output);
  }

  // optional .up.set_excavate_team _set_excavate_team = 5;
  if (has__set_excavate_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_set_excavate_team(), output);
  }

  // optional .up.excavate_start_battle _excavate_start_battle = 6;
  if (has__excavate_start_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_excavate_start_battle(), output);
  }

  // optional .up.excavate_end_battle _excavate_end_battle = 7;
  if (has__excavate_end_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_excavate_end_battle(), output);
  }

  // optional .up.query_excavate_def _query_excavate_def = 8;
  if (has__query_excavate_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_query_excavate_def(), output);
  }

  // optional .up.clear_excavate_battle _clear_excavate_battle = 9;
  if (has__clear_excavate_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_clear_excavate_battle(), output);
  }

  // optional .up.withdraw_excavate_hero _withdraw_excavate_hero = 10;
  if (has__withdraw_excavate_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_withdraw_excavate_hero(), output);
  }

  // optional .up.draw_excavate_def_rwd _draw_excavate_def_rwd = 11;
  if (has__draw_excavate_def_rwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_draw_excavate_def_rwd(), output);
  }

  // optional .up.drop_excavate _drop_excavate = 12;
  if (has__drop_excavate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_drop_excavate(), output);
  }

  // optional .up.query_replay _query_replay = 13;
  if (has__query_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_query_replay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* excavate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.search_excavate _search_excavate = 1;
  if (has__search_excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_search_excavate(), target);
  }

  // optional .up.query_excavate_data _query_excavate_data = 2;
  if (has__query_excavate_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_query_excavate_data(), target);
  }

  // optional .up.query_excavate_history _query_excavate_history = 3;
  if (has__query_excavate_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_query_excavate_history(), target);
  }

  // optional .up.query_excavate_battle _query_excavate_battle = 4;
  if (has__query_excavate_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_query_excavate_battle(), target);
  }

  // optional .up.set_excavate_team _set_excavate_team = 5;
  if (has__set_excavate_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_set_excavate_team(), target);
  }

  // optional .up.excavate_start_battle _excavate_start_battle = 6;
  if (has__excavate_start_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_excavate_start_battle(), target);
  }

  // optional .up.excavate_end_battle _excavate_end_battle = 7;
  if (has__excavate_end_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_excavate_end_battle(), target);
  }

  // optional .up.query_excavate_def _query_excavate_def = 8;
  if (has__query_excavate_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_query_excavate_def(), target);
  }

  // optional .up.clear_excavate_battle _clear_excavate_battle = 9;
  if (has__clear_excavate_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->_clear_excavate_battle(), target);
  }

  // optional .up.withdraw_excavate_hero _withdraw_excavate_hero = 10;
  if (has__withdraw_excavate_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_withdraw_excavate_hero(), target);
  }

  // optional .up.draw_excavate_def_rwd _draw_excavate_def_rwd = 11;
  if (has__draw_excavate_def_rwd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_draw_excavate_def_rwd(), target);
  }

  // optional .up.drop_excavate _drop_excavate = 12;
  if (has__drop_excavate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->_drop_excavate(), target);
  }

  // optional .up.query_replay _query_replay = 13;
  if (has__query_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->_query_replay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int excavate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.search_excavate _search_excavate = 1;
    if (has__search_excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_search_excavate());
    }

    // optional .up.query_excavate_data _query_excavate_data = 2;
    if (has__query_excavate_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_data());
    }

    // optional .up.query_excavate_history _query_excavate_history = 3;
    if (has__query_excavate_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_history());
    }

    // optional .up.query_excavate_battle _query_excavate_battle = 4;
    if (has__query_excavate_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_battle());
    }

    // optional .up.set_excavate_team _set_excavate_team = 5;
    if (has__set_excavate_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_set_excavate_team());
    }

    // optional .up.excavate_start_battle _excavate_start_battle = 6;
    if (has__excavate_start_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate_start_battle());
    }

    // optional .up.excavate_end_battle _excavate_end_battle = 7;
    if (has__excavate_end_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_excavate_end_battle());
    }

    // optional .up.query_excavate_def _query_excavate_def = 8;
    if (has__query_excavate_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_excavate_def());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .up.clear_excavate_battle _clear_excavate_battle = 9;
    if (has__clear_excavate_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_clear_excavate_battle());
    }

    // optional .up.withdraw_excavate_hero _withdraw_excavate_hero = 10;
    if (has__withdraw_excavate_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_withdraw_excavate_hero());
    }

    // optional .up.draw_excavate_def_rwd _draw_excavate_def_rwd = 11;
    if (has__draw_excavate_def_rwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_draw_excavate_def_rwd());
    }

    // optional .up.drop_excavate _drop_excavate = 12;
    if (has__drop_excavate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_drop_excavate());
    }

    // optional .up.query_replay _query_replay = 13;
    if (has__query_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_query_replay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate::MergeFrom(const excavate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__search_excavate()) {
      mutable__search_excavate()->::up::search_excavate::MergeFrom(from._search_excavate());
    }
    if (from.has__query_excavate_data()) {
      mutable__query_excavate_data()->::up::query_excavate_data::MergeFrom(from._query_excavate_data());
    }
    if (from.has__query_excavate_history()) {
      mutable__query_excavate_history()->::up::query_excavate_history::MergeFrom(from._query_excavate_history());
    }
    if (from.has__query_excavate_battle()) {
      mutable__query_excavate_battle()->::up::query_excavate_battle::MergeFrom(from._query_excavate_battle());
    }
    if (from.has__set_excavate_team()) {
      mutable__set_excavate_team()->::up::set_excavate_team::MergeFrom(from._set_excavate_team());
    }
    if (from.has__excavate_start_battle()) {
      mutable__excavate_start_battle()->::up::excavate_start_battle::MergeFrom(from._excavate_start_battle());
    }
    if (from.has__excavate_end_battle()) {
      mutable__excavate_end_battle()->::up::excavate_end_battle::MergeFrom(from._excavate_end_battle());
    }
    if (from.has__query_excavate_def()) {
      mutable__query_excavate_def()->::up::query_excavate_def::MergeFrom(from._query_excavate_def());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has__clear_excavate_battle()) {
      mutable__clear_excavate_battle()->::up::clear_excavate_battle::MergeFrom(from._clear_excavate_battle());
    }
    if (from.has__withdraw_excavate_hero()) {
      mutable__withdraw_excavate_hero()->::up::withdraw_excavate_hero::MergeFrom(from._withdraw_excavate_hero());
    }
    if (from.has__draw_excavate_def_rwd()) {
      mutable__draw_excavate_def_rwd()->::up::draw_excavate_def_rwd::MergeFrom(from._draw_excavate_def_rwd());
    }
    if (from.has__drop_excavate()) {
      mutable__drop_excavate()->::up::drop_excavate::MergeFrom(from._drop_excavate());
    }
    if (from.has__query_replay()) {
      mutable__query_replay()->::up::query_replay::MergeFrom(from._query_replay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate::CopyFrom(const excavate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate::IsInitialized() const {

  if (has__query_excavate_battle()) {
    if (!this->_query_excavate_battle().IsInitialized()) return false;
  }
  if (has__set_excavate_team()) {
    if (!this->_set_excavate_team().IsInitialized()) return false;
  }
  if (has__excavate_start_battle()) {
    if (!this->_excavate_start_battle().IsInitialized()) return false;
  }
  if (has__excavate_end_battle()) {
    if (!this->_excavate_end_battle().IsInitialized()) return false;
  }
  if (has__query_excavate_def()) {
    if (!this->_query_excavate_def().IsInitialized()) return false;
  }
  if (has__withdraw_excavate_hero()) {
    if (!this->_withdraw_excavate_hero().IsInitialized()) return false;
  }
  if (has__draw_excavate_def_rwd()) {
    if (!this->_draw_excavate_def_rwd().IsInitialized()) return false;
  }
  if (has__drop_excavate()) {
    if (!this->_drop_excavate().IsInitialized()) return false;
  }
  if (has__query_replay()) {
    if (!this->_query_replay().IsInitialized()) return false;
  }
  return true;
}

void excavate::Swap(excavate* other) {
  if (other != this) {
    std::swap(_search_excavate_, other->_search_excavate_);
    std::swap(_query_excavate_data_, other->_query_excavate_data_);
    std::swap(_query_excavate_history_, other->_query_excavate_history_);
    std::swap(_query_excavate_battle_, other->_query_excavate_battle_);
    std::swap(_set_excavate_team_, other->_set_excavate_team_);
    std::swap(_excavate_start_battle_, other->_excavate_start_battle_);
    std::swap(_excavate_end_battle_, other->_excavate_end_battle_);
    std::swap(_query_excavate_def_, other->_query_excavate_def_);
    std::swap(_clear_excavate_battle_, other->_clear_excavate_battle_);
    std::swap(_withdraw_excavate_hero_, other->_withdraw_excavate_hero_);
    std::swap(_draw_excavate_def_rwd_, other->_draw_excavate_def_rwd_);
    std::swap(_drop_excavate_, other->_drop_excavate_);
    std::swap(_query_replay_, other->_query_replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_descriptor_;
  metadata.reflection = excavate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

search_excavate::search_excavate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void search_excavate::InitAsDefaultInstance() {
}

search_excavate::search_excavate(const search_excavate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void search_excavate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

search_excavate::~search_excavate() {
  SharedDtor();
}

void search_excavate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void search_excavate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* search_excavate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return search_excavate_descriptor_;
}

const search_excavate& search_excavate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

search_excavate* search_excavate::default_instance_ = NULL;

search_excavate* search_excavate::New() const {
  return new search_excavate;
}

void search_excavate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool search_excavate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void search_excavate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* search_excavate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int search_excavate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void search_excavate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const search_excavate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const search_excavate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void search_excavate::MergeFrom(const search_excavate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void search_excavate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void search_excavate::CopyFrom(const search_excavate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_excavate::IsInitialized() const {

  return true;
}

void search_excavate::Swap(search_excavate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata search_excavate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = search_excavate_descriptor_;
  metadata.reflection = search_excavate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

query_excavate_data::query_excavate_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_excavate_data::InitAsDefaultInstance() {
}

query_excavate_data::query_excavate_data(const query_excavate_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_excavate_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_data::~query_excavate_data() {
  SharedDtor();
}

void query_excavate_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_excavate_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_data_descriptor_;
}

const query_excavate_data& query_excavate_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_excavate_data* query_excavate_data::default_instance_ = NULL;

query_excavate_data* query_excavate_data::New() const {
  return new query_excavate_data;
}

void query_excavate_data::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void query_excavate_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_excavate_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_excavate_data::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_data::MergeFrom(const query_excavate_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_data::CopyFrom(const query_excavate_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_data::IsInitialized() const {

  return true;
}

void query_excavate_data::Swap(query_excavate_data* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_data_descriptor_;
  metadata.reflection = query_excavate_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

query_excavate_history::query_excavate_history()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_excavate_history::InitAsDefaultInstance() {
}

query_excavate_history::query_excavate_history(const query_excavate_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_excavate_history::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_history::~query_excavate_history() {
  SharedDtor();
}

void query_excavate_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_excavate_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_history_descriptor_;
}

const query_excavate_history& query_excavate_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_excavate_history* query_excavate_history::default_instance_ = NULL;

query_excavate_history* query_excavate_history::New() const {
  return new query_excavate_history;
}

void query_excavate_history::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void query_excavate_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_excavate_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_excavate_history::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_history::MergeFrom(const query_excavate_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_history::CopyFrom(const query_excavate_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_history::IsInitialized() const {

  return true;
}

void query_excavate_history::Swap(query_excavate_history* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_history_descriptor_;
  metadata.reflection = query_excavate_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_battle::kIdFieldNumber;
#endif  // !_MSC_VER

query_excavate_battle::query_excavate_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_excavate_battle::InitAsDefaultInstance() {
}

query_excavate_battle::query_excavate_battle(const query_excavate_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_excavate_battle::SharedCtor() {
  _cached_size_ = 0;
  _id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_battle::~query_excavate_battle() {
  SharedDtor();
}

void query_excavate_battle::SharedDtor() {
  if (_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _id_;
  }
  if (this != default_instance_) {
  }
}

void query_excavate_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_battle_descriptor_;
}

const query_excavate_battle& query_excavate_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_excavate_battle* query_excavate_battle::default_instance_ = NULL;

query_excavate_battle* query_excavate_battle::New() const {
  return new query_excavate_battle;
}

void query_excavate_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__id()) {
      if (_id_ != &::google::protobuf::internal::kEmptyString) {
        _id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_id().data(), this->_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_excavate_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_excavate_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_excavate_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_battle::MergeFrom(const query_excavate_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_battle::CopyFrom(const query_excavate_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_excavate_battle::Swap(query_excavate_battle* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_battle_descriptor_;
  metadata.reflection = query_excavate_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_excavate_team::kExcavateIdFieldNumber;
const int set_excavate_team::kTidFieldNumber;
#endif  // !_MSC_VER

set_excavate_team::set_excavate_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_excavate_team::InitAsDefaultInstance() {
}

set_excavate_team::set_excavate_team(const set_excavate_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_excavate_team::SharedCtor() {
  _cached_size_ = 0;
  _excavate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_excavate_team::~set_excavate_team() {
  SharedDtor();
}

void set_excavate_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_excavate_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_excavate_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_excavate_team_descriptor_;
}

const set_excavate_team& set_excavate_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

set_excavate_team* set_excavate_team::default_instance_ = NULL;

set_excavate_team* set_excavate_team::New() const {
  return new set_excavate_team;
}

void set_excavate_team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _excavate_id_ = 0u;
  }
  _tid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_excavate_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _excavate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_excavate_id_)));
          set_has__excavate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__tid;
        break;
      }

      // repeated uint32 _tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable__tid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__tid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__tid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_excavate_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _excavate_id = 1;
  if (has__excavate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_excavate_id(), output);
  }

  // repeated uint32 _tid = 2;
  for (int i = 0; i < this->_tid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->_tid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_excavate_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _excavate_id = 1;
  if (has__excavate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_excavate_id(), target);
  }

  // repeated uint32 _tid = 2;
  for (int i = 0; i < this->_tid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->_tid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_excavate_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _excavate_id = 1;
    if (has__excavate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_excavate_id());
    }

  }
  // repeated uint32 _tid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->_tid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_tid(i));
    }
    total_size += 1 * this->_tid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_excavate_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_excavate_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_excavate_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_excavate_team::MergeFrom(const set_excavate_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  _tid_.MergeFrom(from._tid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__excavate_id()) {
      set__excavate_id(from._excavate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_excavate_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_excavate_team::CopyFrom(const set_excavate_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_excavate_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void set_excavate_team::Swap(set_excavate_team* other) {
  if (other != this) {
    std::swap(_excavate_id_, other->_excavate_id_);
    _tid_.Swap(&other->_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_excavate_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_excavate_team_descriptor_;
  metadata.reflection = set_excavate_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_start_battle::kHeroidsFieldNumber;
const int excavate_start_battle::kExcavateIdFieldNumber;
const int excavate_start_battle::kTeamIdFieldNumber;
const int excavate_start_battle::kTeamSvrIdFieldNumber;
const int excavate_start_battle::kUseHireFieldNumber;
#endif  // !_MSC_VER

excavate_start_battle::excavate_start_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void excavate_start_battle::InitAsDefaultInstance() {
}

excavate_start_battle::excavate_start_battle(const excavate_start_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void excavate_start_battle::SharedCtor() {
  _cached_size_ = 0;
  _excavate_id_ = 0u;
  _team_id_ = 0u;
  _team_svr_id_ = 0u;
  _use_hire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_start_battle::~excavate_start_battle() {
  SharedDtor();
}

void excavate_start_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_start_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_start_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_start_battle_descriptor_;
}

const excavate_start_battle& excavate_start_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

excavate_start_battle* excavate_start_battle::default_instance_ = NULL;

excavate_start_battle* excavate_start_battle::New() const {
  return new excavate_start_battle;
}

void excavate_start_battle::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    _excavate_id_ = 0u;
    _team_id_ = 0u;
    _team_svr_id_ = 0u;
    _use_hire_ = 0u;
  }
  _heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_start_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _heroids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__heroids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__heroids;
        if (input->ExpectTag(16)) goto parse__excavate_id;
        break;
      }

      // required uint32 _excavate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__excavate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_excavate_id_)));
          set_has__excavate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__team_id;
        break;
      }

      // required uint32 _team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_team_id_)));
          set_has__team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__team_svr_id;
        break;
      }

      // optional uint32 _team_svr_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__team_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_team_svr_id_)));
          set_has__team_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse__use_hire;
        break;
      }

      // optional uint32 _use_hire = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__use_hire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_use_hire_)));
          set_has__use_hire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void excavate_start_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _heroids = 1;
  for (int i = 0; i < this->_heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_heroids(i), output);
  }

  // required uint32 _excavate_id = 2;
  if (has__excavate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_excavate_id(), output);
  }

  // required uint32 _team_id = 3;
  if (has__team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_team_id(), output);
  }

  // optional uint32 _team_svr_id = 4;
  if (has__team_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_team_svr_id(), output);
  }

  // optional uint32 _use_hire = 5;
  if (has__use_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_use_hire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* excavate_start_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _heroids = 1;
  for (int i = 0; i < this->_heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_heroids(i), target);
  }

  // required uint32 _excavate_id = 2;
  if (has__excavate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_excavate_id(), target);
  }

  // required uint32 _team_id = 3;
  if (has__team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_team_id(), target);
  }

  // optional uint32 _team_svr_id = 4;
  if (has__team_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_team_svr_id(), target);
  }

  // optional uint32 _use_hire = 5;
  if (has__use_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_use_hire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int excavate_start_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 _excavate_id = 2;
    if (has__excavate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_excavate_id());
    }

    // required uint32 _team_id = 3;
    if (has__team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_team_id());
    }

    // optional uint32 _team_svr_id = 4;
    if (has__team_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_team_svr_id());
    }

    // optional uint32 _use_hire = 5;
    if (has__use_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_use_hire());
    }

  }
  // repeated uint32 _heroids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_heroids(i));
    }
    total_size += 1 * this->_heroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_start_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_start_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_start_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_start_battle::MergeFrom(const excavate_start_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _heroids_.MergeFrom(from._heroids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__excavate_id()) {
      set__excavate_id(from._excavate_id());
    }
    if (from.has__team_id()) {
      set__team_id(from._team_id());
    }
    if (from.has__team_svr_id()) {
      set__team_svr_id(from._team_svr_id());
    }
    if (from.has__use_hire()) {
      set__use_hire(from._use_hire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_start_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_start_battle::CopyFrom(const excavate_start_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_start_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void excavate_start_battle::Swap(excavate_start_battle* other) {
  if (other != this) {
    _heroids_.Swap(&other->_heroids_);
    std::swap(_excavate_id_, other->_excavate_id_);
    std::swap(_team_id_, other->_team_id_);
    std::swap(_team_svr_id_, other->_team_svr_id_);
    std::swap(_use_hire_, other->_use_hire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_start_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_start_battle_descriptor_;
  metadata.reflection = excavate_start_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_end_battle::kResultFieldNumber;
const int excavate_end_battle::kSelfHeroesFieldNumber;
const int excavate_end_battle::kOppoHeroesFieldNumber;
const int excavate_end_battle::kOprationsFieldNumber;
const int excavate_end_battle::kTypeIdFieldNumber;
#endif  // !_MSC_VER

excavate_end_battle::excavate_end_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void excavate_end_battle::InitAsDefaultInstance() {
}

excavate_end_battle::excavate_end_battle(const excavate_end_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void excavate_end_battle::SharedCtor() {
  _cached_size_ = 0;
  _result_ = 0;
  _type_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_end_battle::~excavate_end_battle() {
  SharedDtor();
}

void excavate_end_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_end_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_end_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_end_battle_descriptor_;
}

const excavate_end_battle& excavate_end_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

excavate_end_battle* excavate_end_battle::default_instance_ = NULL;

excavate_end_battle* excavate_end_battle::New() const {
  return new excavate_end_battle;
}

void excavate_end_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _result_ = 0;
    _type_id_ = 0u;
  }
  _self_heroes_.Clear();
  _oppo_heroes_.Clear();
  _oprations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_end_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.battle_result _result = 1 [default = victory];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::battle_result_IsValid(value)) {
            set__result(static_cast< ::up::battle_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__self_heroes;
        break;
      }

      // repeated .up.excavate_hero _self_heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__self_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__self_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__self_heroes;
        if (input->ExpectTag(26)) goto parse__oppo_heroes;
        break;
      }

      // repeated .up.excavate_hero _oppo_heroes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__oppo_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__oppo_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__oppo_heroes;
        if (input->ExpectTag(32)) goto parse__oprations;
        break;
      }

      // repeated uint32 _oprations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__oprations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable__oprations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__oprations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__oprations;
        if (input->ExpectTag(40)) goto parse__type_id;
        break;
      }

      // required uint32 _type_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_type_id_)));
          set_has__type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void excavate_end_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_result(), output);
  }

  // repeated .up.excavate_hero _self_heroes = 2;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_self_heroes(i), output);
  }

  // repeated .up.excavate_hero _oppo_heroes = 3;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_oppo_heroes(i), output);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->_oprations(i), output);
  }

  // required uint32 _type_id = 5;
  if (has__type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->_type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* excavate_end_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.battle_result _result = 1 [default = victory];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_result(), target);
  }

  // repeated .up.excavate_hero _self_heroes = 2;
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_self_heroes(i), target);
  }

  // repeated .up.excavate_hero _oppo_heroes = 3;
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_oppo_heroes(i), target);
  }

  // repeated uint32 _oprations = 4;
  for (int i = 0; i < this->_oprations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->_oprations(i), target);
  }

  // required uint32 _type_id = 5;
  if (has__type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->_type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int excavate_end_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.battle_result _result = 1 [default = victory];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _type_id = 5;
    if (has__type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_type_id());
    }

  }
  // repeated .up.excavate_hero _self_heroes = 2;
  total_size += 1 * this->_self_heroes_size();
  for (int i = 0; i < this->_self_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_self_heroes(i));
  }

  // repeated .up.excavate_hero _oppo_heroes = 3;
  total_size += 1 * this->_oppo_heroes_size();
  for (int i = 0; i < this->_oppo_heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_oppo_heroes(i));
  }

  // repeated uint32 _oprations = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->_oprations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_oprations(i));
    }
    total_size += 1 * this->_oprations_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_end_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_end_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_end_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_end_battle::MergeFrom(const excavate_end_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  _self_heroes_.MergeFrom(from._self_heroes_);
  _oppo_heroes_.MergeFrom(from._oppo_heroes_);
  _oprations_.MergeFrom(from._oprations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__type_id()) {
      set__type_id(from._type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_end_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_end_battle::CopyFrom(const excavate_end_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_end_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  for (int i = 0; i < _self_heroes_size(); i++) {
    if (!this->_self_heroes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < _oppo_heroes_size(); i++) {
    if (!this->_oppo_heroes(i).IsInitialized()) return false;
  }
  return true;
}

void excavate_end_battle::Swap(excavate_end_battle* other) {
  if (other != this) {
    std::swap(_result_, other->_result_);
    _self_heroes_.Swap(&other->_self_heroes_);
    _oppo_heroes_.Swap(&other->_oppo_heroes_);
    _oprations_.Swap(&other->_oprations_);
    std::swap(_type_id_, other->_type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_end_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_end_battle_descriptor_;
  metadata.reflection = excavate_end_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_excavate_def::kMineIdFieldNumber;
const int query_excavate_def::kApplierUidFieldNumber;
#endif  // !_MSC_VER

query_excavate_def::query_excavate_def()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_excavate_def::InitAsDefaultInstance() {
}

query_excavate_def::query_excavate_def(const query_excavate_def& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_excavate_def::SharedCtor() {
  _cached_size_ = 0;
  _mine_id_ = 0u;
  _applier_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_excavate_def::~query_excavate_def() {
  SharedDtor();
}

void query_excavate_def::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_excavate_def::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_excavate_def::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_excavate_def_descriptor_;
}

const query_excavate_def& query_excavate_def::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_excavate_def* query_excavate_def::default_instance_ = NULL;

query_excavate_def* query_excavate_def::New() const {
  return new query_excavate_def;
}

void query_excavate_def::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _mine_id_ = 0u;
    _applier_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_excavate_def::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _mine_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mine_id_)));
          set_has__mine_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__applier_uid;
        break;
      }

      // required uint32 _applier_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__applier_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_applier_uid_)));
          set_has__applier_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_excavate_def::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _mine_id = 1;
  if (has__mine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_mine_id(), output);
  }

  // required uint32 _applier_uid = 2;
  if (has__applier_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_applier_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_excavate_def::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _mine_id = 1;
  if (has__mine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_mine_id(), target);
  }

  // required uint32 _applier_uid = 2;
  if (has__applier_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_applier_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_excavate_def::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _mine_id = 1;
    if (has__mine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mine_id());
    }

    // required uint32 _applier_uid = 2;
    if (has__applier_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_applier_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_excavate_def::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_excavate_def* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_excavate_def*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_excavate_def::MergeFrom(const query_excavate_def& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__mine_id()) {
      set__mine_id(from._mine_id());
    }
    if (from.has__applier_uid()) {
      set__applier_uid(from._applier_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_excavate_def::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_excavate_def::CopyFrom(const query_excavate_def& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_excavate_def::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void query_excavate_def::Swap(query_excavate_def* other) {
  if (other != this) {
    std::swap(_mine_id_, other->_mine_id_);
    std::swap(_applier_uid_, other->_applier_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_excavate_def::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_excavate_def_descriptor_;
  metadata.reflection = query_excavate_def_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

clear_excavate_battle::clear_excavate_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clear_excavate_battle::InitAsDefaultInstance() {
}

clear_excavate_battle::clear_excavate_battle(const clear_excavate_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clear_excavate_battle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clear_excavate_battle::~clear_excavate_battle() {
  SharedDtor();
}

void clear_excavate_battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clear_excavate_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clear_excavate_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clear_excavate_battle_descriptor_;
}

const clear_excavate_battle& clear_excavate_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

clear_excavate_battle* clear_excavate_battle::default_instance_ = NULL;

clear_excavate_battle* clear_excavate_battle::New() const {
  return new clear_excavate_battle;
}

void clear_excavate_battle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clear_excavate_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void clear_excavate_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clear_excavate_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clear_excavate_battle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clear_excavate_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clear_excavate_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clear_excavate_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clear_excavate_battle::MergeFrom(const clear_excavate_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clear_excavate_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clear_excavate_battle::CopyFrom(const clear_excavate_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clear_excavate_battle::IsInitialized() const {

  return true;
}

void clear_excavate_battle::Swap(clear_excavate_battle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clear_excavate_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clear_excavate_battle_descriptor_;
  metadata.reflection = clear_excavate_battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int withdraw_excavate_hero::kHeroIdFieldNumber;
#endif  // !_MSC_VER

withdraw_excavate_hero::withdraw_excavate_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void withdraw_excavate_hero::InitAsDefaultInstance() {
}

withdraw_excavate_hero::withdraw_excavate_hero(const withdraw_excavate_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void withdraw_excavate_hero::SharedCtor() {
  _cached_size_ = 0;
  _hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

withdraw_excavate_hero::~withdraw_excavate_hero() {
  SharedDtor();
}

void withdraw_excavate_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void withdraw_excavate_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* withdraw_excavate_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return withdraw_excavate_hero_descriptor_;
}

const withdraw_excavate_hero& withdraw_excavate_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

withdraw_excavate_hero* withdraw_excavate_hero::default_instance_ = NULL;

withdraw_excavate_hero* withdraw_excavate_hero::New() const {
  return new withdraw_excavate_hero;
}

void withdraw_excavate_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool withdraw_excavate_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hero_id_)));
          set_has__hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void withdraw_excavate_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* withdraw_excavate_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _hero_id = 1;
  if (has__hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int withdraw_excavate_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hero_id = 1;
    if (has__hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void withdraw_excavate_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const withdraw_excavate_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const withdraw_excavate_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void withdraw_excavate_hero::MergeFrom(const withdraw_excavate_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hero_id()) {
      set__hero_id(from._hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void withdraw_excavate_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void withdraw_excavate_hero::CopyFrom(const withdraw_excavate_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool withdraw_excavate_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void withdraw_excavate_hero::Swap(withdraw_excavate_hero* other) {
  if (other != this) {
    std::swap(_hero_id_, other->_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata withdraw_excavate_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = withdraw_excavate_hero_descriptor_;
  metadata.reflection = withdraw_excavate_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int draw_excavate_def_rwd::kIdFieldNumber;
#endif  // !_MSC_VER

draw_excavate_def_rwd::draw_excavate_def_rwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void draw_excavate_def_rwd::InitAsDefaultInstance() {
}

draw_excavate_def_rwd::draw_excavate_def_rwd(const draw_excavate_def_rwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void draw_excavate_def_rwd::SharedCtor() {
  _cached_size_ = 0;
  _id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_excavate_def_rwd::~draw_excavate_def_rwd() {
  SharedDtor();
}

void draw_excavate_def_rwd::SharedDtor() {
  if (_id_ != &::google::protobuf::internal::kEmptyString) {
    delete _id_;
  }
  if (this != default_instance_) {
  }
}

void draw_excavate_def_rwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_excavate_def_rwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_excavate_def_rwd_descriptor_;
}

const draw_excavate_def_rwd& draw_excavate_def_rwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

draw_excavate_def_rwd* draw_excavate_def_rwd::default_instance_ = NULL;

draw_excavate_def_rwd* draw_excavate_def_rwd::New() const {
  return new draw_excavate_def_rwd;
}

void draw_excavate_def_rwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__id()) {
      if (_id_ != &::google::protobuf::internal::kEmptyString) {
        _id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_excavate_def_rwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->_id().data(), this->_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void draw_excavate_def_rwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* draw_excavate_def_rwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->_id().data(), this->_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int draw_excavate_def_rwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_excavate_def_rwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_excavate_def_rwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_excavate_def_rwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_excavate_def_rwd::MergeFrom(const draw_excavate_def_rwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_excavate_def_rwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_excavate_def_rwd::CopyFrom(const draw_excavate_def_rwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_excavate_def_rwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void draw_excavate_def_rwd::Swap(draw_excavate_def_rwd* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_excavate_def_rwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_excavate_def_rwd_descriptor_;
  metadata.reflection = draw_excavate_def_rwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int drop_excavate::kMineIdFieldNumber;
#endif  // !_MSC_VER

drop_excavate::drop_excavate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void drop_excavate::InitAsDefaultInstance() {
}

drop_excavate::drop_excavate(const drop_excavate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void drop_excavate::SharedCtor() {
  _cached_size_ = 0;
  _mine_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

drop_excavate::~drop_excavate() {
  SharedDtor();
}

void drop_excavate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void drop_excavate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drop_excavate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_excavate_descriptor_;
}

const drop_excavate& drop_excavate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

drop_excavate* drop_excavate::default_instance_ = NULL;

drop_excavate* drop_excavate::New() const {
  return new drop_excavate;
}

void drop_excavate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _mine_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool drop_excavate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _mine_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mine_id_)));
          set_has__mine_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void drop_excavate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _mine_id = 1;
  if (has__mine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_mine_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* drop_excavate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _mine_id = 1;
  if (has__mine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_mine_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int drop_excavate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _mine_id = 1;
    if (has__mine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mine_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drop_excavate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const drop_excavate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const drop_excavate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void drop_excavate::MergeFrom(const drop_excavate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__mine_id()) {
      set__mine_id(from._mine_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void drop_excavate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_excavate::CopyFrom(const drop_excavate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_excavate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void drop_excavate::Swap(drop_excavate* other) {
  if (other != this) {
    std::swap(_mine_id_, other->_mine_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata drop_excavate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = drop_excavate_descriptor_;
  metadata.reflection = drop_excavate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int excavate_hero::kHeroidFieldNumber;
const int excavate_hero::kHpPercFieldNumber;
const int excavate_hero::kMpPercFieldNumber;
const int excavate_hero::kCustomDataFieldNumber;
#endif  // !_MSC_VER

excavate_hero::excavate_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void excavate_hero::InitAsDefaultInstance() {
}

excavate_hero::excavate_hero(const excavate_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void excavate_hero::SharedCtor() {
  _cached_size_ = 0;
  _heroid_ = 0u;
  _hp_perc_ = 0u;
  _mp_perc_ = 0u;
  _custom_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

excavate_hero::~excavate_hero() {
  SharedDtor();
}

void excavate_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void excavate_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* excavate_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return excavate_hero_descriptor_;
}

const excavate_hero& excavate_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

excavate_hero* excavate_hero::default_instance_ = NULL;

excavate_hero* excavate_hero::New() const {
  return new excavate_hero;
}

void excavate_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _heroid_ = 0u;
    _hp_perc_ = 0u;
    _mp_perc_ = 0u;
    _custom_data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool excavate_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_heroid_)));
          set_has__heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__hp_perc;
        break;
      }

      // required uint32 _hp_perc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__hp_perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hp_perc_)));
          set_has__hp_perc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__mp_perc;
        break;
      }

      // required uint32 _mp_perc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__mp_perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_mp_perc_)));
          set_has__mp_perc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__custom_data;
        break;
      }

      // optional uint32 _custom_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__custom_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_custom_data_)));
          set_has__custom_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void excavate_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_heroid(), output);
  }

  // required uint32 _hp_perc = 2;
  if (has__hp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_hp_perc(), output);
  }

  // required uint32 _mp_perc = 3;
  if (has__mp_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_mp_perc(), output);
  }

  // optional uint32 _custom_data = 4;
  if (has__custom_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_custom_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* excavate_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _heroid = 1;
  if (has__heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_heroid(), target);
  }

  // required uint32 _hp_perc = 2;
  if (has__hp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_hp_perc(), target);
  }

  // required uint32 _mp_perc = 3;
  if (has__mp_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_mp_perc(), target);
  }

  // optional uint32 _custom_data = 4;
  if (has__custom_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_custom_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int excavate_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _heroid = 1;
    if (has__heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_heroid());
    }

    // required uint32 _hp_perc = 2;
    if (has__hp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hp_perc());
    }

    // required uint32 _mp_perc = 3;
    if (has__mp_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_mp_perc());
    }

    // optional uint32 _custom_data = 4;
    if (has__custom_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_custom_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void excavate_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const excavate_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const excavate_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void excavate_hero::MergeFrom(const excavate_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__heroid()) {
      set__heroid(from._heroid());
    }
    if (from.has__hp_perc()) {
      set__hp_perc(from._hp_perc());
    }
    if (from.has__mp_perc()) {
      set__mp_perc(from._mp_perc());
    }
    if (from.has__custom_data()) {
      set__custom_data(from._custom_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void excavate_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void excavate_hero::CopyFrom(const excavate_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool excavate_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void excavate_hero::Swap(excavate_hero* other) {
  if (other != this) {
    std::swap(_heroid_, other->_heroid_);
    std::swap(_hp_perc_, other->_hp_perc_);
    std::swap(_mp_perc_, other->_mp_perc_);
    std::swap(_custom_data_, other->_custom_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata excavate_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = excavate_hero_descriptor_;
  metadata.reflection = excavate_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

query_split_data::query_split_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_split_data::InitAsDefaultInstance() {
}

query_split_data::query_split_data(const query_split_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_split_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_split_data::~query_split_data() {
  SharedDtor();
}

void query_split_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_split_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_split_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_split_data_descriptor_;
}

const query_split_data& query_split_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_split_data* query_split_data::default_instance_ = NULL;

query_split_data* query_split_data::New() const {
  return new query_split_data;
}

void query_split_data::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_split_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void query_split_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_split_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_split_data::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_split_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_split_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_split_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_split_data::MergeFrom(const query_split_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_split_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_split_data::CopyFrom(const query_split_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_split_data::IsInitialized() const {

  return true;
}

void query_split_data::Swap(query_split_data* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_split_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_split_data_descriptor_;
  metadata.reflection = query_split_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_split_return::kTidFieldNumber;
#endif  // !_MSC_VER

query_split_return::query_split_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_split_return::InitAsDefaultInstance() {
}

query_split_return::query_split_return(const query_split_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_split_return::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_split_return::~query_split_return() {
  SharedDtor();
}

void query_split_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_split_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_split_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_split_return_descriptor_;
}

const query_split_return& query_split_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_split_return* query_split_return::default_instance_ = NULL;

query_split_return* query_split_return::New() const {
  return new query_split_return;
}

void query_split_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_split_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_split_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_split_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_split_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_split_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_split_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_split_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_split_return::MergeFrom(const query_split_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_split_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_split_return::CopyFrom(const query_split_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_split_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_split_return::Swap(query_split_return* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_split_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_split_return_descriptor_;
  metadata.reflection = query_split_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int split_hero::kTidFieldNumber;
const int split_hero::kStoneIdFieldNumber;
#endif  // !_MSC_VER

split_hero::split_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void split_hero::InitAsDefaultInstance() {
}

split_hero::split_hero(const split_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void split_hero::SharedCtor() {
  _cached_size_ = 0;
  _tid_ = 0u;
  _stone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

split_hero::~split_hero() {
  SharedDtor();
}

void split_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void split_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* split_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return split_hero_descriptor_;
}

const split_hero& split_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

split_hero* split_hero::default_instance_ = NULL;

split_hero* split_hero::New() const {
  return new split_hero;
}

void split_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _tid_ = 0u;
    _stone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool split_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_tid_)));
          set_has__tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__stone_id;
        break;
      }

      // optional uint32 _stone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__stone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_stone_id_)));
          set_has__stone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void split_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_tid(), output);
  }

  // optional uint32 _stone_id = 2;
  if (has__stone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_stone_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* split_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _tid = 1;
  if (has__tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_tid(), target);
  }

  // optional uint32 _stone_id = 2;
  if (has__stone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_stone_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int split_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _tid = 1;
    if (has__tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_tid());
    }

    // optional uint32 _stone_id = 2;
    if (has__stone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_stone_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void split_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const split_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const split_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void split_hero::MergeFrom(const split_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__tid()) {
      set__tid(from._tid());
    }
    if (from.has__stone_id()) {
      set__stone_id(from._stone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void split_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void split_hero::CopyFrom(const split_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool split_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void split_hero::Swap(split_hero* other) {
  if (other != this) {
    std::swap(_tid_, other->_tid_);
    std::swap(_stone_id_, other->_stone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata split_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = split_hero_descriptor_;
  metadata.reflection = split_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup::kWorldcupQueryFieldNumber;
const int worldcup::kWorldcupSubmitFieldNumber;
#endif  // !_MSC_VER

worldcup::worldcup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldcup::InitAsDefaultInstance() {
  _worldcup_query_ = const_cast< ::up::worldcup_query*>(&::up::worldcup_query::default_instance());
  _worldcup_submit_ = const_cast< ::up::worldcup_submit*>(&::up::worldcup_submit::default_instance());
}

worldcup::worldcup(const worldcup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldcup::SharedCtor() {
  _cached_size_ = 0;
  _worldcup_query_ = NULL;
  _worldcup_submit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup::~worldcup() {
  SharedDtor();
}

void worldcup::SharedDtor() {
  if (this != default_instance_) {
    delete _worldcup_query_;
    delete _worldcup_submit_;
  }
}

void worldcup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_descriptor_;
}

const worldcup& worldcup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

worldcup* worldcup::default_instance_ = NULL;

worldcup* worldcup::New() const {
  return new worldcup;
}

void worldcup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__worldcup_query()) {
      if (_worldcup_query_ != NULL) _worldcup_query_->::up::worldcup_query::Clear();
    }
    if (has__worldcup_submit()) {
      if (_worldcup_submit_ != NULL) _worldcup_submit_->::up::worldcup_submit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .up.worldcup_query _worldcup_query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__worldcup_submit;
        break;
      }

      // optional .up.worldcup_submit _worldcup_submit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__worldcup_submit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__worldcup_submit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldcup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .up.worldcup_query _worldcup_query = 1;
  if (has__worldcup_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_worldcup_query(), output);
  }

  // optional .up.worldcup_submit _worldcup_submit = 2;
  if (has__worldcup_submit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_worldcup_submit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldcup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .up.worldcup_query _worldcup_query = 1;
  if (has__worldcup_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_worldcup_query(), target);
  }

  // optional .up.worldcup_submit _worldcup_submit = 2;
  if (has__worldcup_submit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_worldcup_submit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldcup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .up.worldcup_query _worldcup_query = 1;
    if (has__worldcup_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup_query());
    }

    // optional .up.worldcup_submit _worldcup_submit = 2;
    if (has__worldcup_submit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_worldcup_submit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup::MergeFrom(const worldcup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__worldcup_query()) {
      mutable__worldcup_query()->::up::worldcup_query::MergeFrom(from._worldcup_query());
    }
    if (from.has__worldcup_submit()) {
      mutable__worldcup_submit()->::up::worldcup_submit::MergeFrom(from._worldcup_submit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup::CopyFrom(const worldcup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup::IsInitialized() const {

  if (has__worldcup_submit()) {
    if (!this->_worldcup_submit().IsInitialized()) return false;
  }
  return true;
}

void worldcup::Swap(worldcup* other) {
  if (other != this) {
    std::swap(_worldcup_query_, other->_worldcup_query_);
    std::swap(_worldcup_submit_, other->_worldcup_submit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_descriptor_;
  metadata.reflection = worldcup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

worldcup_query::worldcup_query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldcup_query::InitAsDefaultInstance() {
}

worldcup_query::worldcup_query(const worldcup_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldcup_query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_query::~worldcup_query() {
  SharedDtor();
}

void worldcup_query::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldcup_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_query_descriptor_;
}

const worldcup_query& worldcup_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

worldcup_query* worldcup_query::default_instance_ = NULL;

worldcup_query* worldcup_query::New() const {
  return new worldcup_query;
}

void worldcup_query::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void worldcup_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldcup_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldcup_query::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_query::MergeFrom(const worldcup_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_query::CopyFrom(const worldcup_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_query::IsInitialized() const {

  return true;
}

void worldcup_query::Swap(worldcup_query* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_query_descriptor_;
  metadata.reflection = worldcup_query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldcup_submit::kGuess1FieldNumber;
const int worldcup_submit::kGuess2FieldNumber;
#endif  // !_MSC_VER

worldcup_submit::worldcup_submit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldcup_submit::InitAsDefaultInstance() {
}

worldcup_submit::worldcup_submit(const worldcup_submit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldcup_submit::SharedCtor() {
  _cached_size_ = 0;
  _guess1_ = 0u;
  _guess2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldcup_submit::~worldcup_submit() {
  SharedDtor();
}

void worldcup_submit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldcup_submit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldcup_submit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldcup_submit_descriptor_;
}

const worldcup_submit& worldcup_submit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

worldcup_submit* worldcup_submit::default_instance_ = NULL;

worldcup_submit* worldcup_submit::New() const {
  return new worldcup_submit;
}

void worldcup_submit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _guess1_ = 0u;
    _guess2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldcup_submit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _guess1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guess1_)));
          set_has__guess1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__guess2;
        break;
      }

      // optional uint32 _guess2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__guess2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_guess2_)));
          set_has__guess2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldcup_submit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _guess1 = 1;
  if (has__guess1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_guess1(), output);
  }

  // optional uint32 _guess2 = 2;
  if (has__guess2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_guess2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldcup_submit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _guess1 = 1;
  if (has__guess1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_guess1(), target);
  }

  // optional uint32 _guess2 = 2;
  if (has__guess2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_guess2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldcup_submit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _guess1 = 1;
    if (has__guess1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guess1());
    }

    // optional uint32 _guess2 = 2;
    if (has__guess2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_guess2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldcup_submit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldcup_submit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldcup_submit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldcup_submit::MergeFrom(const worldcup_submit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__guess1()) {
      set__guess1(from._guess1());
    }
    if (from.has__guess2()) {
      set__guess2(from._guess2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldcup_submit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldcup_submit::CopyFrom(const worldcup_submit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldcup_submit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void worldcup_submit::Swap(worldcup_submit* other) {
  if (other != this) {
    std::swap(_guess1_, other->_guess1_);
    std::swap(_guess2_, other->_guess2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldcup_submit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldcup_submit_descriptor_;
  metadata.reflection = worldcup_submit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int report_battle::kIdFieldNumber;
const int report_battle::kDataFieldNumber;
#endif  // !_MSC_VER

report_battle::report_battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void report_battle::InitAsDefaultInstance() {
}

report_battle::report_battle(const report_battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void report_battle::SharedCtor() {
  _cached_size_ = 0;
  _id_ = 0u;
  _data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

report_battle::~report_battle() {
  SharedDtor();
}

void report_battle::SharedDtor() {
  if (_data_ != &::google::protobuf::internal::kEmptyString) {
    delete _data_;
  }
  if (this != default_instance_) {
  }
}

void report_battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* report_battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return report_battle_descriptor_;
}

const report_battle& report_battle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

report_battle* report_battle::default_instance_ = NULL;

report_battle* report_battle::New() const {
  return new report_battle;
}

void report_battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _id_ = 0u;
    if (has__data()) {
      if (_data_ != &::google::protobuf::internal::kEmptyString) {
        _data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool report_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_id_)));
          set_has__id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__data;
        break;
      }

      // required bytes _data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable__data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void report_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_id(), output);
  }

  // required bytes _data = 2;
  if (has__data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* report_battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_id(), target);
  }

  // required bytes _data = 2;
  if (has__data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int report_battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_id());
    }

    // required bytes _data = 2;
    if (has__data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void report_battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const report_battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const report_battle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void report_battle::MergeFrom(const report_battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      set__id(from._id());
    }
    if (from.has__data()) {
      set__data(from._data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void report_battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void report_battle::CopyFrom(const report_battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool report_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void report_battle::Swap(report_battle* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_data_, other->_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata report_battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = report_battle_descriptor_;
  metadata.reflection = report_battle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* query_ranklist_rank_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_ranklist_rank_type_descriptor_;
}
bool query_ranklist_rank_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const query_ranklist_rank_type query_ranklist::guildliveness;
const query_ranklist_rank_type query_ranklist::excavate_rob;
const query_ranklist_rank_type query_ranklist::excavate_gold;
const query_ranklist_rank_type query_ranklist::excavate_exp;
const query_ranklist_rank_type query_ranklist::top_gs;
const query_ranklist_rank_type query_ranklist::full_hero_gs;
const query_ranklist_rank_type query_ranklist::hero_team_gs;
const query_ranklist_rank_type query_ranklist::hero_evo_star;
const query_ranklist_rank_type query_ranklist::hero_arousal;
const query_ranklist_rank_type query_ranklist::top_arena;
const query_ranklist_rank_type query_ranklist::rank_type_MIN;
const query_ranklist_rank_type query_ranklist::rank_type_MAX;
const int query_ranklist::rank_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int query_ranklist::kRankTypeFieldNumber;
#endif  // !_MSC_VER

query_ranklist::query_ranklist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_ranklist::InitAsDefaultInstance() {
}

query_ranklist::query_ranklist(const query_ranklist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_ranklist::SharedCtor() {
  _cached_size_ = 0;
  _rank_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_ranklist::~query_ranklist() {
  SharedDtor();
}

void query_ranklist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_ranklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_ranklist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_ranklist_descriptor_;
}

const query_ranklist& query_ranklist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_ranklist* query_ranklist::default_instance_ = NULL;

query_ranklist* query_ranklist::New() const {
  return new query_ranklist;
}

void query_ranklist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _rank_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_ranklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.query_ranklist.rank_type _rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::query_ranklist_rank_type_IsValid(value)) {
            set__rank_type(static_cast< ::up::query_ranklist_rank_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_ranklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.query_ranklist.rank_type _rank_type = 1;
  if (has__rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_ranklist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.query_ranklist.rank_type _rank_type = 1;
  if (has__rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_ranklist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.query_ranklist.rank_type _rank_type = 1;
    if (has__rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_ranklist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_ranklist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_ranklist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_ranklist::MergeFrom(const query_ranklist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__rank_type()) {
      set__rank_type(from._rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_ranklist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_ranklist::CopyFrom(const query_ranklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_ranklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void query_ranklist::Swap(query_ranklist* other) {
  if (other != this) {
    std::swap(_rank_type_, other->_rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_ranklist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_ranklist_descriptor_;
  metadata.reflection = query_ranklist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dot_info::kDotIdFieldNumber;
#endif  // !_MSC_VER

dot_info::dot_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dot_info::InitAsDefaultInstance() {
}

dot_info::dot_info(const dot_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dot_info::SharedCtor() {
  _cached_size_ = 0;
  _dot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dot_info::~dot_info() {
  SharedDtor();
}

void dot_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dot_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dot_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dot_info_descriptor_;
}

const dot_info& dot_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

dot_info* dot_info::default_instance_ = NULL;

dot_info* dot_info::New() const {
  return new dot_info;
}

void dot_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _dot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dot_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _dot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_dot_id_)));
          set_has__dot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dot_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _dot_id = 1;
  if (has__dot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_dot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dot_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _dot_id = 1;
  if (has__dot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_dot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dot_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _dot_id = 1;
    if (has__dot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_dot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dot_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dot_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dot_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dot_info::MergeFrom(const dot_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__dot_id()) {
      set__dot_id(from._dot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dot_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dot_info::CopyFrom(const dot_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dot_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dot_info::Swap(dot_info* other) {
  if (other != this) {
    std::swap(_dot_id_, other->_dot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dot_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dot_info_descriptor_;
  metadata.reflection = dot_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* require_arousal_arousal_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return require_arousal_arousal_type_descriptor_;
}
bool require_arousal_arousal_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const require_arousal_arousal_type require_arousal::_require_arousal;
const require_arousal_arousal_type require_arousal::apply_arousal;
const require_arousal_arousal_type require_arousal::arousal_type_MIN;
const require_arousal_arousal_type require_arousal::arousal_type_MAX;
const int require_arousal::arousal_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int require_arousal::kHidFieldNumber;
const int require_arousal::kArousalTypeFieldNumber;
const int require_arousal::kAidFieldNumber;
#endif  // !_MSC_VER

require_arousal::require_arousal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void require_arousal::InitAsDefaultInstance() {
}

require_arousal::require_arousal(const require_arousal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void require_arousal::SharedCtor() {
  _cached_size_ = 0;
  _hid_ = 0u;
  _arousal_type_ = 0;
  _aid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

require_arousal::~require_arousal() {
  SharedDtor();
}

void require_arousal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void require_arousal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* require_arousal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return require_arousal_descriptor_;
}

const require_arousal& require_arousal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

require_arousal* require_arousal::default_instance_ = NULL;

require_arousal* require_arousal::New() const {
  return new require_arousal;
}

void require_arousal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _hid_ = 0u;
    _arousal_type_ = 0;
    _aid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool require_arousal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _hid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_hid_)));
          set_has__hid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__arousal_type;
        break;
      }

      // required .up.require_arousal.arousal_type _arousal_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__arousal_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::require_arousal_arousal_type_IsValid(value)) {
            set__arousal_type(static_cast< ::up::require_arousal_arousal_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__aid;
        break;
      }

      // optional uint32 _aid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_aid_)));
          set_has__aid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void require_arousal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _hid = 1;
  if (has__hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_hid(), output);
  }

  // required .up.require_arousal.arousal_type _arousal_type = 2;
  if (has__arousal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->_arousal_type(), output);
  }

  // optional uint32 _aid = 3;
  if (has__aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->_aid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* require_arousal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _hid = 1;
  if (has__hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_hid(), target);
  }

  // required .up.require_arousal.arousal_type _arousal_type = 2;
  if (has__arousal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->_arousal_type(), target);
  }

  // optional uint32 _aid = 3;
  if (has__aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->_aid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int require_arousal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _hid = 1;
    if (has__hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_hid());
    }

    // required .up.require_arousal.arousal_type _arousal_type = 2;
    if (has__arousal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_arousal_type());
    }

    // optional uint32 _aid = 3;
    if (has__aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_aid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void require_arousal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const require_arousal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const require_arousal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void require_arousal::MergeFrom(const require_arousal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__hid()) {
      set__hid(from._hid());
    }
    if (from.has__arousal_type()) {
      set__arousal_type(from._arousal_type());
    }
    if (from.has__aid()) {
      set__aid(from._aid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void require_arousal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void require_arousal::CopyFrom(const require_arousal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_arousal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void require_arousal::Swap(require_arousal* other) {
  if (other != this) {
    std::swap(_hid_, other->_hid_);
    std::swap(_arousal_type_, other->_arousal_type_);
    std::swap(_aid_, other->_aid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata require_arousal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = require_arousal_descriptor_;
  metadata.reflection = require_arousal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_server::kOpTypeFieldNumber;
const int change_server::kServerIdFieldNumber;
#endif  // !_MSC_VER

change_server::change_server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_server::InitAsDefaultInstance() {
}

change_server::change_server(const change_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_server::SharedCtor() {
  _cached_size_ = 0;
  _op_type_ = 0;
  _server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_server::~change_server() {
  SharedDtor();
}

void change_server::SharedDtor() {
  if (this != default_instance_) {
  }
}

void change_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_server_descriptor_;
}

const change_server& change_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

change_server* change_server::default_instance_ = NULL;

change_server* change_server::New() const {
  return new change_server;
}

void change_server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _op_type_ = 0;
    _server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .up.server_opt_type _op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::up::server_opt_type_IsValid(value)) {
            set__op_type(static_cast< ::up::server_opt_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__server_id;
        break;
      }

      // optional uint32 _server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_server_id_)));
          set_has__server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .up.server_opt_type _op_type = 1;
  if (has__op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->_op_type(), output);
  }

  // optional uint32 _server_id = 2;
  if (has__server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .up.server_opt_type _op_type = 1;
  if (has__op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->_op_type(), target);
  }

  // optional uint32 _server_id = 2;
  if (has__server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .up.server_opt_type _op_type = 1;
    if (has__op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_op_type());
    }

    // optional uint32 _server_id = 2;
    if (has__server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_server::MergeFrom(const change_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__op_type()) {
      set__op_type(from._op_type());
    }
    if (from.has__server_id()) {
      set__server_id(from._server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_server::CopyFrom(const change_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void change_server::Swap(change_server* other) {
  if (other != this) {
    std::swap(_op_type_, other->_op_type_);
    std::swap(_server_id_, other->_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_server_descriptor_;
  metadata.reflection = change_server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

request_guild_log::request_guild_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void request_guild_log::InitAsDefaultInstance() {
}

request_guild_log::request_guild_log(const request_guild_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void request_guild_log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request_guild_log::~request_guild_log() {
  SharedDtor();
}

void request_guild_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request_guild_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_guild_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_guild_log_descriptor_;
}

const request_guild_log& request_guild_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

request_guild_log* request_guild_log::default_instance_ = NULL;

request_guild_log* request_guild_log::New() const {
  return new request_guild_log;
}

void request_guild_log::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request_guild_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void request_guild_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* request_guild_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int request_guild_log::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_guild_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request_guild_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request_guild_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request_guild_log::MergeFrom(const request_guild_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request_guild_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_guild_log::CopyFrom(const request_guild_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_guild_log::IsInitialized() const {

  return true;
}

void request_guild_log::Swap(request_guild_log* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request_guild_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_guild_log_descriptor_;
  metadata.reflection = request_guild_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int query_act_stage::kActStageGroupsFieldNumber;
#endif  // !_MSC_VER

query_act_stage::query_act_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void query_act_stage::InitAsDefaultInstance() {
}

query_act_stage::query_act_stage(const query_act_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void query_act_stage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

query_act_stage::~query_act_stage() {
  SharedDtor();
}

void query_act_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void query_act_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_act_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return query_act_stage_descriptor_;
}

const query_act_stage& query_act_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

query_act_stage* query_act_stage::default_instance_ = NULL;

query_act_stage* query_act_stage::New() const {
  return new query_act_stage;
}

void query_act_stage::Clear() {
  _act_stage_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool query_act_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 _act_stage_groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__act_stage_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable__act_stage_groups())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable__act_stage_groups())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse__act_stage_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void query_act_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 _act_stage_groups = 1;
  for (int i = 0; i < this->_act_stage_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->_act_stage_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* query_act_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 _act_stage_groups = 1;
  for (int i = 0; i < this->_act_stage_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->_act_stage_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int query_act_stage::ByteSize() const {
  int total_size = 0;

  // repeated uint32 _act_stage_groups = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->_act_stage_groups_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->_act_stage_groups(i));
    }
    total_size += 1 * this->_act_stage_groups_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_act_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const query_act_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const query_act_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void query_act_stage::MergeFrom(const query_act_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _act_stage_groups_.MergeFrom(from._act_stage_groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void query_act_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_act_stage::CopyFrom(const query_act_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_act_stage::IsInitialized() const {

  return true;
}

void query_act_stage::Swap(query_act_stage* other) {
  if (other != this) {
    _act_stage_groups_.Swap(&other->_act_stage_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata query_act_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = query_act_stage_descriptor_;
  metadata.reflection = query_act_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fb_attention::kFbAttentionFieldNumber;
#endif  // !_MSC_VER

fb_attention::fb_attention()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fb_attention::InitAsDefaultInstance() {
}

fb_attention::fb_attention(const fb_attention& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fb_attention::SharedCtor() {
  _cached_size_ = 0;
  _fb_attention_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fb_attention::~fb_attention() {
  SharedDtor();
}

void fb_attention::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fb_attention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fb_attention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fb_attention_descriptor_;
}

const fb_attention& fb_attention::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_up_2eproto();
  return *default_instance_;
}

fb_attention* fb_attention::default_instance_ = NULL;

fb_attention* fb_attention::New() const {
  return new fb_attention;
}

void fb_attention::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _fb_attention_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fb_attention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _fb_attention = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_fb_attention_)));
          set_has__fb_attention();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fb_attention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _fb_attention = 1;
  if (has__fb_attention()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_fb_attention(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fb_attention::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _fb_attention = 1;
  if (has__fb_attention()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_fb_attention(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fb_attention::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _fb_attention = 1;
    if (has__fb_attention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_fb_attention());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fb_attention::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fb_attention* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fb_attention*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fb_attention::MergeFrom(const fb_attention& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__fb_attention()) {
      set__fb_attention(from._fb_attention());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fb_attention::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fb_attention::CopyFrom(const fb_attention& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fb_attention::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fb_attention::Swap(fb_attention* other) {
  if (other != this) {
    std::swap(_fb_attention_, other->_fb_attention_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fb_attention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fb_attention_descriptor_;
  metadata.reflection = fb_attention_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace up

// @@protoc_insertion_point(global_scope)

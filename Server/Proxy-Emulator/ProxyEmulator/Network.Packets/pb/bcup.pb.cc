// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bcup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bcup {

namespace {

const ::google::protobuf::Descriptor* battlecheck_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battlecheck_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* check_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  check_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* check_result_result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bcup_2eproto() {
  protobuf_AddDesc_bcup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bcup.proto");
  GOOGLE_CHECK(file != NULL);
  battlecheck_reply_descriptor_ = file->message_type(0);
  static const int battlecheck_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battlecheck_reply, _result_),
  };
  battlecheck_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battlecheck_reply_descriptor_,
      battlecheck_reply::default_instance_,
      battlecheck_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battlecheck_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battlecheck_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battlecheck_reply));
  check_result_descriptor_ = file->message_type(1);
  static const int check_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _checkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _is_plugin_),
  };
  check_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      check_result_descriptor_,
      check_result::default_instance_,
      check_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(check_result));
  check_result_result_descriptor_ = check_result_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bcup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battlecheck_reply_descriptor_, &battlecheck_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    check_result_descriptor_, &check_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bcup_2eproto() {
  delete battlecheck_reply::default_instance_;
  delete battlecheck_reply_reflection_;
  delete check_result::default_instance_;
  delete check_result_reflection_;
}

void protobuf_AddDesc_bcup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbcup.proto\022\004bcup\"8\n\021battlecheck_reply\022"
    "#\n\007_result\030\001 \003(\0132\022.bcup.check_result\"\263\001\n"
    "\014check_result\022\020\n\010_checkid\030\001 \002(\r\022\017\n\007_user"
    "id\030\002 \002(\r\0222\n\007_result\030\003 \002(\0162\031.bcup.check_r"
    "esult.result:\006honest\022\022\n\n_is_plugin\030\004 \002(\r"
    "\"8\n\006result\022\n\n\006honest\020\001\022\t\n\005cheat\020\002\022\013\n\007vic"
    "tory\020\003\022\n\n\006defeat\020\004", 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bcup.proto", &protobuf_RegisterTypes);
  battlecheck_reply::default_instance_ = new battlecheck_reply();
  check_result::default_instance_ = new check_result();
  battlecheck_reply::default_instance_->InitAsDefaultInstance();
  check_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bcup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bcup_2eproto {
  StaticDescriptorInitializer_bcup_2eproto() {
    protobuf_AddDesc_bcup_2eproto();
  }
} static_descriptor_initializer_bcup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int battlecheck_reply::kResultFieldNumber;
#endif  // !_MSC_VER

battlecheck_reply::battlecheck_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battlecheck_reply::InitAsDefaultInstance() {
}

battlecheck_reply::battlecheck_reply(const battlecheck_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battlecheck_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battlecheck_reply::~battlecheck_reply() {
  SharedDtor();
}

void battlecheck_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battlecheck_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battlecheck_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battlecheck_reply_descriptor_;
}

const battlecheck_reply& battlecheck_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bcup_2eproto();
  return *default_instance_;
}

battlecheck_reply* battlecheck_reply::default_instance_ = NULL;

battlecheck_reply* battlecheck_reply::New() const {
  return new battlecheck_reply;
}

void battlecheck_reply::Clear() {
  _result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battlecheck_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bcup.check_result _result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse__result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battlecheck_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bcup.check_result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battlecheck_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bcup.check_result _result = 1;
  for (int i = 0; i < this->_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battlecheck_reply::ByteSize() const {
  int total_size = 0;

  // repeated .bcup.check_result _result = 1;
  total_size += 1 * this->_result_size();
  for (int i = 0; i < this->_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battlecheck_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battlecheck_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battlecheck_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battlecheck_reply::MergeFrom(const battlecheck_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  _result_.MergeFrom(from._result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battlecheck_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battlecheck_reply::CopyFrom(const battlecheck_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battlecheck_reply::IsInitialized() const {

  for (int i = 0; i < _result_size(); i++) {
    if (!this->_result(i).IsInitialized()) return false;
  }
  return true;
}

void battlecheck_reply::Swap(battlecheck_reply* other) {
  if (other != this) {
    _result_.Swap(&other->_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battlecheck_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battlecheck_reply_descriptor_;
  metadata.reflection = battlecheck_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* check_result_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_result_result_descriptor_;
}
bool check_result_result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const check_result_result check_result::honest;
const check_result_result check_result::cheat;
const check_result_result check_result::victory;
const check_result_result check_result::defeat;
const check_result_result check_result::result_MIN;
const check_result_result check_result::result_MAX;
const int check_result::result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int check_result::kCheckidFieldNumber;
const int check_result::kUseridFieldNumber;
const int check_result::kResultFieldNumber;
const int check_result::kIsPluginFieldNumber;
#endif  // !_MSC_VER

check_result::check_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void check_result::InitAsDefaultInstance() {
}

check_result::check_result(const check_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void check_result::SharedCtor() {
  _cached_size_ = 0;
  _checkid_ = 0u;
  _userid_ = 0u;
  _result_ = 1;
  _is_plugin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

check_result::~check_result() {
  SharedDtor();
}

void check_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void check_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* check_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_result_descriptor_;
}

const check_result& check_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bcup_2eproto();
  return *default_instance_;
}

check_result* check_result::default_instance_ = NULL;

check_result* check_result::New() const {
  return new check_result;
}

void check_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    _checkid_ = 0u;
    _userid_ = 0u;
    _result_ = 1;
    _is_plugin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool check_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 _checkid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_checkid_)));
          set_has__checkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse__userid;
        break;
      }

      // required uint32 _userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_userid_)));
          set_has__userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse__result;
        break;
      }

      // required .bcup.check_result.result _result = 3 [default = honest];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bcup::check_result_result_IsValid(value)) {
            set__result(static_cast< ::bcup::check_result_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse__is_plugin;
        break;
      }

      // required uint32 _is_plugin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse__is_plugin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &_is_plugin_)));
          set_has__is_plugin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void check_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->_checkid(), output);
  }

  // required uint32 _userid = 2;
  if (has__userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->_userid(), output);
  }

  // required .bcup.check_result.result _result = 3 [default = honest];
  if (has__result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->_result(), output);
  }

  // required uint32 _is_plugin = 4;
  if (has__is_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->_is_plugin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* check_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 _checkid = 1;
  if (has__checkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->_checkid(), target);
  }

  // required uint32 _userid = 2;
  if (has__userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->_userid(), target);
  }

  // required .bcup.check_result.result _result = 3 [default = honest];
  if (has__result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->_result(), target);
  }

  // required uint32 _is_plugin = 4;
  if (has__is_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->_is_plugin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int check_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 _checkid = 1;
    if (has__checkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_checkid());
    }

    // required uint32 _userid = 2;
    if (has__userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_userid());
    }

    // required .bcup.check_result.result _result = 3 [default = honest];
    if (has__result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->_result());
    }

    // required uint32 _is_plugin = 4;
    if (has__is_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->_is_plugin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void check_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const check_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const check_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void check_result::MergeFrom(const check_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__checkid()) {
      set__checkid(from._checkid());
    }
    if (from.has__userid()) {
      set__userid(from._userid());
    }
    if (from.has__result()) {
      set__result(from._result());
    }
    if (from.has__is_plugin()) {
      set__is_plugin(from._is_plugin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void check_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_result::CopyFrom(const check_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void check_result::Swap(check_result* other) {
  if (other != this) {
    std::swap(_checkid_, other->_checkid_);
    std::swap(_userid_, other->_userid_);
    std::swap(_result_, other->_result_);
    std::swap(_is_plugin_, other->_is_plugin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata check_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = check_result_descriptor_;
  metadata.reflection = check_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bcup

// @@protoc_insertion_point(global_scope)

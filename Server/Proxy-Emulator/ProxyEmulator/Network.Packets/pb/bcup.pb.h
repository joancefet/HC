// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcup.proto

#ifndef PROTOBUF_bcup_2eproto__INCLUDED
#define PROTOBUF_bcup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bcup {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bcup_2eproto();
void protobuf_AssignDesc_bcup_2eproto();
void protobuf_ShutdownFile_bcup_2eproto();

class battlecheck_reply;
class check_result;

enum check_result_result {
  check_result_result_honest = 1,
  check_result_result_cheat = 2,
  check_result_result_victory = 3,
  check_result_result_defeat = 4
};
bool check_result_result_IsValid(int value);
const check_result_result check_result_result_result_MIN = check_result_result_honest;
const check_result_result check_result_result_result_MAX = check_result_result_defeat;
const int check_result_result_result_ARRAYSIZE = check_result_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* check_result_result_descriptor();
inline const ::std::string& check_result_result_Name(check_result_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    check_result_result_descriptor(), value);
}
inline bool check_result_result_Parse(
    const ::std::string& name, check_result_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<check_result_result>(
    check_result_result_descriptor(), name, value);
}
// ===================================================================

class battlecheck_reply : public ::google::protobuf::Message {
 public:
  battlecheck_reply();
  virtual ~battlecheck_reply();

  battlecheck_reply(const battlecheck_reply& from);

  inline battlecheck_reply& operator=(const battlecheck_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battlecheck_reply& default_instance();

  void Swap(battlecheck_reply* other);

  // implements Message ----------------------------------------------

  battlecheck_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battlecheck_reply& from);
  void MergeFrom(const battlecheck_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bcup.check_result _result = 1;
  inline int _result_size() const;
  inline void clear__result();
  static const int kResultFieldNumber = 1;
  inline const ::bcup::check_result& _result(int index) const;
  inline ::bcup::check_result* mutable__result(int index);
  inline ::bcup::check_result* add__result();
  inline const ::google::protobuf::RepeatedPtrField< ::bcup::check_result >&
      _result() const;
  inline ::google::protobuf::RepeatedPtrField< ::bcup::check_result >*
      mutable__result();

  // @@protoc_insertion_point(class_scope:bcup.battlecheck_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bcup::check_result > _result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_bcup_2eproto();
  friend void protobuf_AssignDesc_bcup_2eproto();
  friend void protobuf_ShutdownFile_bcup_2eproto();

  void InitAsDefaultInstance();
  static battlecheck_reply* default_instance_;
};
// -------------------------------------------------------------------

class check_result : public ::google::protobuf::Message {
 public:
  check_result();
  virtual ~check_result();

  check_result(const check_result& from);

  inline check_result& operator=(const check_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const check_result& default_instance();

  void Swap(check_result* other);

  // implements Message ----------------------------------------------

  check_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const check_result& from);
  void MergeFrom(const check_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef check_result_result result;
  static const result honest = check_result_result_honest;
  static const result cheat = check_result_result_cheat;
  static const result victory = check_result_result_victory;
  static const result defeat = check_result_result_defeat;
  static inline bool result_IsValid(int value) {
    return check_result_result_IsValid(value);
  }
  static const result result_MIN =
    check_result_result_result_MIN;
  static const result result_MAX =
    check_result_result_result_MAX;
  static const int result_ARRAYSIZE =
    check_result_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return check_result_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return check_result_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return check_result_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 _checkid = 1;
  inline bool has__checkid() const;
  inline void clear__checkid();
  static const int kCheckidFieldNumber = 1;
  inline ::google::protobuf::uint32 _checkid() const;
  inline void set__checkid(::google::protobuf::uint32 value);

  // required uint32 _userid = 2;
  inline bool has__userid() const;
  inline void clear__userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint32 _userid() const;
  inline void set__userid(::google::protobuf::uint32 value);

  // required .bcup.check_result.result _result = 3 [default = honest];
  inline bool has__result() const;
  inline void clear__result();
  static const int kResultFieldNumber = 3;
  inline ::bcup::check_result_result _result() const;
  inline void set__result(::bcup::check_result_result value);

  // required uint32 _is_plugin = 4;
  inline bool has__is_plugin() const;
  inline void clear__is_plugin();
  static const int kIsPluginFieldNumber = 4;
  inline ::google::protobuf::uint32 _is_plugin() const;
  inline void set__is_plugin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bcup.check_result)
 private:
  inline void set_has__checkid();
  inline void clear_has__checkid();
  inline void set_has__userid();
  inline void clear_has__userid();
  inline void set_has__result();
  inline void clear_has__result();
  inline void set_has__is_plugin();
  inline void clear_has__is_plugin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _checkid_;
  ::google::protobuf::uint32 _userid_;
  int _result_;
  ::google::protobuf::uint32 _is_plugin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bcup_2eproto();
  friend void protobuf_AssignDesc_bcup_2eproto();
  friend void protobuf_ShutdownFile_bcup_2eproto();

  void InitAsDefaultInstance();
  static check_result* default_instance_;
};
// ===================================================================


// ===================================================================

// battlecheck_reply

// repeated .bcup.check_result _result = 1;
inline int battlecheck_reply::_result_size() const {
  return _result_.size();
}
inline void battlecheck_reply::clear__result() {
  _result_.Clear();
}
inline const ::bcup::check_result& battlecheck_reply::_result(int index) const {
  return _result_.Get(index);
}
inline ::bcup::check_result* battlecheck_reply::mutable__result(int index) {
  return _result_.Mutable(index);
}
inline ::bcup::check_result* battlecheck_reply::add__result() {
  return _result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bcup::check_result >&
battlecheck_reply::_result() const {
  return _result_;
}
inline ::google::protobuf::RepeatedPtrField< ::bcup::check_result >*
battlecheck_reply::mutable__result() {
  return &_result_;
}

// -------------------------------------------------------------------

// check_result

// required uint32 _checkid = 1;
inline bool check_result::has__checkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void check_result::set_has__checkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void check_result::clear_has__checkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void check_result::clear__checkid() {
  _checkid_ = 0u;
  clear_has__checkid();
}
inline ::google::protobuf::uint32 check_result::_checkid() const {
  return _checkid_;
}
inline void check_result::set__checkid(::google::protobuf::uint32 value) {
  set_has__checkid();
  _checkid_ = value;
}

// required uint32 _userid = 2;
inline bool check_result::has__userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void check_result::set_has__userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void check_result::clear_has__userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void check_result::clear__userid() {
  _userid_ = 0u;
  clear_has__userid();
}
inline ::google::protobuf::uint32 check_result::_userid() const {
  return _userid_;
}
inline void check_result::set__userid(::google::protobuf::uint32 value) {
  set_has__userid();
  _userid_ = value;
}

// required .bcup.check_result.result _result = 3 [default = honest];
inline bool check_result::has__result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void check_result::set_has__result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void check_result::clear_has__result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void check_result::clear__result() {
  _result_ = 1;
  clear_has__result();
}
inline ::bcup::check_result_result check_result::_result() const {
  return static_cast< ::bcup::check_result_result >(_result_);
}
inline void check_result::set__result(::bcup::check_result_result value) {
  assert(::bcup::check_result_result_IsValid(value));
  set_has__result();
  _result_ = value;
}

// required uint32 _is_plugin = 4;
inline bool check_result::has__is_plugin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void check_result::set_has__is_plugin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void check_result::clear_has__is_plugin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void check_result::clear__is_plugin() {
  _is_plugin_ = 0u;
  clear_has__is_plugin();
}
inline ::google::protobuf::uint32 check_result::_is_plugin() const {
  return _is_plugin_;
}
inline void check_result::set__is_plugin(::google::protobuf::uint32 value) {
  set_has__is_plugin();
  _is_plugin_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bcup

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bcup::check_result_result>() {
  return ::bcup::check_result_result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bcup_2eproto__INCLUDED

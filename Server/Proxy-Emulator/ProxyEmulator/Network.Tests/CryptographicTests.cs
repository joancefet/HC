using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;

namespace Network.Tests
{
    [TestFixture]
    public class CryptographicTests
    {
        [Test]
        public void DecryptTest()
        {
            var decTest = new byte[]
            {
                0x4A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x01, 0x1A, 0x33, 0x08, 0x00, 0x12, 0x0B, 0x77, 0x69,
                0x6E, 0x33, 0x32, 0x5F, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x1A, 0x20, 0x34, 0x37, 0x62, 0x32, 0x36,
                0x30, 0x37, 0x62, 0x39, 0x34, 0x31, 0x61, 0x37, 0x61, 0x62, 0x63, 0x35, 0x61, 0x63, 0x34, 0x65,
                0x32, 0x30, 0x38, 0x30, 0x65, 0x38, 0x31, 0x36, 0x31, 0x32, 0x33, 0x20, 0x00, 0xB2, 0x02, 0x0E,
                0x0A, 0x0A, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x10, 0x00, 0x00, 0x00,
            };

            var dec = Encryption.Decrypt(new byte[]
            {
                0x28, 0x5C, 0x88, 0x0D, 0xA4, 0x54, 0xBD, 0x40, 0x7F, 0x58, 0x4B, 0x96, 0x19, 0xB3, 0x21, 0x0F,
                0xDE, 0x13, 0xEF, 0xE9, 0x04, 0x00, 0xCC, 0x36, 0x6A, 0x1B, 0xF0, 0x53, 0xB4, 0x90, 0xC6, 0xF2,
                0x71, 0x25, 0x6E, 0x90, 0x74, 0x7E, 0x8D, 0xD9, 0x24, 0x97, 0x60, 0xE8, 0xA9, 0x92, 0x97, 0x00,
                0x31, 0x4B, 0x47, 0xC4, 0x93, 0x1F, 0xE0, 0x64, 0x6F, 0xFE, 0x50, 0x31, 0x1A, 0x43, 0xD4, 0xB1,
                0xC3, 0x74, 0x90, 0x07, 0x78, 0x78, 0x6C, 0xFB, 0xF2, 0xF6, 0x59, 0x38, 0x68, 0x0F, 0xE6, 0xA6
            }, "123456789");

            Assert.IsTrue(TestClass.IsSame(dec, decTest));
        }

        [Test]
        public void EncryptTest()
        {
            var decTest = new byte[]
            {
                0x28, 0x5C, 0x88, 0x0D, 0xA4, 0x54, 0xBD, 0x40, 0x7F, 0x58, 0x4B, 0x96, 0x19, 0xB3, 0x21, 0x0F,
                0xDE, 0x13, 0xEF, 0xE9, 0x04, 0x00, 0xCC, 0x36, 0x6A, 0x1B, 0xF0, 0x53, 0xB4, 0x90, 0xC6, 0xF2,
                0x71, 0x25, 0x6E, 0x90, 0x74, 0x7E, 0x8D, 0xD9, 0x24, 0x97, 0x60, 0xE8, 0xA9, 0x92, 0x97, 0x00,
                0x31, 0x4B, 0x47, 0xC4, 0x93, 0x1F, 0xE0, 0x64, 0x6F, 0xFE, 0x50, 0x31, 0x1A, 0x43, 0xD4, 0xB1,
                0xC3, 0x74, 0x90, 0x07, 0x78, 0x78, 0x6C, 0xFB, 0xF2, 0xF6, 0x59, 0x38, 0x68, 0x0F, 0xE6, 0xA6
            };

            var dec = Encryption.Encrypt(new byte[]
            {
                0x4A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x01, 0x1A, 0x33, 0x08, 0x00, 0x12, 0x0B, 0x77, 0x69,
                0x6E, 0x33, 0x32, 0x5F, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x1A, 0x20, 0x34, 0x37, 0x62, 0x32, 0x36,
                0x30, 0x37, 0x62, 0x39, 0x34, 0x31, 0x61, 0x37, 0x61, 0x62, 0x63, 0x35, 0x61, 0x63, 0x34, 0x65,
                0x32, 0x30, 0x38, 0x30, 0x65, 0x38, 0x31, 0x36, 0x31, 0x32, 0x33, 0x20, 0x00, 0xB2, 0x02, 0x0E,
                0x0A, 0x0A, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x10, 0x00, 0x00, 0x00,
            }, "123456789");

            Assert.IsTrue(TestClass.IsSame(dec, decTest));
        }

        [Test]
        public void EncryptRc4Test()
        {
            //Hello World!
            //2E 9C 7D BF A9 27 95 C1 7C 82 0B 60
            var encTest = new byte[] {0x2E, 0x9C, 0x7D, 0xBF, 0xA9, 0x27, 0x95, 0xC1, 0x7C, 0x82, 0x0B, 0x60};
            var enc = Encryption.Encrypt_RC4(new byte[]
                {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21});
            Assert.IsTrue(TestClass.IsSame(enc, encTest));
        }

        [Test]
        public void DecryptRc4Test()
        {
            var encTest = new byte[] { 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 };
            var enc = Encryption.Encrypt_RC4(new byte[]
                {0x2E, 0x9C, 0x7D, 0xBF, 0xA9, 0x27, 0x95, 0xC1, 0x7C, 0x82, 0x0B, 0x60});
            Assert.IsTrue(TestClass.IsSame(enc, encTest));
        }
    }
}